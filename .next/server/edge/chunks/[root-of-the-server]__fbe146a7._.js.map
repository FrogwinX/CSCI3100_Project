{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/utils/sessions.ts"],"sourcesContent":["import { SessionOptions, getIronSession, unsealData } from \"iron-session\";\nimport type { NextRequest } from \"next/server\";\n\n// Type for session data\nexport interface SessionData {\n  userId?: number;\n  username?: string;\n  roles?: string;\n  isLoggedIn: boolean;\n  token?: string;\n  avatar?: string | null;\n  email?: string;\n}\n\n// Default session state when not logged in\nexport const defaultSession: SessionData = {\n  isLoggedIn: false,\n};\n\n// Session configuration\nexport const sessionOptions: SessionOptions = {\n  password:\n    process.env.SESSION_SECRET ||\n    (process.env.NODE_ENV === \"development\" ? \"FALLBACK_DEVELOPMENT_SECRET_KEY_IF_NO_ENV_FILE\" : \"\"),\n  cookieName: \"flowchat_session\",\n  cookieOptions: {\n    // secure should be true in production\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"strict\",\n    maxAge: 60 * 60 * 24, // 1 day\n  },\n};\n\n// Get the session data\nexport async function getSession() {\n  const { cookies } = await import(\"next/headers\");\n  const session = await getIronSession<SessionData>(await cookies(), sessionOptions);\n\n  // Initialize the session if not already done\n  if (!session.isLoggedIn) {\n    session.isLoggedIn = false;\n  }\n\n  return session;\n}\n\n// Read-only version of session for middleware\nexport async function readSessionFromRequest(req: NextRequest): Promise<SessionData> {\n  try {\n    const cookieValue = req.cookies.get(sessionOptions.cookieName)?.value;\n\n    if (!cookieValue) {\n      return defaultSession;\n    }\n\n    const data = await unsealData<SessionData>(cookieValue, {\n      password: sessionOptions.password,\n    });\n\n    return data.isLoggedIn ? data : defaultSession;\n  } catch (error) {\n    console.error(\"Error reading session in middleware:\", error);\n    return defaultSession;\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAeO,MAAM,iBAA8B;IACzC,YAAY;AACd;AAGO,MAAM,iBAAiC;IAC5C,UACE,QAAQ,GAAG,CAAC,cAAc,IAC1B,CAAC,uCAAyC,uFAAqD;IACjG,YAAY;IACZ,eAAe;QACb,sCAAsC;QACtC,QAAQ,oDAAyB;QACjC,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;AACF;AAGO,eAAe;IACpB,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,wJAAA,CAAA,iBAAc,AAAD,EAAe,MAAM,WAAW;IAEnE,6CAA6C;IAC7C,IAAI,CAAC,QAAQ,UAAU,EAAE;QACvB,QAAQ,UAAU,GAAG;IACvB;IAEA,OAAO;AACT;AAGO,eAAe,uBAAuB,GAAgB;IAC3D,IAAI;QACF,MAAM,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,UAAU,GAAG;QAEhE,IAAI,CAAC,aAAa;YAChB,OAAO;QACT;QAEA,MAAM,OAAO,MAAM,CAAA,GAAA,wJAAA,CAAA,aAAU,AAAD,EAAe,aAAa;YACtD,UAAU,eAAe,QAAQ;QACnC;QAEA,OAAO,KAAK,UAAU,GAAG,OAAO;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;IACT;AACF"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { readSessionFromRequest } from \"@/utils/sessions\";\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname;\n\n  // Forum default route handling\n  if (path === \"/forum\" || path === \"/forum/\") {\n    return NextResponse.redirect(new URL(\"/forum/latest\", request.url));\n  }\n\n  // Define path categories\n  const authPaths = [\"/login\", \"/register\", \"/forgot-password\", \"/reset-password\"];\n  const isAuthPath = authPaths.includes(path);\n  const isRoot = path === \"/\";\n\n  // Get session state\n  const session = await readSessionFromRequest(request);\n  const isAuthenticated = session.isLoggedIn;\n\n  // Redirect logic\n  if (isAuthenticated && isRoot) {\n    return NextResponse.redirect(new URL(\"/forum/latest\", request.url));\n  }\n\n  if (isAuthenticated && isAuthPath) {\n    // Authenticated users shouldn't access auth pages\n    return NextResponse.redirect(new URL(\"/\", request.url));\n  }\n\n  if (!isAuthenticated && !isAuthPath) {\n    // Unauthenticated users can only access auth pages\n    return NextResponse.redirect(new URL(\"/login\", request.url));\n  }\n\n  // Default: allow the navigation\n  return NextResponse.next();\n}\n\n// Match all paths except static files, api routes and static web app health check\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico|.swa).*)\"],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,+BAA+B;IAC/B,IAAI,SAAS,YAAY,SAAS,WAAW;QAC3C,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,QAAQ,GAAG;IACnE;IAEA,yBAAyB;IACzB,MAAM,YAAY;QAAC;QAAU;QAAa;QAAoB;KAAkB;IAChF,MAAM,aAAa,UAAU,QAAQ,CAAC;IACtC,MAAM,SAAS,SAAS;IAExB,oBAAoB;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,gIAAA,CAAA,yBAAsB,AAAD,EAAE;IAC7C,MAAM,kBAAkB,QAAQ,UAAU;IAE1C,iBAAiB;IACjB,IAAI,mBAAmB,QAAQ;QAC7B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,QAAQ,GAAG;IACnE;IAEA,IAAI,mBAAmB,YAAY;QACjC,kDAAkD;QAClD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,IAAI,CAAC,mBAAmB,CAAC,YAAY;QACnC,mDAAmD;QACnD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IAEA,gCAAgC;IAChC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAyD;AACrE"}}]
}