{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\n// API response types\ninterface ApiResponse<T> {\n  message: string;\n  data: T;\n}\n\ninterface LoginData {\n  isPasswordCorrect: boolean | null;\n  isAccountActive: boolean;\n  user: {\n    roles: string;\n    id: number;\n    avatar: string | null;\n    email: string;\n    token: string;\n    username: string;\n  } | null;\n}\n\ninterface RegisterData {\n  user: {\n    role: string;\n    id: number;\n    username: string;\n  } | null;\n  isSuccess: boolean;\n}\n\ninterface RequestData {\n  isSuccess: boolean;\n}\n\ninterface EmailCheckData {\n  isEmailUnique: boolean;\n}\n\ninterface UsernameCheckData {\n  isUsernameUnique: boolean;\n}\n\ninterface DeleteAccountData {\n  isSuccess: boolean;\n}\n\ninterface ResetPasswordData {\n  username: string | null;\n  isSuccess: boolean;\n}\n\n// Helper function for API calls to reduce repetition\nasync function apiFetch<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(`https://flowchatbackend.azurewebsites.net/api/${endpoint}`, options);\n    const result: ApiResponse<T> = await response.json();\n    return result;\n  } catch (error) {\n    console.error(`API error (${endpoint}):`, error);\n    return {\n      message: \"An error occurred during the request\",\n      data: {} as T,\n    };\n  }\n}\n\n// Login server action\nexport async function login(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const result = await apiFetch<LoginData>(\"/Account/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    // Successful login\n    if (result.data.isPasswordCorrect && result.data.isAccountActive && result.data.user) {\n      const session = await getSession();\n\n      // Save user data in session\n      session.userId = result.data.user.id;\n      session.username = result.data.user.username;\n      session.roles = result.data.user.roles;\n      session.isLoggedIn = true;\n      session.token = result.data.user.token;\n      session.avatar = result.data.user.avatar;\n      session.email = result.data.user.email;\n      await session.save();\n    }\n\n    return result;\n  } catch {\n    return {\n      message: \"Login failed\",\n      data: {\n        isPasswordCorrect: false,\n        isAccountActive: false,\n        user: null,\n      },\n    };\n  }\n}\n\n// Logout server action\nexport async function logout() {\n  try {\n    // clear session\n    const session = await getSession();\n    session.destroy();\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    return { error: \"Failed to log out\" };\n  }\n}\n\n// Registration server action\nexport async function register(formData: FormData) {\n  const username = formData.get(\"username\") as string;\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const licenseKey = formData.get(\"licenseKey\") as string;\n\n  try {\n    const result = await apiFetch<RegisterData>(\"Account/registerAccount\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password, licenseKey }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"An error occurred during registration\",\n      data: {\n        user: null,\n        isSuccess: false,\n      },\n    };\n  }\n}\n\n// Request license key server action\nexport async function requestLicenseKey(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestLicenseKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request license key\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Request authentication code server action\nexport async function requestAuthCode(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestAuthenticationCode\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request authentication code\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Check if email is unique server action\nexport async function checkEmailUnique(email: string) {\n  try {\n    return await apiFetch<EmailCheckData>(`Account/isEmailUnique?email=${encodeURIComponent(email)}`);\n  } catch {\n    return {\n      message: \"Failed to check email uniqueness\",\n      data: { isEmailUnique: false },\n    };\n  }\n}\n\n// Check if username is unique server action\nexport async function checkUsernameUnique(username: string) {\n  try {\n    return await apiFetch<UsernameCheckData>(`Account/isUsernameUnique?username=${encodeURIComponent(username)}`);\n  } catch {\n    return {\n      message: \"Failed to check username uniqueness\",\n      data: { isUsernameUnique: false },\n    };\n  }\n}\n\n// Delete account server action\nexport async function deleteAccount(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<DeleteAccountData>(\"Account/deleteAccount\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, username, password }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to delete account\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Reset password by email server action\nexport async function resetPasswordByEmail(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const authenticationCode = formData.get(\"authenticationCode\") as string;\n\n  try {\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByEmail\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password, authenticationCode }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n// Reset password by old password server action\nexport async function resetPasswordByOldPassword(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const oldPassword = formData.get(\"oldPassword\") as string;\n  const newPassword = formData.get(\"newPassword\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByOldPassword\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, oldPassword, newPassword }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n"],"names":[],"mappings":";;;;;;IAqEsB,QAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/forms/formLogin.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { faTriangleExclamation } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { login } from \"@/utils/authentication\";\nimport { useSession } from \"@/hooks/useSession\";\n\nexport default function Login() {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [serverErrorMessage, setServerErrorMessage] = useState<string>(\"\");\n  const [UsernameOrEmail, setUserInput] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState<string[]>([]);\n  const router = useRouter();\n  const { refresh } = useSession();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    setLoading(true);\n    e.preventDefault();\n    const formData = new FormData();\n\n    if (!UsernameOrEmail) {\n      setErrors((prevErrors) => [\"Username or email is required.\", ...prevErrors]);\n      return;\n    }\n\n    if (UsernameOrEmail.includes(\"@\")) {\n      formData.append(\"email\", UsernameOrEmail);\n    } else {\n      formData.append(\"username\", UsernameOrEmail);\n    }\n\n    if (!password) {\n      setErrors((prevErrors) => [\"Password is required.\", ...prevErrors]);\n      return;\n    }\n\n    formData.append(\"password\", password);\n\n    try {\n      const result = await login(formData);\n      setLoading(false);\n      if (result.data.isPasswordCorrect && result.data.isAccountActive && result.data.user) {\n        // refresh the session to update the UI\n        await refresh();\n        router.push(\"/forum\");\n      } else {\n        setServerErrorMessage(result.message);\n        setErrors((prevErrors) => [result.message, ...prevErrors]);\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n      }\n    } catch {}\n  };\n\n  const clearServerError = () => {\n    if (serverErrorMessage) {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== serverErrorMessage));\n      setServerErrorMessage(\"\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    clearServerError();\n    setUserInput(e.target.value);\n    if (e.target.value) {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Username or email is required.\"));\n    } else {\n      setErrors((prevErrors) => [\"Username or email is required.\", ...prevErrors]);\n    }\n  };\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    clearServerError();\n    setPassword(e.target.value);\n    if (e.target.value) {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Password is required.\"));\n    } else {\n      setErrors((prevErrors) => [\"Password is required.\", ...prevErrors]);\n    }\n  };\n\n  return (\n    <form className=\"card w-fit min-w-sm lg:min-w-lg max-w-xl bg-base-100 shadow-xl\" onSubmit={handleLogin}>\n      <div className=\"card-body gap-4\">\n        <div role=\"alert\" className={`alert alert-error alert-soft ${errors.length ? \"\" : \"invisible\"}`}>\n          <FontAwesomeIcon icon={faTriangleExclamation} className=\"text-2xl text-error\" />\n          <p>\n            <span>\n              {errors[0] || \"\\u00A0\"}\n              <br />\n            </span>\n          </p>\n        </div>\n\n        <h1 className=\"card-title text-center text-4xl \">Sign In</h1>\n        <div className=\"form-control\">\n          <label className=\"label\">\n            <span className=\"label-text text-base-content\">Username / Email</span>\n          </label>\n          <input\n            type=\"input\"\n            placeholder=\"Username or email\"\n            value={UsernameOrEmail}\n            onChange={handleInputChange}\n            className=\"input input-bordered w-full my-1\"\n          />\n        </div>\n\n        <div className=\"form-control\">\n          <label className=\"label\">\n            <span className=\"label-text text-base-content\">Password</span>\n          </label>\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={handlePasswordChange}\n            className=\"input input-bordered w-full my-1\"\n          />\n          <label className=\"label\">\n            <Link href=\"/forgot-password\">\n              <p className=\"label-text-alt link link-hover text-info \">Forgot password?</p>\n            </Link>\n          </label>\n        </div>\n\n        <div className=\"form-control\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary w-full\"\n            onClick={(e) => {\n              if (!UsernameOrEmail) {\n                e.preventDefault();\n                setErrors((prevErrors) => [\"Username or email is required.\", ...prevErrors]);\n                return;\n              }\n              if (!password) {\n                e.preventDefault();\n                setErrors((prevErrors) => [\"Password is required.\", ...prevErrors]);\n                return;\n              }\n            }}\n          >\n            {loading ? <span className=\"loading loading-dots loading-md bg-base-content\"></span> : \"Login\"}\n          </button>\n        </div>\n        <div className=\"form-control mt-2\">\n          <Link href=\"/register\">\n            <button type=\"button\" className=\"btn btn-secondary w-full bg-base-300 text-base-content border-none\">\n              Sign Up\n            </button>\n          </Link>\n        </div>\n      </div>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;AAUe,SAAS;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACrE,MAAM,CAAC,iBAAiB,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACjD,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD;IAE7B,MAAM,cAAc,OAAO;QACzB,WAAW;QACX,EAAE,cAAc;QAChB,MAAM,WAAW,IAAI;QAErB,IAAI,CAAC,iBAAiB;YACpB,UAAU,CAAC,aAAe;oBAAC;uBAAqC;iBAAW;YAC3E;QACF;QAEA,IAAI,gBAAgB,QAAQ,CAAC,MAAM;YACjC,SAAS,MAAM,CAAC,SAAS;QAC3B,OAAO;YACL,SAAS,MAAM,CAAC,YAAY;QAC9B;QAEA,IAAI,CAAC,UAAU;YACb,UAAU,CAAC,aAAe;oBAAC;uBAA4B;iBAAW;YAClE;QACF;QAEA,SAAS,MAAM,CAAC,YAAY;QAE5B,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,oJAAA,CAAA,QAAK,AAAD,EAAE;YAC3B,WAAW;YACX,IAAI,OAAO,IAAI,CAAC,iBAAiB,IAAI,OAAO,IAAI,CAAC,eAAe,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE;gBACpF,uCAAuC;gBACvC,MAAM;gBACN,OAAO,IAAI,CAAC;YACd,OAAO;gBACL,sBAAsB,OAAO,OAAO;gBACpC,UAAU,CAAC,aAAe;wBAAC,OAAO,OAAO;2BAAK;qBAAW;gBACzD,OAAO,QAAQ,CAAC;oBAAE,KAAK;oBAAG,UAAU;gBAAS;YAC/C;QACF,EAAE,OAAM,CAAC;IACX;IAEA,MAAM,mBAAmB;QACvB,IAAI,oBAAoB;YACtB,UAAU,CAAC,aAAe,WAAW,MAAM,CAAC,CAAC,QAAU,UAAU;YACjE,sBAAsB;QACxB;IACF;IAEA,MAAM,oBAAoB,CAAC;QACzB;QACA,aAAa,EAAE,MAAM,CAAC,KAAK;QAC3B,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE;YAClB,UAAU,CAAC,aAAe,WAAW,MAAM,CAAC,CAAC,QAAU,UAAU;QACnE,OAAO;YACL,UAAU,CAAC,aAAe;oBAAC;uBAAqC;iBAAW;QAC7E;IACF;IAEA,MAAM,uBAAuB,CAAC;QAC5B;QACA,YAAY,EAAE,MAAM,CAAC,KAAK;QAC1B,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE;YAClB,UAAU,CAAC,aAAe,WAAW,MAAM,CAAC,CAAC,QAAU,UAAU;QACnE,OAAO;YACL,UAAU,CAAC,aAAe;oBAAC;uBAA4B;iBAAW;QACpE;IACF;IAEA,qBACE,8OAAC;QAAK,WAAU;QAAiE,UAAU;kBACzF,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,MAAK;oBAAQ,WAAW,CAAC,6BAA6B,EAAE,OAAO,MAAM,GAAG,KAAK,aAAa;;sCAC7F,8OAAC,oKAAA,CAAA,kBAAe;4BAAC,MAAM,wKAAA,CAAA,wBAAqB;4BAAE,WAAU;;;;;;sCACxD,8OAAC;sCACC,cAAA,8OAAC;;oCACE,MAAM,CAAC,EAAE,IAAI;kDACd,8OAAC;;;;;;;;;;;;;;;;;;;;;;8BAKP,8OAAC;oBAAG,WAAU;8BAAmC;;;;;;8BACjD,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAM,WAAU;sCACf,cAAA,8OAAC;gCAAK,WAAU;0CAA+B;;;;;;;;;;;sCAEjD,8OAAC;4BACC,MAAK;4BACL,aAAY;4BACZ,OAAO;4BACP,UAAU;4BACV,WAAU;;;;;;;;;;;;8BAId,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAM,WAAU;sCACf,cAAA,8OAAC;gCAAK,WAAU;0CAA+B;;;;;;;;;;;sCAEjD,8OAAC;4BACC,MAAK;4BACL,aAAY;4BACZ,OAAO;4BACP,UAAU;4BACV,WAAU;;;;;;sCAEZ,8OAAC;4BAAM,WAAU;sCACf,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCAAC,MAAK;0CACT,cAAA,8OAAC;oCAAE,WAAU;8CAA4C;;;;;;;;;;;;;;;;;;;;;;8BAK/D,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBACC,MAAK;wBACL,WAAU;wBACV,SAAS,CAAC;4BACR,IAAI,CAAC,iBAAiB;gCACpB,EAAE,cAAc;gCAChB,UAAU,CAAC,aAAe;wCAAC;2CAAqC;qCAAW;gCAC3E;4BACF;4BACA,IAAI,CAAC,UAAU;gCACb,EAAE,cAAc;gCAChB,UAAU,CAAC,aAAe;wCAAC;2CAA4B;qCAAW;gCAClE;4BACF;wBACF;kCAEC,wBAAU,8OAAC;4BAAK,WAAU;;;;;mCAA4D;;;;;;;;;;;8BAG3F,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;kCACT,cAAA,8OAAC;4BAAO,MAAK;4BAAS,WAAU;sCAAqE;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQjH","debugId":null}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/app/login/page.tsx"],"sourcesContent":["\"use client\";\n\nimport Login from \"@/components/forms/formLogin\";\n\nexport default function LoginPage() {\n  return (\n    <div className=\"flex h-fit min-h-full items-center justify-center p-8\">\n      <Login />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,wIAAA,CAAA,UAAK;;;;;;;;;;AAGZ","debugId":null}}]
}