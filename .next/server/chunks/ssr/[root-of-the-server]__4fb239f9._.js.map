{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/sessions.ts"],"sourcesContent":["import { SessionOptions, getIronSession, unsealData } from \"iron-session\";\nimport type { NextRequest } from \"next/server\";\n\n// Type for session data\nexport interface SessionData {\n  userId?: number;\n  username?: string;\n  roles?: string;\n  isLoggedIn: boolean;\n  token?: string;\n  avatar?: string | null;\n  email?: string;\n}\n\n// Default session state when not logged in\nexport const defaultSession: SessionData = {\n  isLoggedIn: false,\n};\n\n// Session configuration\nexport const sessionOptions: SessionOptions = {\n  password:\n    process.env.SESSION_SECRET ||\n    (process.env.NODE_ENV === \"development\" ? \"FALLBACK_DEVELOPMENT_SECRET_KEY_IF_NO_ENV_FILE\" : \"\"),\n  cookieName: \"flowchat_session\",\n  cookieOptions: {\n    // secure should be true in production\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"strict\",\n    maxAge: 60 * 60 * 24, // 1 day\n  },\n};\n\n// Get the session data\nexport async function getSession() {\n  const { cookies } = await import(\"next/headers\");\n  const session = await getIronSession<SessionData>(await cookies(), sessionOptions);\n\n  // Initialize the session if not already done\n  if (!session.isLoggedIn) {\n    session.isLoggedIn = false;\n  }\n\n  return session;\n}\n\n// Read-only version of session for middleware\nexport async function readSessionFromRequest(req: NextRequest): Promise<SessionData> {\n  try {\n    const cookieValue = req.cookies.get(sessionOptions.cookieName)?.value;\n\n    if (!cookieValue) {\n      return defaultSession;\n    }\n\n    const data = await unsealData<SessionData>(cookieValue, {\n      password: sessionOptions.password,\n    });\n\n    return data.isLoggedIn ? data : defaultSession;\n  } catch (error) {\n    console.error(\"Error reading session in middleware:\", error);\n    return defaultSession;\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAeO,MAAM,iBAA8B;IACzC,YAAY;AACd;AAGO,MAAM,iBAAiC;IAC5C,UACE,QAAQ,GAAG,CAAC,cAAc,IAC1B,CAAC,uCAAyC,uFAAqD;IACjG,YAAY;IACZ,eAAe;QACb,sCAAsC;QACtC,QAAQ,oDAAyB;QACjC,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;AACF;AAGO,eAAe;IACpB,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,gJAAA,CAAA,iBAAc,AAAD,EAAe,MAAM,WAAW;IAEnE,6CAA6C;IAC7C,IAAI,CAAC,QAAQ,UAAU,EAAE;QACvB,QAAQ,UAAU,GAAG;IACvB;IAEA,OAAO;AACT;AAGO,eAAe,uBAAuB,GAAgB;IAC3D,IAAI;QACF,MAAM,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,UAAU,GAAG;QAEhE,IAAI,CAAC,aAAa;YAChB,OAAO;QACT;QAEA,MAAM,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,aAAU,AAAD,EAAe,aAAa;YACtD,UAAU,eAAe,QAAQ;QACnC;QAEA,OAAO,KAAK,UAAU,GAAG,OAAO;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\n// API response types\ninterface ApiResponse<T> {\n  message: string;\n  data: T;\n}\n\ninterface LoginData {\n  isPasswordCorrect: boolean | null;\n  isAccountActive: boolean;\n  user: {\n    roles: string;\n    id: number;\n    avatar: string | null;\n    email: string;\n    token: string;\n    username: string;\n  } | null;\n}\n\ninterface RegisterData {\n  user: {\n    role: string;\n    id: number;\n    username: string;\n  } | null;\n  isSuccess: boolean;\n}\n\ninterface RequestData {\n  isSuccess: boolean;\n}\n\ninterface EmailCheckData {\n  isEmailUnique: boolean;\n}\n\ninterface UsernameCheckData {\n  isUsernameUnique: boolean;\n}\n\ninterface DeleteAccountData {\n  isSuccess: boolean;\n}\n\ninterface ResetPasswordData {\n  username: string | null;\n  isSuccess: boolean;\n}\n\n// Helper function for API calls to reduce repetition\nasync function apiFetch<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(`https://flowchatbackend.azurewebsites.net/api/${endpoint}`, options);\n    const result: ApiResponse<T> = await response.json();\n    return result;\n  } catch (error) {\n    console.error(`API error (${endpoint}):`, error);\n    return {\n      message: \"An error occurred during the request\",\n      data: {} as T,\n    };\n  }\n}\n\n// Login server action\nexport async function login(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const result = await apiFetch<LoginData>(\"/Account/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    // Successful login\n    if (result.data.isPasswordCorrect && result.data.isAccountActive && result.data.user) {\n      const session = await getSession();\n\n      // Save user data in session\n      session.userId = result.data.user.id;\n      session.username = result.data.user.username;\n      session.roles = result.data.user.roles;\n      session.isLoggedIn = true;\n      session.token = result.data.user.token;\n      session.avatar = result.data.user.avatar;\n      session.email = result.data.user.email;\n      await session.save();\n    }\n\n    return result;\n  } catch {\n    return {\n      message: \"Login failed\",\n      data: {\n        isPasswordCorrect: false,\n        isAccountActive: false,\n        user: null,\n      },\n    };\n  }\n}\n\n// Logout server action\nexport async function logout() {\n  try {\n    // clear session\n    const session = await getSession();\n    session.destroy();\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    return { error: \"Failed to log out\" };\n  }\n}\n\n// Registration server action\nexport async function register(formData: FormData) {\n  const username = formData.get(\"username\") as string;\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const licenseKey = formData.get(\"licenseKey\") as string;\n\n  try {\n    const result = await apiFetch<RegisterData>(\"Account/registerAccount\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password, licenseKey }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"An error occurred during registration\",\n      data: {\n        user: null,\n        isSuccess: false,\n      },\n    };\n  }\n}\n\n// Request license key server action\nexport async function requestLicenseKey(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestLicenseKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request license key\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Request authentication code server action\nexport async function requestAuthCode(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestAuthenticationCode\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request authentication code\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Check if email is unique server action\nexport async function checkEmailUnique(email: string) {\n  try {\n    return await apiFetch<EmailCheckData>(`Account/isEmailUnique?email=${encodeURIComponent(email)}`);\n  } catch {\n    return {\n      message: \"Failed to check email uniqueness\",\n      data: { isEmailUnique: false },\n    };\n  }\n}\n\n// Check if username is unique server action\nexport async function checkUsernameUnique(username: string) {\n  try {\n    return await apiFetch<UsernameCheckData>(`Account/isUsernameUnique?username=${encodeURIComponent(username)}`);\n  } catch {\n    return {\n      message: \"Failed to check username uniqueness\",\n      data: { isUsernameUnique: false },\n    };\n  }\n}\n\n// Delete account server action\nexport async function deleteAccount(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<DeleteAccountData>(\"Account/deleteAccount\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, username, password }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to delete account\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Reset password by email server action\nexport async function resetPasswordByEmail(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const authenticationCode = formData.get(\"authenticationCode\") as string;\n\n  try {\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByEmail\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password, authenticationCode }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n// Reset password by old password server action\nexport async function resetPasswordByOldPassword(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const oldPassword = formData.get(\"oldPassword\") as string;\n  const newPassword = formData.get(\"newPassword\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByOldPassword\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, oldPassword, newPassword }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '00d347e48e6d2236e1f2b1fadcb1fb08f178d130b4'} from 'ACTIONS_MODULE0'\nexport {login as '404da9eeb43196037af4dab8b012da9e43f9a545c4'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}