{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/settings/UserSection.tsx"],"sourcesContent":["\"use client\";\n\nimport UserAvatar from \"@/components/users/UserAvatar\";\nimport { useSession } from \"@/hooks/useSession\";\n\nexport default function UserInfo() {\n\n  const { session } = useSession();\n\n  return (\n    <div className=\"card lg:min-w-lg gap-2 bg-base-100 shadow-md p-4\">\n      <div className=\"h-15 flex items-center gap-6\">\n        {/* User avatar */}\n        <div className=\"avatar avatar-placeholder items-center gap-1\">\n          <UserAvatar src={session.avatar!} size=\"lg\" />\n        </div>\n\n        {/* Username and email */}\n        <div>\n          <h3 className=\"text-xl font-bold\">{session.username}</h3>\n          <p className=\"text-base-content/70\">{session.email}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IAEtB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD;IAE7B,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BAEb,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,yIAAA,CAAA,UAAU;wBAAC,KAAK,QAAQ,MAAM;wBAAG,MAAK;;;;;;;;;;;8BAIzC,8OAAC;;sCACC,8OAAC;4BAAG,WAAU;sCAAqB,QAAQ,QAAQ;;;;;;sCACnD,8OAAC;4BAAE,WAAU;sCAAwB,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;;;AAK5D","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\n// API response types\ninterface ApiResponse<T> {\n  message: string;\n  data: T;\n}\n\ninterface LoginData {\n  isPasswordCorrect: boolean | null;\n  isAccountActive: boolean;\n  user: {\n    roles: string;\n    id: number;\n    avatar: string | null;\n    email: string;\n    token: string;\n    username: string;\n  } | null;\n}\n\ninterface RegisterData {\n  user: {\n    role: string;\n    id: number;\n    username: string;\n  } | null;\n  isSuccess: boolean;\n}\n\ninterface RequestData {\n  isSuccess: boolean;\n}\n\ninterface EmailCheckData {\n  isEmailUnique: boolean;\n}\n\ninterface UsernameCheckData {\n  isUsernameUnique: boolean;\n}\n\ninterface DeleteAccountData {\n  isSuccess: boolean;\n}\n\ninterface ResetPasswordData {\n  username: string | null;\n  isSuccess: boolean;\n}\n\n// Helper function for API calls to reduce repetition\nasync function apiFetch<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(`https://flowchatbackend.azurewebsites.net/api/${endpoint}`, options);\n    const result: ApiResponse<T> = await response.json();\n    return result;\n  } catch (error) {\n    console.error(`API error (${endpoint}):`, error);\n    return {\n      message: \"An error occurred during the request\",\n      data: {} as T,\n    };\n  }\n}\n\n// Login server action\nexport async function login(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const result = await apiFetch<LoginData>(\"/Account/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    // Successful login\n    if (result.data.isPasswordCorrect && result.data.isAccountActive && result.data.user) {\n      const session = await getSession();\n\n      // Save user data in session\n      session.userId = result.data.user.id;\n      session.username = result.data.user.username;\n      session.roles = result.data.user.roles;\n      session.isLoggedIn = true;\n      session.token = result.data.user.token;\n      session.avatar = result.data.user.avatar;\n      session.email = result.data.user.email;\n      await session.save();\n    }\n\n    return result;\n  } catch {\n    return {\n      message: \"Login failed\",\n      data: {\n        isPasswordCorrect: false,\n        isAccountActive: false,\n        user: null,\n      },\n    };\n  }\n}\n\n// Logout server action\nexport async function logout() {\n  try {\n    // clear session\n    const session = await getSession();\n    session.destroy();\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    return { error: \"Failed to log out\" };\n  }\n}\n\n// Registration server action\nexport async function register(formData: FormData) {\n  const username = formData.get(\"username\") as string;\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const licenseKey = formData.get(\"licenseKey\") as string;\n\n  try {\n    const result = await apiFetch<RegisterData>(\"Account/registerAccount\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password, licenseKey }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"An error occurred during registration\",\n      data: {\n        user: null,\n        isSuccess: false,\n      },\n    };\n  }\n}\n\n// Request license key server action\nexport async function requestLicenseKey(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestLicenseKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request license key\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Request authentication code server action\nexport async function requestAuthCode(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestAuthenticationCode\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request authentication code\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Check if email is unique server action\nexport async function checkEmailUnique(email: string) {\n  try {\n    return await apiFetch<EmailCheckData>(`Account/isEmailUnique?email=${encodeURIComponent(email)}`);\n  } catch {\n    return {\n      message: \"Failed to check email uniqueness\",\n      data: { isEmailUnique: false },\n    };\n  }\n}\n\n// Check if username is unique server action\nexport async function checkUsernameUnique(username: string) {\n  try {\n    return await apiFetch<UsernameCheckData>(`Account/isUsernameUnique?username=${encodeURIComponent(username)}`);\n  } catch {\n    return {\n      message: \"Failed to check username uniqueness\",\n      data: { isUsernameUnique: false },\n    };\n  }\n}\n\n// Delete account server action\nexport async function deleteAccount(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<DeleteAccountData>(\"Account/deleteAccount\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, username, password }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to delete account\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Reset password by email server action\nexport async function resetPasswordByEmail(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const authenticationCode = formData.get(\"authenticationCode\") as string;\n\n  try {\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByEmail\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password, authenticationCode }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n// Reset password by old password server action\nexport async function resetPasswordByOldPassword(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const oldPassword = formData.get(\"oldPassword\") as string;\n  const newPassword = formData.get(\"newPassword\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByOldPassword\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, oldPassword, newPassword }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n"],"names":[],"mappings":";;;;;;IAgQsB,6BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/settings/ChangePasswordForm.tsx"],"sourcesContent":["\"use client\";\nimport React, { FormEvent, useState } from \"react\";\nimport { faTriangleExclamation, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { resetPasswordByOldPassword } from \"@/utils/authentication\";\nimport { useSession } from \"@/hooks/useSession\";\n\nexport default function ChangePasswordSection({ setPasswordInputBoxOpen }: { setPasswordInputBoxOpen: (value: boolean) => void }) {\n  const [success, setSuccess] = useState(false);\n  const [serverSuccessMessage, setServerSuccessMessage] = useState<string>(\"\");\n  const [serverErrorMessage, setServerErrorMessage] = useState<string>(\"\");\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [failure, setFailure] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [passwordFormatError, setPasswordFormatError] = useState(false);\n\n  const { session } = useSession();\n\n  const wait = (s: number) => {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  };\n\n  const clearForm = () => {\n    setOldPassword(\"\");\n    setNewPassword(\"\");\n    setConfirmPassword(\"\");\n  }\n\n  const handleForgotPassword = async (e: FormEvent) => {\n    e.preventDefault();\n    setFailure(false);\n    setLoading(true);\n    try {\n      if (session.email === undefined) {\n        throw new Error(\"user email is undefined\");\n      }\n      const formData = new FormData();\n      formData.append(\"email\", session.email)\n      formData.append(\"oldPassword\", oldPassword);\n      formData.append(\"newPassword\", newPassword);\n      const result = await resetPasswordByOldPassword(formData);\n      if (result.data.username && result.data.isSuccess) {\n        setFailure(false);\n        setLoading(false);\n        setSuccess(true);\n        setServerSuccessMessage(result.message);\n        clearForm();\n        await wait(3);\n        setServerSuccessMessage(\"\");\n        setPasswordInputBoxOpen(false);\n        setSuccess(false);\n        clearServerError();\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n      } else {\n        setServerErrorMessage(result.message);\n        setErrors((prevErrors) => [result.message, ...prevErrors]);\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n        setLoading(false);\n        setFailure(true);\n      }\n    } catch { }\n  };\n\n  const clearServerError = () => {\n    if (serverErrorMessage) {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== serverErrorMessage));\n      setServerErrorMessage(\"\");\n    }\n  };\n\n  const handleOldPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    clearServerError();\n    const newOldPassword = e.target.value;\n    if (!newOldPassword) {\n      setErrors((prevErrors) => [\"Password is required\", ...prevErrors]);\n      setOldPassword(newOldPassword);\n      return;\n    } else {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Password is required\"));\n    }\n\n    setOldPassword(newOldPassword);\n  };\n\n  const handleNewPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    clearServerError();\n    const newNewPassword = e.target.value;\n    if (!newNewPassword) {\n      setErrors((prevErrors) => [\"Password is required\", ...prevErrors]);\n      setNewPassword(newNewPassword);\n      return;\n    } else {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Password is required\"));\n    }\n\n    if (newNewPassword.length > 50) {\n      setErrors((prevErrors) => [\"Password cannot exceed 50 characters\", ...prevErrors]);\n      return;\n    } else {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Password cannot exceed 50 characters\"));\n    }\n\n    setNewPassword(newNewPassword);\n\n    const passwordCriteria = /^(?=.*[A-Za-z])(?=.*\\d)(?!.*\\s).{8,}$/;\n    if (!passwordCriteria.test(newNewPassword)) {\n      setPasswordFormatError(true);\n    } else {\n      setPasswordFormatError(false);\n    }\n  };\n\n  const handleConfirmPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    clearServerError();\n    const newConfirmPassword = e.target.value;\n    if (!newConfirmPassword) {\n      setErrors((prevErrors) => [\"Confirm password is required\", ...prevErrors]);\n      setConfirmPassword(newConfirmPassword);\n      return;\n    } else {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Confirm password is required\"));\n    }\n    if (newConfirmPassword !== newPassword) {\n      setErrors((prevErrors) => [\"Passwords do not match\", ...prevErrors]);\n    } else {\n      setErrors((prevErrors) => prevErrors.filter((error) => error !== \"Passwords do not match\"));\n    }\n    setConfirmPassword(newConfirmPassword);\n  };\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-gray-500/20 flex justify-center items-center z-50\">\n      <div\n        className=\"fixed inset-0\"\n        onClick={(): void => {\n          setPasswordInputBoxOpen(false);\n        }}\n      >\n      </div>\n\n      <form className={`card w-fit min-w-sm lg:min-w-lg max-w-xl bg-base-100 shadow-xl`} onSubmit={handleForgotPassword}>\n        <div className={`card-body gap-4\"`}>\n\n          <h1 className=\"card-title text-center text-bg\">Change Your Password</h1>\n\n          {success && !errors.length ? (\n            <div role=\"alert\" className=\"alert alert-success alert-soft\">\n              <FontAwesomeIcon icon={faCheck} className=\"text-2xl text-success\" />\n              <p>{serverSuccessMessage}</p>\n            </div>\n          ) : (\n            <div\n              role=\"alert\"\n              className={`alert alert-error alert-soft ${passwordFormatError || errors.length ? \"\" : \"hidden\"}`}\n            >\n              <FontAwesomeIcon icon={faTriangleExclamation} className=\"text-2xl text-error\" />\n              {passwordFormatError ? (\n                <p>\n                  Password must be at least 8 characters, with <br /> At least one alphabet (a~z, A~Z)\n                  <br /> At least one numerical character (0~9)\n                </p>\n              ) : (\n                <p>{errors[0]}</p>\n              )}\n            </div>\n          )}\n\n          <div className=\"divider my-0\"></div>\n\n          <div className=\"form-control\">\n            <label className=\"label\">\n              <span className=\"label-text text-base-content\">Old Password</span>\n            </label>\n            <input\n              type=\"password\"\n              placeholder=\"Old Password\"\n              className=\"input input-bordered w-full my-1\"\n              value={oldPassword}\n              onChange={handleOldPasswordChange}\n            />\n          </div>\n\n          <div className=\"form-control\">\n            <label className=\"label\">\n              <span className=\"label-text text-base-content\">New Password</span>\n            </label>\n            <input\n              type=\"password\"\n              placeholder=\"New Password\"\n              className=\"input input-bordered w-full my-1\"\n              value={newPassword}\n              onChange={handleNewPasswordChange}\n            />\n          </div>\n\n          <div className=\"form-control\">\n            <label className=\"label\">\n              <span className=\"label-text text-base-content\">Confirm New Password</span>\n            </label>\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              className=\"input input-bordered w-full my-1\"\n              value={confirmPassword}\n              onChange={handleConfirmPasswordChange}\n            />\n          </div>\n\n          <div className=\"form-control\">\n            <button\n              type=\"submit\"\n              className={`btn btn-primary text-primary-content w-full `}\n              onClick={(e) => {\n                if (errors.length) {\n                  e.preventDefault();\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                  return;\n                }\n                if (!oldPassword) {\n                  e.preventDefault();\n                  setErrors((prevErrors) => [\"Old Password is required\", ...prevErrors]);\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                  return;\n                }\n                if (!newPassword) {\n                  e.preventDefault();\n                  setErrors((prevErrors) => [\"New Password is required\", ...prevErrors]);\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                  return;\n                }\n                if (!confirmPassword) {\n                  e.preventDefault();\n                  setErrors((prevErrors) => [\"Confirm password is required\", ...prevErrors]);\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                  return;\n                }\n                if (newPassword !== confirmPassword) {\n                  e.preventDefault();\n                  setErrors((prevErrors) => [\"Passwords do not match\", ...prevErrors]);\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                  return;\n                }\n              }}\n            >\n              {loading ? (\n                <span className=\"loading loading-dots loading-md bg-base-content\"></span>\n              ) : failure ? (\n                \"Retry\"\n              ) : (\n                \"Reset Password\"\n              )}\n            </button>\n          </div>\n\n          <div className={`form-control mt-2`}>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary w-full bg-base-300 text-base-content border-none\"\n              onClick={(): void => {\n                setPasswordInputBoxOpen(false);\n                clearForm();\n                setFailure(false);\n                setPasswordFormatError(false);\n                clearServerError();\n                setErrors([]);\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 583, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/settings/ChangePasswordSection.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport ChangePasswordSection from \"@/components/settings/ChangePasswordForm\"\n\nexport default function ChangePassword() {\n\n  const [isPasswordInputBoxOpen, setPasswordInputBoxOpen] = useState<boolean>(false);\n\n  return (\n    <div className=\"card-body p-0 gap-2\">\n      <div className=\"flex gap-4 items-center\">\n        <div className=\"card-body p-0 gap-2\">\n          <h3 className=\"text-xl font-bold\">Change Password</h3>\n          <p className=\"text-base-content/70\">Strengthen your account by setting a stronger password.</p>\n        </div>\n\n        <div>\n          <button\n            className=\"btn btn-primary\"\n            onClick={(): void => {\n              setPasswordInputBoxOpen(true);\n            }}>\n            Change Password\n          </button>\n          <div className={isPasswordInputBoxOpen ? \"\" : \"hidden\"}>\n            <ChangePasswordSection setPasswordInputBoxOpen={setPasswordInputBoxOpen} />\n          </div>\n        </div>\n      </div>\n      <div className=\"divider my-0\"></div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IAEtB,MAAM,CAAC,wBAAwB,wBAAwB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAE5E,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAoB;;;;;;0CAClC,8OAAC;gCAAE,WAAU;0CAAuB;;;;;;;;;;;;kCAGtC,8OAAC;;0CACC,8OAAC;gCACC,WAAU;gCACV,SAAS;oCACP,wBAAwB;gCAC1B;0CAAG;;;;;;0CAGL,8OAAC;gCAAI,WAAW,yBAAyB,KAAK;0CAC5C,cAAA,8OAAC,oJAAA,CAAA,UAAqB;oCAAC,yBAAyB;;;;;;;;;;;;;;;;;;;;;;;0BAItD,8OAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB","debugId":null}},
    {"offset": {"line": 685, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\n// API response types\ninterface ApiResponse<T> {\n  message: string;\n  data: T;\n}\n\ninterface LoginData {\n  isPasswordCorrect: boolean | null;\n  isAccountActive: boolean;\n  user: {\n    roles: string;\n    id: number;\n    avatar: string | null;\n    email: string;\n    token: string;\n    username: string;\n  } | null;\n}\n\ninterface RegisterData {\n  user: {\n    role: string;\n    id: number;\n    username: string;\n  } | null;\n  isSuccess: boolean;\n}\n\ninterface RequestData {\n  isSuccess: boolean;\n}\n\ninterface EmailCheckData {\n  isEmailUnique: boolean;\n}\n\ninterface UsernameCheckData {\n  isUsernameUnique: boolean;\n}\n\ninterface DeleteAccountData {\n  isSuccess: boolean;\n}\n\ninterface ResetPasswordData {\n  username: string | null;\n  isSuccess: boolean;\n}\n\n// Helper function for API calls to reduce repetition\nasync function apiFetch<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(`https://flowchatbackend.azurewebsites.net/api/${endpoint}`, options);\n    const result: ApiResponse<T> = await response.json();\n    return result;\n  } catch (error) {\n    console.error(`API error (${endpoint}):`, error);\n    return {\n      message: \"An error occurred during the request\",\n      data: {} as T,\n    };\n  }\n}\n\n// Login server action\nexport async function login(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const result = await apiFetch<LoginData>(\"/Account/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    // Successful login\n    if (result.data.isPasswordCorrect && result.data.isAccountActive && result.data.user) {\n      const session = await getSession();\n\n      // Save user data in session\n      session.userId = result.data.user.id;\n      session.username = result.data.user.username;\n      session.roles = result.data.user.roles;\n      session.isLoggedIn = true;\n      session.token = result.data.user.token;\n      session.avatar = result.data.user.avatar;\n      session.email = result.data.user.email;\n      await session.save();\n    }\n\n    return result;\n  } catch {\n    return {\n      message: \"Login failed\",\n      data: {\n        isPasswordCorrect: false,\n        isAccountActive: false,\n        user: null,\n      },\n    };\n  }\n}\n\n// Logout server action\nexport async function logout() {\n  try {\n    // clear session\n    const session = await getSession();\n    session.destroy();\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    return { error: \"Failed to log out\" };\n  }\n}\n\n// Registration server action\nexport async function register(formData: FormData) {\n  const username = formData.get(\"username\") as string;\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const licenseKey = formData.get(\"licenseKey\") as string;\n\n  try {\n    const result = await apiFetch<RegisterData>(\"Account/registerAccount\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password, licenseKey }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"An error occurred during registration\",\n      data: {\n        user: null,\n        isSuccess: false,\n      },\n    };\n  }\n}\n\n// Request license key server action\nexport async function requestLicenseKey(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestLicenseKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request license key\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Request authentication code server action\nexport async function requestAuthCode(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestAuthenticationCode\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request authentication code\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Check if email is unique server action\nexport async function checkEmailUnique(email: string) {\n  try {\n    return await apiFetch<EmailCheckData>(`Account/isEmailUnique?email=${encodeURIComponent(email)}`);\n  } catch {\n    return {\n      message: \"Failed to check email uniqueness\",\n      data: { isEmailUnique: false },\n    };\n  }\n}\n\n// Check if username is unique server action\nexport async function checkUsernameUnique(username: string) {\n  try {\n    return await apiFetch<UsernameCheckData>(`Account/isUsernameUnique?username=${encodeURIComponent(username)}`);\n  } catch {\n    return {\n      message: \"Failed to check username uniqueness\",\n      data: { isUsernameUnique: false },\n    };\n  }\n}\n\n// Delete account server action\nexport async function deleteAccount(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<DeleteAccountData>(\"Account/deleteAccount\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, username, password }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to delete account\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Reset password by email server action\nexport async function resetPasswordByEmail(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const authenticationCode = formData.get(\"authenticationCode\") as string;\n\n  try {\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByEmail\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password, authenticationCode }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n// Reset password by old password server action\nexport async function resetPasswordByOldPassword(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const oldPassword = formData.get(\"oldPassword\") as string;\n  const newPassword = formData.get(\"newPassword\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByOldPassword\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, oldPassword, newPassword }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n"],"names":[],"mappings":";;;;;;IAgNsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 698, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/settings/ConfirmDeleteAccountDialog.tsx"],"sourcesContent":["\"use client\";\n\nimport { useSession } from \"@/hooks/useSession\";\nimport { deleteAccount, logout } from \"@/utils/authentication\";\nimport { faTriangleExclamation } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nexport default function ConfirmDialog({ setConfirmDialogOpen }: { setConfirmDialogOpen: (value: boolean) => void }) {\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [UsernameOrEmail, setUserInput] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isAccountDeleted, setAccountDeleted] = useState(false);\n  const [isPasswordCorrect, setPasswordCorrect] = useState(true);\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  const { session, refresh } = useSession();\n\n  const router = useRouter();\n\n  const wait = (s: number) => {\n    return new Promise(resolve => setTimeout(resolve, s * 1000));\n  };\n\n  const clearForm = () => {\n    setUserInput(\"\");\n    setPassword(\"\");\n  }\n  \n  const handleLogin = async (e: React.FormEvent) => {\n    setLoading(true);\n    e.preventDefault();\n    const formData = new FormData();\n\n    if (UsernameOrEmail.includes(\"@\")) {\n      formData.append(\"email\", UsernameOrEmail);\n    } else {\n      formData.append(\"username\", UsernameOrEmail);\n    }\n\n    formData.append(\"password\", password);\n\n    try {\n      const result = await deleteAccount(formData);\n      setLoading(false);\n      if (result.data.isSuccess) {\n        setPasswordCorrect(true);\n        setAccountDeleted(true);\n        logout();\n        await wait(5);\n        router.replace(\"/login\");\n        await refresh();\n      } else {\n        setPasswordCorrect(false);\n        setPassword(\"\");\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n      }\n    } catch { }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserInput(e.target.value);\n    if ((e.target.value === session.username || e.target.value === session.email) && password) {\n      setIsSubmitDisabled(false)\n    } else {\n      setIsSubmitDisabled(true)\n    }\n  };\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    if (e.target.value && (UsernameOrEmail === session.username || UsernameOrEmail === session.email)) {\n      setIsSubmitDisabled(false)\n    } else {\n      setIsSubmitDisabled(true)\n    }\n  };\n\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-gray-500/20 flex justify-center items-center z-50\">\n      <div\n        className=\"fixed inset-0\"\n        onClick={(): void => {\n          setConfirmDialogOpen(false);\n          clearForm();\n        }}\n      >\n      </div>\n      <form className={`card w-fit min-w-sm lg:min-w-lg max-w-xl bg-base-100 shadow-xl`} onSubmit={handleLogin}>\n        <div className={`card-body gap-4\"`}>\n\n          <h1 className=\"card-title text-center text-bg\">{isAccountDeleted? 'Your Account has been deleted':'Delete Your Account'}</h1>\n\n          <div role=\"alert\" className={`alert alert-error alert-soft`}>\n            <FontAwesomeIcon icon={faTriangleExclamation} className=\"text-2xl\" />\n            <span className=\"label-text text-base-content text-red-500 font-bold\"> You CANNOT undo this operation. </span>\n          </div>\n\n          <div className=\"card-body p-0 gap-4\">\n            <p className=\"text-base-content\">\n              We will immediately delete your account, meaning that you cannot use FlowChat services with this account afterward.\n            </p>\n            <p className=\"text-base-content\">\n              However, all your posts, comments, chat records and user profile will still be anonymously visible to other users.\n            </p>\n            <p className={`text-base-content ${isAccountDeleted? 'hidden':''}`}>\n              Please input your login information to confirm to delete your account.\n            </p>\n          </div>\n\n          <div className=\"divider my-0\"></div>\n\n          <div className={`form-control ${isAccountDeleted? 'hidden':''}`}>\n            <label className=\"label\">\n              <span className=\"label-text text-base-content\">Username / Email</span>\n            </label>\n            <input\n              type=\"input\"\n              placeholder=\"Username or email\"\n              value={UsernameOrEmail}\n              onChange={handleInputChange}\n              className=\"input input-bordered w-full my-1\"\n            />\n          </div>\n\n          <div className={`form-control ${isAccountDeleted? 'hidden':''}`}>\n            <label className=\"label\">\n              <span className={`label-text text-base-content ${isPasswordCorrect? '' : 'text-red-500 font-bold'}`}>Password</span>\n            </label>\n            \n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={handlePasswordChange}\n              className=\"input input-bordered w-full my-1\"\n            />\n\n            {isPasswordCorrect? '' : \n            <label className=\"label\">\n              <span className=\"label-text text-base-content text-sm text-red-500 font-bold\">** Password is incorrect</span>\n            </label>\n            }\n            \n          </div>\n\n          <div className={`form-control ${isAccountDeleted? 'hidden' : ''}`}>\n            <button\n              type=\"submit\"\n              className=\"btn btn-error w-full\"\n              disabled={isSubmitDisabled}\n            >\n              {loading ? <span className=\"loading loading-dots loading-md bg-base-content\"></span> : \"Delete Account\"}\n            </button>\n          </div>\n\n          <div className={`form-control mt-2 ${isAccountDeleted? 'hidden' : ''}`}>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary w-full bg-base-300 text-base-content border-none\"\n              onClick={(): void => {\n                setConfirmDialogOpen(false);\n                clearForm();\n              }}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/settings/DeleteAccountSection.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport ConfirmDialog from \"@/components/settings/ConfirmDeleteAccountDialog\"\n\nexport default function DeleteAccount() {\n\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState<boolean>(false);\n\n  return (\n    <div className=\"card-body p-0 gap-2\">\n      <div className=\"flex gap-4 items-center\">\n        <div className=\"card-body p-0 gap-2\">\n          <h3 className=\"text-xl text-red-500 font-bold\">Delete Account</h3>\n          <p className=\"text-base-content/70\">Once you delete your account, you cannot retrieve it. Please be certain.</p>\n        </div>\n        <div>\n          <button\n            className=\"btn btn-error\"\n            onClick={(): void => {\n              setConfirmDialogOpen(true);\n            }}>\n            Delete Account\n          </button>\n          <div className={isConfirmDialogOpen ? \"\" : \"hidden\"}>\n            <ConfirmDialog setConfirmDialogOpen={setConfirmDialogOpen}/>\n          </div>\n        </div>\n      </div>\n      <div className=\"divider my-0\"></div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAKe,SAAS;IAEtB,MAAM,CAAC,qBAAqB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAEtE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAG,WAAU;0CAAiC;;;;;;0CAC/C,8OAAC;gCAAE,WAAU;0CAAuB;;;;;;;;;;;;kCAEtC,8OAAC;;0CACC,8OAAC;gCACC,WAAU;gCACV,SAAS;oCACP,qBAAqB;gCACvB;0CAAG;;;;;;0CAGL,8OAAC;gCAAI,WAAW,sBAAsB,KAAK;0CACzC,cAAA,8OAAC,4JAAA,CAAA,UAAa;oCAAC,sBAAsB;;;;;;;;;;;;;;;;;;;;;;;0BAI3C,8OAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB","debugId":null}}]
}