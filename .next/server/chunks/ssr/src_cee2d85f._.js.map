{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/profiles/UserStat.tsx"],"sourcesContent":["\"use client\";\n\nexport default function UserStat({\n  data = 0,\n  type = \"following\" }:\n  {\n    data?: number\n    type?: \"following\" | \"follower\" | \"like\"\n  }) {\n\n  const titleType = {\n    following: \"Followings\",\n    follower: \"Followers\",\n    like: \"Likes\",\n  };\n\n  const title = titleType[type];\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      <h1 className=\"text-xl\">\n        {Intl.NumberFormat(\"en\", {\n          notation: \"compact\",\n        }).format(data)}\n      </h1>\n      <h1 className=\"text-xl text-base-content/70\">\n        {title}\n      </h1>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEe,SAAS,SAAS,EAC/B,OAAO,CAAC,EACR,OAAO,WAAW,EAIjB;IAED,MAAM,YAAY;QAChB,WAAW;QACX,UAAU;QACV,MAAM;IACR;IAEA,MAAM,QAAQ,SAAS,CAAC,KAAK;IAE7B,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BACX,KAAK,YAAY,CAAC,MAAM;oBACvB,UAAU;gBACZ,GAAG,MAAM,CAAC;;;;;;0BAEZ,8OAAC;gBAAG,WAAU;0BACX;;;;;;;;;;;;AAIT","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/profiles.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\nexport interface Profile {\n  userId: string;\n  username: string;\n  description: string;\n  avatar: string | null;\n  updatedAt: string;\n  postCount: number;\n  commentCount: number;\n  followingCount: number;\n  followerCount: number;\n  likeCount: number;\n  dislikeCount: number;\n  isUserBlocked: boolean;\n  isUserFollowed: boolean;\n}\n\ninterface ProfileContentResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    profile: Profile;\n  };\n}\n\nexport async function getProfileContent(userIdTo : string): Promise<Profile | null> {\n  try {\n    const session = await getSession();\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Profile/getProfileContent?userIdFrom=${session.userId}`;\n\n    if (userIdTo === \"0\") {\n      apiUrl += `&userIdTo=${session.userId}`;\n    } else {\n      apiUrl += `&userIdTo=${userIdTo}`;\n    }\n    \n    const response = await fetch(apiUrl, {\n      headers: {\n        method: \"GET\",\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network Error\");\n    }\n\n    const data: ProfileContentResponse = await response.json();\n    if (!data.data.isSuccess) {\n      throw new Error(\"Server does not respond successfully\");\n    }\n\n    return data.data.profile;\n\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error);\n    return null;\n  }\n}\n\nexport async function updateProfile(username: string, description: string): Promise<void> {\n  try {\n    const session = await getSession();\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Profile/updatePersonalProfile`;\n\n    const requestBody = {\n      userId: session.userId,\n      username: username,\n      description: description,\n    };\n\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n    \n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network Error\");\n    }\n\n    const data: ProfileContentResponse = await response.json();\n    if (!data.data.isSuccess) {\n      throw new Error(\"Server does not respond successfully\");\n    }\n\n  } catch (error) {\n    console.error(\"Error in updating user profile:\", error);\n  }\n}\n\nexport async function userInteract(userIdTo : string, \n  interaction : \"follow\" | \"unfollow\" | \"block\" | \"unblock\"\n): Promise<boolean | null> {\n  try {\n    const isRemoveAction = interaction === \"unfollow\" || interaction === \"unblock\";\n    const session = await getSession();\n\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Profile/${interaction}User`;\n    \n    const response = await fetch(apiUrl, {\n      method: isRemoveAction ? \"DELETE\" : \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: JSON.stringify({\n        userIdFrom: session.userId,\n        userIdTo: userIdTo,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network Error\");\n    }\n\n    const data = await response.json();\n    if (!data.data.isSuccess) {\n      throw new Error(\"Server does not respond successfully\");\n    }\n\n    return data.data.isSuccess;\n\n  } catch (error) {\n    console.error(`Error in ${interaction} interaction api call:`, error);\n    return null;\n  }\n}"],"names":[],"mappings":";;;;;;IA+DsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/profiles.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\nexport interface Profile {\n  userId: string;\n  username: string;\n  description: string;\n  avatar: string | null;\n  updatedAt: string;\n  postCount: number;\n  commentCount: number;\n  followingCount: number;\n  followerCount: number;\n  likeCount: number;\n  dislikeCount: number;\n  isUserBlocked: boolean;\n  isUserFollowed: boolean;\n}\n\ninterface ProfileContentResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    profile: Profile;\n  };\n}\n\nexport async function getProfileContent(userIdTo : string): Promise<Profile | null> {\n  try {\n    const session = await getSession();\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Profile/getProfileContent?userIdFrom=${session.userId}`;\n\n    if (userIdTo === \"0\") {\n      apiUrl += `&userIdTo=${session.userId}`;\n    } else {\n      apiUrl += `&userIdTo=${userIdTo}`;\n    }\n    \n    const response = await fetch(apiUrl, {\n      headers: {\n        method: \"GET\",\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network Error\");\n    }\n\n    const data: ProfileContentResponse = await response.json();\n    if (!data.data.isSuccess) {\n      throw new Error(\"Server does not respond successfully\");\n    }\n\n    return data.data.profile;\n\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error);\n    return null;\n  }\n}\n\nexport async function updateProfile(username: string, description: string): Promise<void> {\n  try {\n    const session = await getSession();\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Profile/updatePersonalProfile`;\n\n    const requestBody = {\n      userId: session.userId,\n      username: username,\n      description: description,\n    };\n\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n    \n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network Error\");\n    }\n\n    const data: ProfileContentResponse = await response.json();\n    if (!data.data.isSuccess) {\n      throw new Error(\"Server does not respond successfully\");\n    }\n\n  } catch (error) {\n    console.error(\"Error in updating user profile:\", error);\n  }\n}\n\nexport async function userInteract(userIdTo : string, \n  interaction : \"follow\" | \"unfollow\" | \"block\" | \"unblock\"\n): Promise<boolean | null> {\n  try {\n    const isRemoveAction = interaction === \"unfollow\" || interaction === \"unblock\";\n    const session = await getSession();\n\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Profile/${interaction}User`;\n    \n    const response = await fetch(apiUrl, {\n      method: isRemoveAction ? \"DELETE\" : \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: JSON.stringify({\n        userIdFrom: session.userId,\n        userIdTo: userIdTo,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Network Error\");\n    }\n\n    const data = await response.json();\n    if (!data.data.isSuccess) {\n      throw new Error(\"Server does not respond successfully\");\n    }\n\n    return data.data.isSuccess;\n\n  } catch (error) {\n    console.error(`Error in ${interaction} interaction api call:`, error);\n    return null;\n  }\n}"],"names":[],"mappings":";;;;;;IAoGsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/profiles/EditableBox.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nexport default function EditableBox({ initialText, onSave }: { initialText: string, onSave: (text: string) => void }) {\n    const [text, setText] = useState(initialText);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setText(e.target.value);\n        onSave(e.target.value);\n    };\n\n    useEffect(() => {\n        if (textareaRef.current) {\n            textareaRef.current.style.height = 'auto';\n            textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        }\n    }, [text]);\n\n    return (\n        <textarea\n            className=\"w-full p-2 rounded border\"\n            value={text}\n            ref={textareaRef}\n            wrap=\"soft\"\n            rows={1}\n            onChange={handleChange}\n            autoFocus\n        />\n    );\n};"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS,YAAY,EAAE,WAAW,EAAE,MAAM,EAA2D;IAChH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAuB;IAEhD,MAAM,eAAe,CAAC;QAClB,QAAQ,EAAE,MAAM,CAAC,KAAK;QACtB,OAAO,EAAE,MAAM,CAAC,KAAK;IACzB;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,YAAY,OAAO,EAAE;YACrB,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG;YACnC,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,YAAY,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;QAC9E;IACJ,GAAG;QAAC;KAAK;IAET,qBACI,8OAAC;QACG,WAAU;QACV,OAAO;QACP,KAAK;QACL,MAAK;QACL,MAAM;QACN,UAAU;QACV,SAAS;;;;;;AAGrB","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/profiles/UserSection.tsx"],"sourcesContent":["\"use client\";\n\nimport UserAvatar from \"@/components/users/UserAvatar\";\nimport UserStat from \"./UserStat\";\nimport { Profile, updateProfile, userInteract } from \"@/utils/profiles\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCommenting, faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport { faBan, faCheck, faEllipsis, faPenToSquare, faTimes, faXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport { useSession } from \"@/hooks/useSession\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport EditableBox from \"./EditableBox\";\n\nexport default function UserInfo({ profile }: { profile: Profile }) {\n\n  const router = useRouter();\n  const { session } = useSession();\n  const [isDropdownMenuOpen, setIsDropdownMenuOpen] = useState(true);\n  const [userFollowed, setUserFollowed] = useState(profile.isUserFollowed);\n  const [userBlocked, setUserBlocked] = useState(profile.isUserBlocked);\n  const [isEditing, setIsEditing] = useState(false);\n  const [username, setUsername] = useState(profile.username);\n  const [userDescription, setUserDescription] = useState(profile.description);\n  const [usernameFormData, setUsernameFormData] = useState(profile.username);\n  const [userDescriptionFormData, setUserDescriptionFormData] = useState(profile.description);\n  const [userAvatarFormData, setUserAvatarFormData] = useState(profile.avatar);\n  const isMe = session.username === profile.username;\n\n  const editProfile = async () => {\n    setIsEditing(false);\n    setUsernameFormData(username);\n    setUserDescriptionFormData(userDescription);\n    await updateProfile(usernameFormData, userDescriptionFormData);\n  };\n\n  const handleFollow = () => {\n    if (userFollowed) {\n      setUserFollowed(false);\n      userInteract(profile.userId, \"unfollow\");\n    } else {\n      setUserFollowed(true);\n      userInteract(profile.userId, \"follow\");\n    }\n  };\n\n  const handleBlock = () => {\n    if (userBlocked) {\n      setUserBlocked(false);\n      userInteract(profile.userId, \"unblock\");\n    } else {\n      setUserBlocked(true);\n      userInteract(profile.userId, \"block\");\n    }\n  };\n\n  const handleMessage = () => {\n    router.push(`/messages`);\n  };\n\n  const handleEdit = () => {\n    setIsDropdownMenuOpen(false);\n    setIsEditing(true);\n    setIsDropdownMenuOpen(true);\n  };\n\n  return (\n    <div className=\"card lg:min-w-lg gap-0 bg-base-100 shadow-md p-2\">\n      <div className=\"flex gap-6\">\n        <div className=\"flex items-center gap-6 p-4 w-full\">\n          {/* User avatar */}\n          <div className=\"avatar avatar-placeholder items-center gap-1\">\n            <UserAvatar src={profile.avatar!} size=\"xxl\" />\n          </div>\n\n          {/* Username */}\n          <div className=\" w-full break-words\">\n            <h3 className=\"text-2xl font-bold\">\n              {isEditing ? (\n                <EditableBox initialText={usernameFormData} onSave={(newText: string) => { setUsername(newText); }} />\n              ) : (\n                <div className=\"w-full break-words\">{usernameFormData}</div>\n              )}\n            </h3>\n          </div>\n        </div>\n\n        <div>\n          <div className=\"flex gap-6 flex justify-end\">\n\n            {/* Show follow only if user is NOT me */}\n            {!isMe && (\n              <button className={`btn btn-sm ${userFollowed ? \"btn-error\" : \"btn-primary\"}`} onClick={handleFollow}>\n                {userFollowed ?\n                  <><FontAwesomeIcon icon={faTimes} size=\"lg\" /><span>Unfollow</span></> :\n                  <><FontAwesomeIcon icon={faHeart} size=\"lg\" /><span>Follow</span></>}\n              </button>\n            )}\n\n            {/* Show message button only if user is NOT me */}\n            {!isMe && (\n              <button className=\"btn btn-sm\" onClick={handleMessage}>\n                <FontAwesomeIcon icon={faCommenting} size=\"lg\" />\n                Message\n              </button>\n            )}\n\n            {/* Edit confirm buttons */}\n            <div className=\"flex justify-end gap-6 p-1 w-full\" hidden={!isEditing}>\n              <button onClick={() => { setIsEditing(false); }}>\n                <FontAwesomeIcon icon={faXmark} size=\"lg\" />\n              </button>\n              <button onClick={() => {editProfile(); }}>\n                <FontAwesomeIcon icon={faCheck} size=\"lg\" />\n              </button>\n            </div>\n\n            {/* Options menu */}\n            <div className=\"dropdown dropdown-end\" hidden={isEditing}>\n              <div tabIndex={0} role=\"button\" className={`btn btn-ghost btn-circle btn-sm`}>\n                <FontAwesomeIcon icon={faEllipsis} size=\"xl\" />\n              </div>\n              <ul tabIndex={0} className=\"dropdown-content menu bg-base-100 rounded-box z-10 shadow-lg\">\n                {/* Show edit only if user is me */}\n                {isMe && isDropdownMenuOpen && (\n                  <>\n                    <li className=\"w-full\">\n                      <a onClick={handleEdit}>\n                        <FontAwesomeIcon icon={faPenToSquare} />\n                        <span>Edit</span>\n                      </a>\n                    </li>\n                  </>\n                )}\n\n                {/* Show block only if user is NOT me */}\n                {!isMe && (\n                  <li>\n                    <a onClick={handleBlock}>\n                      {userBlocked ?\n                        <><FontAwesomeIcon icon={faTimes} /><span>Unblock</span></> :\n                        <><FontAwesomeIcon icon={faBan} /><span>Block</span></>}\n                    </a>\n                  </li>\n                )}\n\n              </ul>\n            </div>\n          </div>\n\n          {/* User Stat */}\n          <div className=\"flex justify-center gap-10 w-full p-4\">\n            <UserStat data={profile.followingCount} type={\"following\"} />\n            <UserStat data={profile.followerCount} type={\"follower\"} />\n            <UserStat data={profile.likeCount - profile.dislikeCount} type={\"like\"} />\n          </div>\n\n        </div>\n\n      </div>\n\n      <div className=\"flex items-center gap-6 p-4\">\n        <h3 className=\"text-md text-base-content/70 w-full\">\n          {isEditing ? (\n            <EditableBox initialText={userDescriptionFormData} onSave={(newText: string) => { setUserDescription(newText); }} />\n          ) : (\n            <div className=\"w-full break-words\">{userDescriptionFormData}</div>\n          )}\n        </h3>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostFooter.tsx"],"sourcesContent":["\"use client\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faShare } from \"@fortawesome/free-solid-svg-icons\";\nimport { faThumbsDown, faThumbsUp, faComment } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faThumbsDown as faThumbsDownSolid,\n  faThumbsUp as faThumbsUpSolid,\n  faLink,\n  faShareNodes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { MouseEvent, useState } from \"react\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { useSession } from \"@/hooks/useSession\";\n\nexport default function PostFooter({\n  postId,\n  postLikeCount,\n  postDislikeCount,\n  postCommentCount,\n  postIsLiked,\n  postIsDisliked,\n}: {\n  postId: string;\n  postLikeCount: number;\n  postDislikeCount: number;\n  postCommentCount: number;\n  postIsLiked: boolean;\n  postIsDisliked: boolean;\n}) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const { session } = useSession();\n\n  const [userLiked, setUserLiked] = useState(postIsLiked);\n  const [userDisliked, setUserDisliked] = useState(postIsDisliked);\n  const [likeCount, setLikeCount] = useState(postLikeCount);\n  const [dislikeCount, setDislikeCount] = useState(postDislikeCount);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n\n  // Function to make API call for like/dislike\n  const updateLikeStatus = async (action: \"like\" | \"dislike\" | \"unlike\" | \"undislike\") => {\n    const setLoadingState = !isLoading; // avoid double toggling of loading state\n    if (setLoadingState) setIsLoading(true);\n\n    try {\n      const isRemoveAction = action === \"unlike\" || action === \"undislike\";\n      const url = isRemoveAction ? \"/api/Forum/unlikeOrUndislike\" : \"/api/Forum/likeOrDislike\";\n\n      const response = await fetch(url, {\n        method: isRemoveAction ? \"DELETE\" : \"POST\",\n        body: JSON.stringify({\n          postId: parseInt(postId),\n          userId: session.userId,\n          action: action,\n        }),\n      });\n\n      if (!response.ok) {\n        console.error(\"Failed to update like status:\", await response.text());\n        setIsLoading(false);\n        return;\n      }\n\n      const data = await response.json();\n      if (data.data.isSuccess) {\n        if (action === \"like\") {\n          setUserLiked(true);\n          setLikeCount((prev) => prev + 1);\n        } else if (action === \"dislike\") {\n          setUserDisliked(true);\n          setDislikeCount((prev) => prev + 1);\n        } else if (action === \"unlike\") {\n          setUserLiked(false);\n          setLikeCount((prev) => prev - 1);\n        } else if (action === \"undislike\") {\n          setUserDisliked(false);\n          setDislikeCount((prev) => prev - 1);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating like status:\", error);\n    } finally {\n      if (setLoadingState) setIsLoading(false);\n    }\n  };\n\n  const handleLike = async (e: MouseEvent) => {\n    e.stopPropagation();\n    if (isLoading) return;\n\n    // If already liked, just unlike\n    if (userLiked) {\n      updateLikeStatus(\"unlike\");\n    }\n    // If currently disliked, need to undislike first then like\n    else if (userDisliked) {\n      setIsLoading(true);\n      try {\n        // First remove the dislike\n        await updateLikeStatus(\"undislike\");\n        // Then add the like\n        await updateLikeStatus(\"like\");\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    // Not liked or disliked, just like\n    else {\n      updateLikeStatus(\"like\");\n    }\n  };\n\n  const handleDislike = async (e: MouseEvent) => {\n    e.stopPropagation();\n    if (isLoading) return;\n\n    // If already disliked, just undislike\n    if (userDisliked) {\n      updateLikeStatus(\"undislike\");\n    }\n    // If currently liked, need to unlike first then dislike\n    else if (userLiked) {\n      setIsLoading(true);\n      try {\n        // First remove the like\n        await updateLikeStatus(\"unlike\");\n        // Then add the dislike\n        await updateLikeStatus(\"dislike\");\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    // Not liked or disliked, just dislike\n    else {\n      updateLikeStatus(\"dislike\");\n    }\n  };\n\n  const handleComment = (e: MouseEvent) => {\n    e.stopPropagation();\n    if (pathname.includes(`/forum/post/${postId}`)) {\n      // Scroll to comments section if already on the post page\n      document.getElementById(\"comments\")?.scrollIntoView({ behavior: \"smooth\" });\n    } else {\n      router.push(`/forum/post/${postId}#comments`);\n    }\n  };\n\n  const handleLinkCopy = async (e: MouseEvent) => {\n    e.stopPropagation();\n\n    try {\n      await navigator.clipboard.writeText(`${window.location.origin}/forum/post/${postId}`);\n      setShowToast(true);\n\n      // Hide toast after 3 seconds\n      setTimeout(() => {\n        setShowToast(false);\n      }, 3000);\n    } catch (err) {\n      console.error(\"Failed to copy text: \", err);\n    }\n  };\n\n  const handleShare = async (e: MouseEvent) => {\n    e.stopPropagation();\n\n    // Check if Web Share API is available\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          url: `${window.location.origin}/forum/post/${postId}`,\n        });\n      } catch (err) {\n        console.error(\"Error sharing: \", err);\n      }\n    } else {\n      // Fallback to copy if share API is not available\n      handleLinkCopy(e);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      {/* Toast notification */}\n      {showToast && (\n        <div className=\"toast toast-center\">\n          <div className=\"alert alert-success\">\n            <span>Link copied to clipboard!</span>\n          </div>\n        </div>\n      )}\n\n      {/* Like, dislike */}\n      <div className=\"bg-base-200 rounded-xl\">\n        <button className=\"btn btn-sm\" onClick={handleLike} disabled={isLoading}>\n          <FontAwesomeIcon icon={userLiked ? faThumbsUpSolid : faThumbsUp} size=\"lg\" />\n        </button>\n        <span className=\"text-xs cursor-default\">\n          {Intl.NumberFormat(\"en\", {\n            notation: \"compact\",\n          }).format(likeCount - dislikeCount)}\n        </span>\n        <button className=\"btn btn-sm\" onClick={handleDislike} disabled={isLoading}>\n          <FontAwesomeIcon icon={userDisliked ? faThumbsDownSolid : faThumbsDown} size=\"lg\" />\n        </button>\n      </div>\n\n      {/* Comments */}\n      <button className=\"btn btn-sm\" onClick={handleComment}>\n        <FontAwesomeIcon icon={faComment} size=\"lg\" />\n        {Intl.NumberFormat(\"en\", {\n          notation: \"compact\",\n        }).format(postCommentCount)}\n      </button>\n\n      {/* Share */}\n      <div className=\"dropdown dropdown-start\">\n        <div tabIndex={0} role=\"button\" className=\"btn btn-sm\">\n          <FontAwesomeIcon icon={faShare} size=\"lg\" />\n          Share\n        </div>\n        <ul tabIndex={0} className=\"dropdown-content menu bg-base-100 rounded-box shadow w-35\">\n          <li>\n            <button onClick={handleLinkCopy}>\n              <FontAwesomeIcon icon={faLink} />\n              Copy link\n            </button>\n          </li>\n          <li>\n            <button onClick={handleShare}>\n              <FontAwesomeIcon icon={faShareNodes} />\n              Share via...\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 927, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/navigation/PostLink.tsx"],"sourcesContent":["\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { ReactNode, MouseEvent } from \"react\";\n\nexport default function PostLink({\n  children,\n  href,\n  className = \"\",\n  isBlocked = false,\n}: {\n  children: ReactNode;\n  href: string;\n  className?: string;\n  isBlocked?: boolean;\n}) {\n  const router = useRouter();\n\n  const handleClick = (e: MouseEvent) => {\n    // Don't navigate if clicking on interactive elements\n    const target = e.target as HTMLElement;\n\n    // Check if the target or its parent is an interactive element\n    if (\n      target.closest(\"a\") ||\n      target.closest(\"button\") ||\n      target.closest(\"[role='button']\") ||\n      target.closest(\".dropdown\") ||\n      target.closest(\".interactive-element\")\n    ) {\n      e.stopPropagation();\n      return;\n    }\n\n    router.push(href);\n  };\n\n  return (\n    <div onClick={isBlocked ? undefined : handleClick} className={`relative ${className}`}>\n      {isBlocked && (\n        <div role=\"alert\" className=\"alert w-fit absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-10\">\n          You have blocked this user\n        </div>\n      )}\n      <div className={isBlocked ? \"pointer-events-none blur-2xl\" : \"cursor-pointer\"}>{children}</div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAKe,SAAS,SAAS,EAC/B,QAAQ,EACR,IAAI,EACJ,YAAY,EAAE,EACd,YAAY,KAAK,EAMlB;IACC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,cAAc,CAAC;QACnB,qDAAqD;QACrD,MAAM,SAAS,EAAE,MAAM;QAEvB,8DAA8D;QAC9D,IACE,OAAO,OAAO,CAAC,QACf,OAAO,OAAO,CAAC,aACf,OAAO,OAAO,CAAC,sBACf,OAAO,OAAO,CAAC,gBACf,OAAO,OAAO,CAAC,yBACf;YACA,EAAE,eAAe;YACjB;QACF;QAEA,OAAO,IAAI,CAAC;IACd;IAEA,qBACE,8OAAC;QAAI,SAAS,YAAY,YAAY;QAAa,WAAW,CAAC,SAAS,EAAE,WAAW;;YAClF,2BACC,8OAAC;gBAAI,MAAK;gBAAQ,WAAU;0BAA+E;;;;;;0BAI7G,8OAAC;gBAAI,WAAW,YAAY,iCAAiC;0BAAmB;;;;;;;;;;;;AAGtF","debugId":null}},
    {"offset": {"line": 981, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostHeader.tsx"],"sourcesContent":["\"use client\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEllipsis, faPenToSquare, faFlag, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\nimport { MouseEvent } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport moment from \"moment\";\nimport Link from \"next/link\";\nimport { useSession } from \"@/hooks/useSession\";\nimport UserAvatar from \"@/components/users/UserAvatar\";\n\nexport default function PostHeader({\n  postId,\n  postUserId,\n  postUsername,\n  postUpdatedAt,\n  postUserAvatar,\n  size = \"sm\",\n}: {\n  postId: string;\n  postUserId: string;\n  postUsername: string;\n  postUpdatedAt: string;\n  postUserAvatar: string | null;\n  size?: \"sm\" | \"md\";\n}) {\n  const router = useRouter();\n  const { session } = useSession();\n\n  // Check if the current user is the author of the post\n  const isAuthor = session.username === postUsername;\n\n  const handleEdit = (e: MouseEvent) => {\n    e.stopPropagation();\n    router.push(`/forum/post/${postId}/edit`);\n  };\n\n  const handleDelete = async (e: MouseEvent) => {\n    e.stopPropagation();\n    alert(\"Delete to be implemented\");\n  };\n\n  const handleReport = (e: MouseEvent) => {\n    e.stopPropagation();\n    alert(\"Report to be implemented\");\n  };\n\n  const textSize = size === \"md\" ? \"text-sm\" : \"text-xs\";\n\n  return (\n    <div className=\"flex justify-between items-center my-1\">\n      {/** Avatar, username, time */}\n      <div className=\"flex\">\n        {/** Avatar and username */}\n        <Link href={`/profile/${postUserId}`}>\n          <UserAvatar src={postUserAvatar} username={postUsername} size={size} />\n        </Link>\n        {/** Time */}\n        <div className=\"flex items-center mx-0.5 gap-0.5\">\n          <span className={`${textSize} font-thin`}>•</span>\n          <span className={`${textSize} font-light`}>{moment(postUpdatedAt).fromNow()}</span>\n        </div>\n      </div>\n      <div className=\"flex gap-1\">\n        {/* Options menu */}\n        <div className=\"dropdown dropdown-end\">\n          <div tabIndex={0} role=\"button\" className={`btn btn-ghost btn-circle btn-${size}`}>\n            <FontAwesomeIcon icon={faEllipsis} size=\"xl\" />\n          </div>\n          <ul tabIndex={0} className=\"dropdown-content menu bg-base-100 rounded-box z-10 shadow-lg w-26\">\n            {/* Show edit/delete only if user is author */}\n            {isAuthor && (\n              <>\n                <li className=\"w-full\">\n                  <a onClick={handleEdit}>\n                    <FontAwesomeIcon icon={faPenToSquare} />\n                    <span>Edit</span>\n                  </a>\n                </li>\n                <li className=\"w-full\">\n                  <a onClick={handleDelete}>\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                    <span>Delete</span>\n                  </a>\n                </li>\n              </>\n            )}\n\n            {/* Show report only if user is NOT author */}\n            {!isAuthor && (\n              <li>\n                <a onClick={handleReport}>\n                  <FontAwesomeIcon icon={faFlag} />\n                  <span>Report</span>\n                </a>\n              </li>\n            )}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;AAYe,SAAS,WAAW,EACjC,MAAM,EACN,UAAU,EACV,YAAY,EACZ,aAAa,EACb,cAAc,EACd,OAAO,IAAI,EAQZ;IACC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD;IAE7B,sDAAsD;IACtD,MAAM,WAAW,QAAQ,QAAQ,KAAK;IAEtC,MAAM,aAAa,CAAC;QAClB,EAAE,eAAe;QACjB,OAAO,IAAI,CAAC,CAAC,YAAY,EAAE,OAAO,KAAK,CAAC;IAC1C;IAEA,MAAM,eAAe,OAAO;QAC1B,EAAE,eAAe;QACjB,MAAM;IACR;IAEA,MAAM,eAAe,CAAC;QACpB,EAAE,eAAe;QACjB,MAAM;IACR;IAEA,MAAM,WAAW,SAAS,OAAO,YAAY;IAE7C,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAM,CAAC,SAAS,EAAE,YAAY;kCAClC,cAAA,8OAAC,yIAAA,CAAA,UAAU;4BAAC,KAAK;4BAAgB,UAAU;4BAAc,MAAM;;;;;;;;;;;kCAGjE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAW,GAAG,SAAS,UAAU,CAAC;0CAAE;;;;;;0CAC1C,8OAAC;gCAAK,WAAW,GAAG,SAAS,WAAW,CAAC;0CAAG,CAAA,GAAA,gIAAA,CAAA,UAAM,AAAD,EAAE,eAAe,OAAO;;;;;;;;;;;;;;;;;;0BAG7E,8OAAC;gBAAI,WAAU;0BAEb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,UAAU;4BAAG,MAAK;4BAAS,WAAW,CAAC,6BAA6B,EAAE,MAAM;sCAC/E,cAAA,8OAAC,oKAAA,CAAA,kBAAe;gCAAC,MAAM,wKAAA,CAAA,aAAU;gCAAE,MAAK;;;;;;;;;;;sCAE1C,8OAAC;4BAAG,UAAU;4BAAG,WAAU;;gCAExB,0BACC;;sDACE,8OAAC;4CAAG,WAAU;sDACZ,cAAA,8OAAC;gDAAE,SAAS;;kEACV,8OAAC,oKAAA,CAAA,kBAAe;wDAAC,MAAM,wKAAA,CAAA,gBAAa;;;;;;kEACpC,8OAAC;kEAAK;;;;;;;;;;;;;;;;;sDAGV,8OAAC;4CAAG,WAAU;sDACZ,cAAA,8OAAC;gDAAE,SAAS;;kEACV,8OAAC,oKAAA,CAAA,kBAAe;wDAAC,MAAM,0KAAA,CAAA,aAAU;;;;;;kEACjC,8OAAC;kEAAK;;;;;;;;;;;;;;;;;;;gCAOb,CAAC,0BACA,8OAAC;8CACC,cAAA,8OAAC;wCAAE,SAAS;;0DACV,8OAAC,oKAAA,CAAA,kBAAe;gDAAC,MAAM,wKAAA,CAAA,SAAM;;;;;;0DAC7B,8OAAC;0DAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASxB","debugId":null}},
    {"offset": {"line": 1223, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/LoadingImage.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport Image from \"next/image\";\nimport { getProxyImageUrl } from \"@/utils/images\";\n\nexport default function LoadingImage({\n  src,\n  alt = \"\",\n  className = \"\",\n  priority = true,\n}: {\n  src: string;\n  alt?: string;\n  className?: string;\n  priority?: boolean;\n}) {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const imageUrl = getProxyImageUrl(src);\n\n  return (\n    <div className=\"relative w-full overflow-hidden rounded-xl bg-base-300\">\n      {/* Blurred background image */}\n      <div className=\"absolute inset-0 w-full h-full opacity-60\">\n        <Image\n          src={imageUrl}\n          alt=\"Blurred background\"\n          className=\"object-cover blur-3xl w-full h-full\"\n          width={500}\n          height={500}\n          priority={priority}\n        />\n      </div>\n      {/* Main image */}\n      <div className=\"relative w-full h-full items-center justify-center\">\n        <div className=\"relative\">\n          {/* Skeleton */}\n          {isLoading && <div className={`skeleton w-full h-full absolute inset-0 ${className}`}></div>}\n\n          {/* Actual image */}\n          <Image\n            src={imageUrl}\n            alt={alt}\n            className={`w-full h-full ${className} ${\n              isLoading ? \"opacity-0\" : \"opacity-100\"\n            } transition-opacity duration-300`}\n            onLoad={() => setIsLoading(false)}\n            width={500}\n            height={500}\n            priority={priority}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,aAAa,EACnC,GAAG,EACH,MAAM,EAAE,EACR,YAAY,EAAE,EACd,WAAW,IAAI,EAMhB;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,WAAW,CAAA,GAAA,sHAAA,CAAA,mBAAgB,AAAD,EAAE;IAElC,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;oBACJ,KAAK;oBACL,KAAI;oBACJ,WAAU;oBACV,OAAO;oBACP,QAAQ;oBACR,UAAU;;;;;;;;;;;0BAId,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;wBAEZ,2BAAa,8OAAC;4BAAI,WAAW,CAAC,wCAAwC,EAAE,WAAW;;;;;;sCAGpF,8OAAC,6HAAA,CAAA,UAAK;4BACJ,KAAK;4BACL,KAAK;4BACL,WAAW,CAAC,cAAc,EAAE,UAAU,CAAC,EACrC,YAAY,cAAc,cAC3B,gCAAgC,CAAC;4BAClC,QAAQ,IAAM,aAAa;4BAC3B,OAAO;4BACP,QAAQ;4BACR,UAAU;;;;;;;;;;;;;;;;;;;;;;;AAMtB","debugId":null}},
    {"offset": {"line": 1309, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostPreview.tsx"],"sourcesContent":["import PostFooter from \"@/components/posts/PostFooter\";\nimport PostLink from \"@/components/navigation/PostLink\";\nimport PostHeader from \"@/components/posts/PostHeader\";\nimport LoadingImage from \"./LoadingImage\";\nimport { Post } from \"@/utils/posts\";\n\nexport default function PostPreview({ post }: { post: Post }) {\n  return (\n    <PostLink href={`/forum/post/${post.postId}`} className=\"block\" isBlocked={post.isUserBlocked}>\n      <div className=\"card hover:bg-base-200/40 px-2\">\n        <div className=\"card-body p-0 gap-2\">\n          {/** Header, client-sided */}\n          <PostHeader\n            postId={post.postId}\n            postUserId={post.userId}\n            postUsername={post.username}\n            postUpdatedAt={post.updatedAt}\n            postUserAvatar={post.avatar}\n          />\n          {/** Body */}\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1 overflow-hidden\">\n              <h3 className=\"card-title text-lg font-bold line-clamp-2 break-words\">{post.title}</h3>\n              <p className=\"text-base-content text-md my-2 line-clamp-3 md:line-clamp-6 break-words\">{post.content}</p>\n            </div>\n            {/* Image on the right side, conditionally rendered */}\n            {post.imageAPIList && post.content.trim().length >= 50 && (\n              <div className=\"flex-none h-full w-24 sm:w-32 md:w-40 lg:w-48 xl:w-56 \">\n                <LoadingImage\n                  src={post.imageAPIList[0]}\n                  alt={post.title}\n                  className=\"object-cover rounded-lg max-h-32 md:max-h-36 lg:max-h-40\"\n                />\n              </div>\n            )}\n          </div>\n          {/* Show image below title for short description */}\n          {post.imageAPIList && post.content.trim().length < 50 && (\n            <div className=\"relative w-full overflow-hidden rounded-xl bg-base-300 \">\n              <LoadingImage\n                src={post.imageAPIList[0]}\n                alt={post.title}\n                className=\"object-contain rounded-md max-h-64 md:max-h-72 lg:max-h-80 mx-auto\"\n              />\n            </div>\n          )}\n          {/** Tags */}\n          {post.tagNameList && (\n            <div className=\"flex flex-wrap gap-1\">\n              {post.tagNameList.map((tag, index) => (\n                <div key={index} className=\"badge badge-sm badge-accent\">\n                  {tag.trim()}\n                </div>\n              ))}\n            </div>\n          )}\n          {/** Footer, client-sided */}\n          <PostFooter\n            postId={post.postId}\n            postLikeCount={post.likeCount}\n            postDislikeCount={post.dislikeCount}\n            postCommentCount={post.commentCount}\n            postIsLiked={post.isLiked}\n            postIsDisliked={post.isDisliked}\n          />\n        </div>\n      </div>\n    </PostLink>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAGe,SAAS,YAAY,EAAE,IAAI,EAAkB;IAC1D,qBACE,8OAAC,4IAAA,CAAA,UAAQ;QAAC,MAAM,CAAC,YAAY,EAAE,KAAK,MAAM,EAAE;QAAE,WAAU;QAAQ,WAAW,KAAK,aAAa;kBAC3F,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC,yIAAA,CAAA,UAAU;wBACT,QAAQ,KAAK,MAAM;wBACnB,YAAY,KAAK,MAAM;wBACvB,cAAc,KAAK,QAAQ;wBAC3B,eAAe,KAAK,SAAS;wBAC7B,gBAAgB,KAAK,MAAM;;;;;;kCAG7B,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDAAyD,KAAK,KAAK;;;;;;kDACjF,8OAAC;wCAAE,WAAU;kDAA2E,KAAK,OAAO;;;;;;;;;;;;4BAGrG,KAAK,YAAY,IAAI,KAAK,OAAO,CAAC,IAAI,GAAG,MAAM,IAAI,oBAClD,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,2IAAA,CAAA,UAAY;oCACX,KAAK,KAAK,YAAY,CAAC,EAAE;oCACzB,KAAK,KAAK,KAAK;oCACf,WAAU;;;;;;;;;;;;;;;;;oBAMjB,KAAK,YAAY,IAAI,KAAK,OAAO,CAAC,IAAI,GAAG,MAAM,GAAG,oBACjD,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,2IAAA,CAAA,UAAY;4BACX,KAAK,KAAK,YAAY,CAAC,EAAE;4BACzB,KAAK,KAAK,KAAK;4BACf,WAAU;;;;;;;;;;;oBAKf,KAAK,WAAW,kBACf,8OAAC;wBAAI,WAAU;kCACZ,KAAK,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,sBAC1B,8OAAC;gCAAgB,WAAU;0CACxB,IAAI,IAAI;+BADD;;;;;;;;;;kCAOhB,8OAAC,yIAAA,CAAA,UAAU;wBACT,QAAQ,KAAK,MAAM;wBACnB,eAAe,KAAK,SAAS;wBAC7B,kBAAkB,KAAK,YAAY;wBACnC,kBAAkB,KAAK,YAAY;wBACnC,aAAa,KAAK,OAAO;wBACzB,gBAAgB,KAAK,UAAU;;;;;;;;;;;;;;;;;;;;;;AAM3C","debugId":null}},
    {"offset": {"line": 1459, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/posts.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\nexport interface Post {\n  postId: string;\n  userId: string;\n  username: string;\n  avatar: string | null;\n  isUserBlocked: boolean;\n  title: string;\n  content: string;\n  imageAPIList: string[] | null;\n  tagNameList: string[] | null;\n  likeCount: number;\n  isLiked: boolean;\n  dislikeCount: number;\n  isDisliked: boolean;\n  commentCount: number;\n  updatedAt: string;\n  commentList: Post[] | null;\n}\n\n// API response type for getPost\ninterface PostPreviewResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    postPreviewList: Post[];\n  };\n}\n\ninterface PostContentResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    post: Post;\n  };\n}\n\nexport interface Tag {\n  tagId: string;\n  tagName: string;\n}\n\ninterface TagResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    tagList: Tag[];\n  };\n}\n\ninterface CreatePostResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n  };\n}\n\nexport async function getAllTags(): Promise<Tag[]> {\n  try {\n    const session = await getSession();\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getAllTag`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    // If API call fails, use mock data\n    if (!response.ok) {\n      console.log(`Mock tags are returned due to API request failed with status ${response.status}`);\n      return [];\n    }\n\n    const data: TagResponse = await response.json();\n\n    return data.data.tagList;\n  } catch (error) {\n    console.error(\"Error fetching tags:\", error);\n    return [];\n  }\n}\n\n// sample API call\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// getLatestPostPreviewList?\n// userId=1\n// &excludingPostIdList=1\n// &excludingPostIdList=34\n// &postNum=5\nexport async function getPosts(\n  options: {\n    filter?: \"latest\" | \"recommended\" | \"following\" | \"created\";\n    excludingPostIdList?: number[];\n    count?: number;\n    authorUserId?: string;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n    // Build the API URL based on the filter\n    let apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/\";\n    switch (options.filter) {\n      case \"latest\":\n        apiUrl += `getLatestPostPreviewList?`;\n        break;\n      case \"recommended\":\n        apiUrl += \"getRecommendedPostPreviewList?\";\n        break;\n      case \"following\":\n        apiUrl += \"getFollowingPostPreviewList?\";\n        break;\n      case \"created\":\n        apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Profile/getMyPostPreviewList?\";\n        break;\n    }\n\n    // Add query parameters\n    switch (options.filter) {\n      case \"created\":\n        apiUrl += `userIdFrom=${session.userId}`;\n        if (options.authorUserId === \"0\") {\n          apiUrl += `&userIdTo=${session.userId}`\n        } else {\n          apiUrl += `&userIdTo=${options.authorUserId}`\n        }\n        break;\n      default:\n        apiUrl += `userId=${session.userId}`; // Add userId to the URL\n        break;\n    }\n    \n\n    if (options.excludingPostIdList) {\n      while (options.excludingPostIdList.length > 0) {\n        //add all excludingPostIds to the URL\n        apiUrl += `&excludingPostIdList=${options.excludingPostIdList.shift()}`;\n      }\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    const data: PostPreviewResponse = await response.json();\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return [];\n  }\n}\n\n// Sample API call:\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// searchPost?\n// userId=1&\n// keyword=prog&\n// excludingPostIdList=23&\n// excludingPostIdList=24&\n// searchNum=10\nexport async function getSearchPosts(\n  options: {\n    keyword?: string;\n    tagIdList?: number[];\n    excludingPostIdList?: number[];\n    count?: number;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/searchPost?`;\n\n    // Add query parameters\n    apiUrl += `userId=${session.userId}`; // Add userId to the URL\n\n    // Add keyword if provided\n    if (options.keyword) {\n      apiUrl += `&keyword=${options.keyword}`;\n    }\n\n    if (options.excludingPostIdList) {\n      const idList = [...options.excludingPostIdList]; // Create a copy to prevent mutation\n      idList.forEach((id) => {\n        apiUrl += `&excludingPostIdList=${id}`;\n      });\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Failed to fetch search posts with status ${response.status}`);\n      return null;\n    }\n\n    const data: PostPreviewResponse = await response.json();\n\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return null;\n  }\n}\n\nexport async function getPostById(postId: string): Promise<Post | null> {\n  try {\n    const session = await getSession();\n\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getPostContent?userId=${session.userId}&postId=${postId}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    try {\n      const json = await response.json();\n      const data: PostContentResponse = json;\n      const post = data.data.post;\n      return {\n        postId: post.postId,\n        userId: post.userId,\n        username: post.username,\n        avatar: post.avatar,\n        isUserBlocked: post.isUserBlocked,\n        title: post.title,\n        content: post.content,\n        imageAPIList: post.imageAPIList,\n        tagNameList: post.tagNameList,\n        likeCount: post.likeCount,\n        isLiked: post.isLiked,\n        dislikeCount: post.dislikeCount,\n        isDisliked: post.isDisliked,\n        commentCount: post.commentCount,\n        updatedAt: post.updatedAt,\n        commentList: post.commentList,\n      };\n    } catch (error) {\n      console.error(\"Error parsing JSON response:\", error);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching post:\", error);\n    return null;\n  }\n}\n\n// Create a new post with the given title, content, tags, and images\nexport async function createPost(title: string, content: string, tags: Tag[], images: File[]): Promise<string | null> {\n  try {\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct request body for the backend\n    const requestBody = {\n      userId,\n      title,\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName),\n      attachTo: 0,\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // Append images to imageList if any\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/createPostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: formData,\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to create post, status code: ${response.status}`);\n    }\n\n    // Parse response\n    const data: CreatePostResponse = await response.json();\n    let postId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      postId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, fetch the latest post\n        const latestPosts = await getPosts({ filter: \"latest\", count: 1 });\n        if (!latestPosts || latestPosts.length === 0) {\n          throw new Error(\"Unable to fetch the latest post for navigation\");\n        }\n        postId = latestPosts[0].postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to create post\");\n    }\n\n    if (!postId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return postId;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Update an existing post with the given data\nexport async function updatePost(\n  postId: string,\n  title: string,\n  content: string,\n  tags: Tag[],\n  images: File[],\n  existingImages: string[]\n): Promise<string | null> {\n  try {\n    // Retrieve the current session\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct the request body, consistent with createPost\n    const requestBody = {\n      postId: parseInt(postId, 10), // Post ID to update\n      userId, // User ID of the poster\n      title, // Updated post title\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName), // List of tag names\n      attachTo: 0, // Parent post ID (if applicable, set to 0 if not a comment)\n      imageAPIList: existingImages, // List of existing image URLs to retain\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // If there are new images, append them to imageList\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    // API endpoint for updating a post or comment\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/updatePostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"PUT\", // Use PUT method for updating\n      headers: {\n        Authorization: `Bearer ${session.token}`, // Authorization token\n      },\n      body: formData, // FormData containing requestBody and imageList\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to update post, status code: ${response.status}`);\n    }\n\n    // Parse the response\n    const data: CreatePostResponse = await response.json();\n    let updatedPostId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats, consistent with createPost\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      updatedPostId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, use the provided postId\n        updatedPostId = postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    // Check if the update was successful\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to update post\");\n    }\n\n    // Ensure a post ID is available for navigation\n    if (!updatedPostId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return updatedPostId;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;;;IA8FsB,WAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1472, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/posts.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\nexport interface Post {\n  postId: string;\n  userId: string;\n  username: string;\n  avatar: string | null;\n  isUserBlocked: boolean;\n  title: string;\n  content: string;\n  imageAPIList: string[] | null;\n  tagNameList: string[] | null;\n  likeCount: number;\n  isLiked: boolean;\n  dislikeCount: number;\n  isDisliked: boolean;\n  commentCount: number;\n  updatedAt: string;\n  commentList: Post[] | null;\n}\n\n// API response type for getPost\ninterface PostPreviewResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    postPreviewList: Post[];\n  };\n}\n\ninterface PostContentResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    post: Post;\n  };\n}\n\nexport interface Tag {\n  tagId: string;\n  tagName: string;\n}\n\ninterface TagResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    tagList: Tag[];\n  };\n}\n\ninterface CreatePostResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n  };\n}\n\nexport async function getAllTags(): Promise<Tag[]> {\n  try {\n    const session = await getSession();\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getAllTag`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    // If API call fails, use mock data\n    if (!response.ok) {\n      console.log(`Mock tags are returned due to API request failed with status ${response.status}`);\n      return [];\n    }\n\n    const data: TagResponse = await response.json();\n\n    return data.data.tagList;\n  } catch (error) {\n    console.error(\"Error fetching tags:\", error);\n    return [];\n  }\n}\n\n// sample API call\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// getLatestPostPreviewList?\n// userId=1\n// &excludingPostIdList=1\n// &excludingPostIdList=34\n// &postNum=5\nexport async function getPosts(\n  options: {\n    filter?: \"latest\" | \"recommended\" | \"following\" | \"created\";\n    excludingPostIdList?: number[];\n    count?: number;\n    authorUserId?: string;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n    // Build the API URL based on the filter\n    let apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/\";\n    switch (options.filter) {\n      case \"latest\":\n        apiUrl += `getLatestPostPreviewList?`;\n        break;\n      case \"recommended\":\n        apiUrl += \"getRecommendedPostPreviewList?\";\n        break;\n      case \"following\":\n        apiUrl += \"getFollowingPostPreviewList?\";\n        break;\n      case \"created\":\n        apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Profile/getMyPostPreviewList?\";\n        break;\n    }\n\n    // Add query parameters\n    switch (options.filter) {\n      case \"created\":\n        apiUrl += `userIdFrom=${session.userId}`;\n        if (options.authorUserId === \"0\") {\n          apiUrl += `&userIdTo=${session.userId}`\n        } else {\n          apiUrl += `&userIdTo=${options.authorUserId}`\n        }\n        break;\n      default:\n        apiUrl += `userId=${session.userId}`; // Add userId to the URL\n        break;\n    }\n    \n\n    if (options.excludingPostIdList) {\n      while (options.excludingPostIdList.length > 0) {\n        //add all excludingPostIds to the URL\n        apiUrl += `&excludingPostIdList=${options.excludingPostIdList.shift()}`;\n      }\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    const data: PostPreviewResponse = await response.json();\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return [];\n  }\n}\n\n// Sample API call:\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// searchPost?\n// userId=1&\n// keyword=prog&\n// excludingPostIdList=23&\n// excludingPostIdList=24&\n// searchNum=10\nexport async function getSearchPosts(\n  options: {\n    keyword?: string;\n    tagIdList?: number[];\n    excludingPostIdList?: number[];\n    count?: number;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/searchPost?`;\n\n    // Add query parameters\n    apiUrl += `userId=${session.userId}`; // Add userId to the URL\n\n    // Add keyword if provided\n    if (options.keyword) {\n      apiUrl += `&keyword=${options.keyword}`;\n    }\n\n    if (options.excludingPostIdList) {\n      const idList = [...options.excludingPostIdList]; // Create a copy to prevent mutation\n      idList.forEach((id) => {\n        apiUrl += `&excludingPostIdList=${id}`;\n      });\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Failed to fetch search posts with status ${response.status}`);\n      return null;\n    }\n\n    const data: PostPreviewResponse = await response.json();\n\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return null;\n  }\n}\n\nexport async function getPostById(postId: string): Promise<Post | null> {\n  try {\n    const session = await getSession();\n\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getPostContent?userId=${session.userId}&postId=${postId}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    try {\n      const json = await response.json();\n      const data: PostContentResponse = json;\n      const post = data.data.post;\n      return {\n        postId: post.postId,\n        userId: post.userId,\n        username: post.username,\n        avatar: post.avatar,\n        isUserBlocked: post.isUserBlocked,\n        title: post.title,\n        content: post.content,\n        imageAPIList: post.imageAPIList,\n        tagNameList: post.tagNameList,\n        likeCount: post.likeCount,\n        isLiked: post.isLiked,\n        dislikeCount: post.dislikeCount,\n        isDisliked: post.isDisliked,\n        commentCount: post.commentCount,\n        updatedAt: post.updatedAt,\n        commentList: post.commentList,\n      };\n    } catch (error) {\n      console.error(\"Error parsing JSON response:\", error);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching post:\", error);\n    return null;\n  }\n}\n\n// Create a new post with the given title, content, tags, and images\nexport async function createPost(title: string, content: string, tags: Tag[], images: File[]): Promise<string | null> {\n  try {\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct request body for the backend\n    const requestBody = {\n      userId,\n      title,\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName),\n      attachTo: 0,\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // Append images to imageList if any\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/createPostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: formData,\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to create post, status code: ${response.status}`);\n    }\n\n    // Parse response\n    const data: CreatePostResponse = await response.json();\n    let postId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      postId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, fetch the latest post\n        const latestPosts = await getPosts({ filter: \"latest\", count: 1 });\n        if (!latestPosts || latestPosts.length === 0) {\n          throw new Error(\"Unable to fetch the latest post for navigation\");\n        }\n        postId = latestPosts[0].postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to create post\");\n    }\n\n    if (!postId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return postId;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Update an existing post with the given data\nexport async function updatePost(\n  postId: string,\n  title: string,\n  content: string,\n  tags: Tag[],\n  images: File[],\n  existingImages: string[]\n): Promise<string | null> {\n  try {\n    // Retrieve the current session\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct the request body, consistent with createPost\n    const requestBody = {\n      postId: parseInt(postId, 10), // Post ID to update\n      userId, // User ID of the poster\n      title, // Updated post title\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName), // List of tag names\n      attachTo: 0, // Parent post ID (if applicable, set to 0 if not a comment)\n      imageAPIList: existingImages, // List of existing image URLs to retain\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // If there are new images, append them to imageList\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    // API endpoint for updating a post or comment\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/updatePostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"PUT\", // Use PUT method for updating\n      headers: {\n        Authorization: `Bearer ${session.token}`, // Authorization token\n      },\n      body: formData, // FormData containing requestBody and imageList\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to update post, status code: ${response.status}`);\n    }\n\n    // Parse the response\n    const data: CreatePostResponse = await response.json();\n    let updatedPostId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats, consistent with createPost\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      updatedPostId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, use the provided postId\n        updatedPostId = postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    // Check if the update was successful\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to update post\");\n    }\n\n    // Ensure a post ID is available for navigation\n    if (!updatedPostId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return updatedPostId;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;;;IAiMsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1485, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/hooks/useTags.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useState, useContext } from \"react\";\nimport { Tag } from \"@/utils/posts\";\n\nexport interface TagContextType {\n  selectedTags: Tag[];\n  setSelectedTags: (tags: Tag[]) => void;\n  isPostsLoading: boolean;\n  setPostsLoading: (isLoading: boolean) => void;\n}\n\nexport const TagContext = createContext<TagContextType>({\n  selectedTags: [],\n  setSelectedTags: () => {},\n  isPostsLoading: false,\n  setPostsLoading: () => {},\n});\n\nexport function TagProvider({ children }: { children: React.ReactNode }) {\n  const [selectedTags, setSelectedTags] = useState<Tag[]>([]);\n  const [isPostsLoading, setPostsLoading] = useState(false);\n\n  return (\n    <TagContext.Provider\n      value={{\n        selectedTags,\n        setSelectedTags,\n        isPostsLoading,\n        setPostsLoading,\n      }}\n    >\n      {children}\n    </TagContext.Provider>\n  );\n}\n\nexport function useTagContext() {\n  const context = useContext(TagContext);\n  if (context === undefined) {\n    throw new Error(\"useTagContext must be used within a TagProvider\");\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;;AAEA;AAFA;;;AAYO,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAkB;IACtD,cAAc,EAAE;IAChB,iBAAiB,KAAO;IACxB,gBAAgB;IAChB,iBAAiB,KAAO;AAC1B;AAEO,SAAS,YAAY,EAAE,QAAQ,EAAiC;IACrE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAC1D,MAAM,CAAC,gBAAgB,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,qBACE,8OAAC,WAAW,QAAQ;QAClB,OAAO;YACL;YACA;YACA;YACA;QACF;kBAEC;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1531, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/LoadingPostPreview.tsx"],"sourcesContent":["export default function LoadingPostPreview() {\n  return (\n    <div className=\"card bg-base-100 p-4\">\n      <div className=\"flex items-center gap-2 mb-3\">\n        <div className=\"skeleton w-10 h-10 rounded-full\"></div>\n        <div className=\"skeleton h-4 w-32\"></div>\n        <div className=\"skeleton h-3 w-16 ml-auto\"></div>\n      </div>\n      <div className=\"skeleton h-6 w-3/4 mb-3\"></div>\n      <div className=\"flex flex-col gap-2\">\n        <div className=\"skeleton h-4 w-full\"></div>\n        <div className=\"skeleton h-4 w-full\"></div>\n        <div className=\"skeleton h-4 w-2/3\"></div>\n      </div>\n      <div className=\"flex gap-3 mt-4\">\n        <div className=\"skeleton h-4 w-12\"></div>\n        <div className=\"skeleton h-4 w-12\"></div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAI,WAAU;;;;;;;;;;;;0BAEjB,8OAAC;gBAAI,WAAU;;;;;;0BACf,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAI,WAAU;;;;;;;;;;;;0BAEjB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;;AAIvB","debugId":null}},
    {"offset": {"line": 1643, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostPreviewList.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport PostPreview from \"@/components/posts/PostPreview\";\nimport { Post } from \"@/utils/posts\";\nimport { getPosts, getSearchPosts } from \"@/utils/posts\";\nimport { useTagContext } from \"@/hooks/useTags\";\nimport LoadingPostPreview from \"@/components/posts/LoadingPostPreview\";\n\nexport default function PostList({\n  filter,\n  keyword,\n  authorUserId,\n}: {\n  filter?: \"latest\" | \"recommended\" | \"following\" | \"created\" | undefined;\n  keyword?: string | undefined;\n  authorUserId?: string;\n}) {\n  const { selectedTags: tags, setPostsLoading } = useTagContext();\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(true);\n  const observerTarget = useRef<HTMLDivElement>(null);\n  const [excludedPostIds, setExcludedPostIds] = useState<Set<number>>(new Set());\n  const [fetchAttempts, setFetchAttempts] = useState(0);\n  const MAX_ATTEMPTS = 10; // Limit fetch attempts to prevent infinite loops\n\n  // Synchronize local loading state with the global tag context loading state\n  useEffect(() => {\n    setPostsLoading(isLoading);\n  }, [isLoading, setPostsLoading]);\n\n  const filterPostsByTags = (postsToFilter: Post[]) => {\n    if (tags.length === 0) {\n      return postsToFilter; // No filtering needed if no tags selected\n    }\n\n    return postsToFilter.filter((post) => {\n      // Skip posts with no tags if we have selected tags\n      if (!post.tagNameList || post.tagNameList.length === 0) {\n        return false;\n      }\n\n      // Check if post contains ALL selected tags\n      return tags.every((tag) => post.tagNameList!.includes(tag.tagName));\n    });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    // Reset states when tags change\n    setPosts([]);\n    setExcludedPostIds(new Set());\n    setHasMore(true);\n    setFetchAttempts(0);\n\n    const fetchInitialPosts = async () => {\n      try {\n        let initialPosts;\n        //switch between getPosts and getSearchPosts based on keyword\n        if (!keyword) {\n          switch (filter) {\n            case \"created\":\n              initialPosts = await getPosts({ filter, authorUserId });\n              break;\n            default:\n              initialPosts = await getPosts({ filter });\n              break;\n          }\n        } else {\n          initialPosts = await getSearchPosts({ keyword });\n        }\n        // Scroll to the top of the page smoothly\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n\n        // No posts are returned from the API\n        if (!initialPosts || initialPosts.length === 0) {\n          setHasMore(false);\n          return;\n        }\n\n        const filteredPosts = filterPostsByTags(initialPosts);\n\n        // Update excludedPostIds with the initial posts\n        const newExcludedIds = new Set<number>();\n        initialPosts.forEach((post) => newExcludedIds.add(Number(post.postId)));\n        setExcludedPostIds(newExcludedIds);\n\n        setPosts(filteredPosts);\n        setHasMore(initialPosts.length > 0);\n\n        console.log(\"Initial Posts:\", initialPosts);\n        console.log(\"Filtered Posts:\", filteredPosts);\n        console.log(\"Excluded Post IDs:\", Array.from(newExcludedIds));\n        console.log(\"Selected Tags:\", tags);\n      } catch (err) {\n        console.error(\"Failed to load posts:\", err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInitialPosts();\n  }, [filter, tags, keyword]); // Refetch when tags or filter or keyword change\n\n  // Effect to handle auto-loading more posts if filtered results are empty\n  useEffect(() => {\n    // If no posts after filtering, but there might be more, try loading more\n    if (!isLoading && posts.length === 0 && hasMore && fetchAttempts < MAX_ATTEMPTS) {\n      setFetchAttempts((prev) => prev + 1);\n      loadMorePosts();\n    }\n  }, [posts, hasMore, fetchAttempts]);\n\n  // Infinite scrolling setup\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && hasMore && !isLoading) {\n          loadMorePosts();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    const currentObserverTarget = observerTarget.current;\n\n    if (currentObserverTarget) {\n      observer.observe(currentObserverTarget);\n    }\n\n    return () => {\n      if (currentObserverTarget) {\n        observer.unobserve(currentObserverTarget);\n      }\n    };\n  }, [hasMore, isLoading]);\n\n  // Function to load more posts\n  const loadMorePosts = async () => {\n    if (isLoading || !hasMore) return;\n\n    setIsLoading(true);\n\n    try {\n      let newPosts;\n      //switch between getPosts and getSearchPosts based on keyword\n      if (!keyword) {\n        switch (filter) {\n          case \"created\":\n            newPosts = await getPosts({\n              filter,\n              excludingPostIdList: Array.from(excludedPostIds),\n              count: 10,\n              authorUserId: authorUserId,\n            });\n            break;\n          default:\n            newPosts = await getPosts({\n              filter,\n              excludingPostIdList: Array.from(excludedPostIds),\n              count: 10,\n            });\n            break;\n        }\n      } else {\n        newPosts = await getSearchPosts({\n          keyword,\n          excludingPostIdList: Array.from(excludedPostIds),\n          count: 10,\n        });\n      }\n      // No posts are returned from the API\n      if (!newPosts || newPosts.length === 0) {\n        setHasMore(false);\n        return;\n      }\n\n      const filteredPosts = filterPostsByTags(newPosts);\n\n      // Update excludedPostIds with new posts\n      setExcludedPostIds((prevExcludedIds) => {\n        const newExcludedIds = new Set(prevExcludedIds);\n        newPosts.forEach((post) => newExcludedIds.add(Number(post.postId)));\n        return newExcludedIds;\n      });\n\n      console.log(\"New Posts:\", newPosts);\n      console.log(\"Filtered Posts:\", filteredPosts);\n\n      setPosts((prevPosts) => [...prevPosts, ...filteredPosts]);\n\n      // If got posts but none passed the filter\n      if (filteredPosts.length === 0 && newPosts.length > 0) {\n        console.log(\"Got posts but all were filtered out\");\n      }\n    } catch (err) {\n      console.error(\"Failed to load more posts:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col px-4 py-2\">\n      {posts.length > 0 ? (\n        <>\n          {/* Map through posts and add dividers between them */}\n          {posts.map((post) => (\n            <div key={post.postId} className=\"w-full\">\n              <PostPreview post={post} />\n              {/* Add divider after each post except the last one */}\n              <div className=\"divider my-0\"></div>\n            </div>\n          ))}\n\n          {/* Observer target and loading state */}\n          <div ref={observerTarget} className=\"py-2\">\n            {isLoading ? (\n              <div className=\"flex justify-center py-4\">\n                <span className=\"loading loading-spinner loading-xl\"></span>\n              </div>\n            ) : hasMore ? (\n              <div className=\"h-10\"></div>\n            ) : (\n              <div className=\"text-center text-base-content/50 my-4\">\n                <p className=\"text-sm\">You&apos;ve reached the end</p>\n              </div>\n            )}\n          </div>\n        </>\n      ) : isLoading ? (\n        [1, 2, 3, 4].map((i) => <LoadingPostPreview key={i} />)\n      ) : (\n        <div className=\"text-center text-lg text-base-content/50 my-4\">No posts available</div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1945, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/profiles/PostCommentTab.tsx"],"sourcesContent":["\"use client\";\n\nimport { Profile } from \"@/utils/profiles\";\nimport { useState } from \"react\";\nimport PostList from \"../posts/PostPreviewList\";\n\nexport default function PostCommentTab({\n  profile,\n  userIdTo,\n}: {\n  profile: Profile\n  userIdTo: string\n}) {\n  const [activeTab, setActiveTab] = useState(0);\n  const tabs = [\n    `My Posts (${Intl.NumberFormat(\"en\", { notation: \"compact\" }).format(profile.postCount)})`,\n    `My Comments (${Intl.NumberFormat(\"en\", { notation: \"compact\" }).format(profile.commentCount)})`,\n  ];\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex justify-center gap-30 border-b border-gray-300\">\n        {tabs.map((tab, index) => (\n          <div\n            key={index}\n            className={\n              `cursor-pointer py-2 text-xl text-center ${activeTab === index ? 'text-base-content border-b-2 border-black' : 'text-base-content/50'}`\n            }\n            onClick={() => setActiveTab(index)}\n          >\n            {tab}\n          </div>\n        ))}\n      </div>\n      <div className=\"mt-4\">\n        {activeTab === 0 && <div><PostList filter=\"created\" authorUserId={userIdTo} /></div>}\n        {activeTab === 1 && <div>My Comments</div>}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAJA;;;;AAMe,SAAS,eAAe,EACrC,OAAO,EACP,QAAQ,EAIT;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,OAAO;QACX,CAAC,UAAU,EAAE,KAAK,YAAY,CAAC,MAAM;YAAE,UAAU;QAAU,GAAG,MAAM,CAAC,QAAQ,SAAS,EAAE,CAAC,CAAC;QAC1F,CAAC,aAAa,EAAE,KAAK,YAAY,CAAC,MAAM;YAAE,UAAU;QAAU,GAAG,MAAM,CAAC,QAAQ,YAAY,EAAE,CAAC,CAAC;KACjG;IAED,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACZ,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,8OAAC;wBAEC,WACE,CAAC,wCAAwC,EAAE,cAAc,QAAQ,8CAA8C,wBAAwB;wBAEzI,SAAS,IAAM,aAAa;kCAE3B;uBANI;;;;;;;;;;0BAUX,8OAAC;gBAAI,WAAU;;oBACZ,cAAc,mBAAK,8OAAC;kCAAI,cAAA,8OAAC,8IAAA,CAAA,UAAQ;4BAAC,QAAO;4BAAU,cAAc;;;;;;;;;;;oBACjE,cAAc,mBAAK,8OAAC;kCAAI;;;;;;;;;;;;;;;;;;AAIjC","debugId":null}}]
}