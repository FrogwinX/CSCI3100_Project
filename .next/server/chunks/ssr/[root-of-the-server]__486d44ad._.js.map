{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/sessions.ts"],"sourcesContent":["import { SessionOptions, getIronSession, unsealData } from \"iron-session\";\nimport type { NextRequest } from \"next/server\";\n\n// Type for session data\nexport interface SessionData {\n  userId?: number;\n  username?: string;\n  roles?: string;\n  isLoggedIn: boolean;\n  token?: string;\n  avatar?: string | null;\n  email?: string;\n}\n\n// Default session state when not logged in\nexport const defaultSession: SessionData = {\n  isLoggedIn: false,\n};\n\n// Session configuration\nexport const sessionOptions: SessionOptions = {\n  password:\n    process.env.SESSION_SECRET ||\n    (process.env.NODE_ENV === \"development\" ? \"FALLBACK_DEVELOPMENT_SECRET_KEY_IF_NO_ENV_FILE\" : \"\"),\n  cookieName: \"flowchat_session\",\n  cookieOptions: {\n    // secure should be true in production\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"strict\",\n    maxAge: 60 * 60 * 24, // 1 day\n  },\n};\n\n// Get the session data\nexport async function getSession() {\n  const { cookies } = await import(\"next/headers\");\n  const session = await getIronSession<SessionData>(await cookies(), sessionOptions);\n\n  // Initialize the session if not already done\n  if (!session.isLoggedIn) {\n    session.isLoggedIn = false;\n  }\n\n  return session;\n}\n\n// Read-only version of session for middleware\nexport async function readSessionFromRequest(req: NextRequest): Promise<SessionData> {\n  try {\n    const cookieValue = req.cookies.get(sessionOptions.cookieName)?.value;\n\n    if (!cookieValue) {\n      return defaultSession;\n    }\n\n    const data = await unsealData<SessionData>(cookieValue, {\n      password: sessionOptions.password,\n    });\n\n    return data.isLoggedIn ? data : defaultSession;\n  } catch (error) {\n    console.error(\"Error reading session in middleware:\", error);\n    return defaultSession;\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAeO,MAAM,iBAA8B;IACzC,YAAY;AACd;AAGO,MAAM,iBAAiC;IAC5C,UACE,QAAQ,GAAG,CAAC,cAAc,IAC1B,CAAC,uCAAyC,uFAAqD;IACjG,YAAY;IACZ,eAAe;QACb,sCAAsC;QACtC,QAAQ,oDAAyB;QACjC,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;AACF;AAGO,eAAe;IACpB,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,gJAAA,CAAA,iBAAc,AAAD,EAAe,MAAM,WAAW;IAEnE,6CAA6C;IAC7C,IAAI,CAAC,QAAQ,UAAU,EAAE;QACvB,QAAQ,UAAU,GAAG;IACvB;IAEA,OAAO;AACT;AAGO,eAAe,uBAAuB,GAAgB;IAC3D,IAAI;QACF,MAAM,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,UAAU,GAAG;QAEhE,IAAI,CAAC,aAAa;YAChB,OAAO;QACT;QAEA,MAAM,OAAO,MAAM,CAAA,GAAA,gJAAA,CAAA,aAAU,AAAD,EAAe,aAAa;YACtD,UAAU,eAAe,QAAQ;QACnC;QAEA,OAAO,KAAK,UAAU,GAAG,OAAO;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\n// API response types\ninterface ApiResponse<T> {\n  message: string;\n  data: T;\n}\n\ninterface LoginData {\n  isPasswordCorrect: boolean | null;\n  isAccountActive: boolean;\n  user: {\n    roles: string;\n    id: number;\n    avatar: string | null;\n    email: string;\n    token: string;\n    username: string;\n  } | null;\n}\n\ninterface RegisterData {\n  user: {\n    role: string;\n    id: number;\n    username: string;\n  } | null;\n  isSuccess: boolean;\n}\n\ninterface RequestData {\n  isSuccess: boolean;\n}\n\ninterface EmailCheckData {\n  isEmailUnique: boolean;\n}\n\ninterface UsernameCheckData {\n  isUsernameUnique: boolean;\n}\n\ninterface DeleteAccountData {\n  isSuccess: boolean;\n}\n\ninterface ResetPasswordData {\n  username: string | null;\n  isSuccess: boolean;\n}\n\n// Helper function for API calls to reduce repetition\nasync function apiFetch<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(`https://flowchatbackend.azurewebsites.net/api/${endpoint}`, options);\n    const result: ApiResponse<T> = await response.json();\n    return result;\n  } catch (error) {\n    console.error(`API error (${endpoint}):`, error);\n    return {\n      message: \"An error occurred during the request\",\n      data: {} as T,\n    };\n  }\n}\n\n// Login server action\nexport async function login(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const result = await apiFetch<LoginData>(\"/Account/login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    // Successful login\n    if (result.data.isPasswordCorrect && result.data.isAccountActive && result.data.user) {\n      const session = await getSession();\n\n      // Save user data in session\n      session.userId = result.data.user.id;\n      session.username = result.data.user.username;\n      session.roles = result.data.user.roles;\n      session.isLoggedIn = true;\n      session.token = result.data.user.token;\n      session.avatar = result.data.user.avatar;\n      session.email = result.data.user.email;\n      await session.save();\n    }\n\n    return result;\n  } catch {\n    return {\n      message: \"Login failed\",\n      data: {\n        isPasswordCorrect: false,\n        isAccountActive: false,\n        user: null,\n      },\n    };\n  }\n}\n\n// Logout server action\nexport async function logout() {\n  try {\n    // clear session\n    const session = await getSession();\n    session.destroy();\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n    return { error: \"Failed to log out\" };\n  }\n}\n\n// Registration server action\nexport async function register(formData: FormData) {\n  const username = formData.get(\"username\") as string;\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const licenseKey = formData.get(\"licenseKey\") as string;\n\n  try {\n    const result = await apiFetch<RegisterData>(\"Account/registerAccount\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username, email, password, licenseKey }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"An error occurred during registration\",\n      data: {\n        user: null,\n        isSuccess: false,\n      },\n    };\n  }\n}\n\n// Request license key server action\nexport async function requestLicenseKey(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestLicenseKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request license key\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Request authentication code server action\nexport async function requestAuthCode(email: string) {\n  try {\n    const result = await apiFetch<RequestData>(\"Account/requestAuthenticationCode\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to request authentication code\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Check if email is unique server action\nexport async function checkEmailUnique(email: string) {\n  try {\n    return await apiFetch<EmailCheckData>(`Account/isEmailUnique?email=${encodeURIComponent(email)}`);\n  } catch {\n    return {\n      message: \"Failed to check email uniqueness\",\n      data: { isEmailUnique: false },\n    };\n  }\n}\n\n// Check if username is unique server action\nexport async function checkUsernameUnique(username: string) {\n  try {\n    return await apiFetch<UsernameCheckData>(`Account/isUsernameUnique?username=${encodeURIComponent(username)}`);\n  } catch {\n    return {\n      message: \"Failed to check username uniqueness\",\n      data: { isUsernameUnique: false },\n    };\n  }\n}\n\n// Delete account server action\nexport async function deleteAccount(formData: FormData) {\n  const username = formData.get(\"username\") as string | null;\n  const email = formData.get(\"email\") as string | null;\n  const password = formData.get(\"password\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<DeleteAccountData>(\"Account/deleteAccount\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, username, password }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to delete account\",\n      data: { isSuccess: false },\n    };\n  }\n}\n\n// Reset password by email server action\nexport async function resetPasswordByEmail(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const password = formData.get(\"password\") as string;\n  const authenticationCode = formData.get(\"authenticationCode\") as string;\n\n  try {\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByEmail\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password, authenticationCode }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n// Reset password by old password server action\nexport async function resetPasswordByOldPassword(formData: FormData) {\n  const email = formData.get(\"email\") as string;\n  const oldPassword = formData.get(\"oldPassword\") as string;\n  const newPassword = formData.get(\"newPassword\") as string;\n\n  try {\n    const session = await getSession();\n    const result = await apiFetch<ResetPasswordData>(\"Account/resetPasswordByOldPassword\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${session.token}`\n      },\n      body: JSON.stringify({ email, oldPassword, newPassword }),\n    });\n\n    return result;\n  } catch {\n    return {\n      message: \"Failed to reset password\",\n      data: { username: null, isSuccess: false },\n    };\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 360, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/posts.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\nexport interface Post {\n  postId: string;\n  userId: string;\n  username: string;\n  avatar: string | null;\n  isUserBlocked: boolean;\n  title: string;\n  content: string;\n  imageAPIList: string[] | null;\n  tagNameList: string[] | null;\n  likeCount: number;\n  isLiked: boolean;\n  dislikeCount: number;\n  isDisliked: boolean;\n  commentCount: number;\n  updatedAt: string;\n  commentList: Post[] | null;\n}\n\n// API response type for getPost\ninterface PostPreviewResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    postPreviewList: Post[];\n  };\n}\n\ninterface PostContentResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    post: Post;\n  };\n}\n\nexport interface Tag {\n  tagId: string;\n  tagName: string;\n}\n\ninterface TagResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    tagList: Tag[];\n  };\n}\n\ninterface CreatePostResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n  };\n}\n\nexport async function getAllTags(): Promise<Tag[]> {\n  try {\n    const session = await getSession();\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getAllTag`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    // If API call fails, use mock data\n    if (!response.ok) {\n      console.log(`Mock tags are returned due to API request failed with status ${response.status}`);\n      return [];\n    }\n\n    const data: TagResponse = await response.json();\n\n    return data.data.tagList;\n  } catch (error) {\n    console.error(\"Error fetching tags:\", error);\n    return [];\n  }\n}\n\n// sample API call\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// getLatestPostPreviewList?\n// userId=1\n// &excludingPostIdList=1\n// &excludingPostIdList=34\n// &postNum=5\nexport async function getPosts(\n  options: {\n    filter?: \"latest\" | \"recommended\" | \"following\" | \"created\";\n    excludingPostIdList?: number[];\n    count?: number;\n    authorUserId?: string;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n    // Build the API URL based on the filter\n    let apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/\";\n    switch (options.filter) {\n      case \"latest\":\n        apiUrl += `getLatestPostPreviewList?`;\n        break;\n      case \"recommended\":\n        apiUrl += \"getRecommendedPostPreviewList?\";\n        break;\n      case \"following\":\n        apiUrl += \"getFollowingPostPreviewList?\";\n        break;\n      case \"created\":\n        apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Profile/getMyPostPreviewList?\";\n        break;\n    }\n\n    // Add query parameters\n    switch (options.filter) {\n      case \"created\":\n        apiUrl += `userIdFrom=${session.userId}`;\n        if (options.authorUserId === \"0\") {\n          apiUrl += `&userIdTo=${session.userId}`\n        } else {\n          apiUrl += `&userIdTo=${options.authorUserId}`\n        }\n        break;\n      default:\n        apiUrl += `userId=${session.userId}`; // Add userId to the URL\n        break;\n    }\n    \n\n    if (options.excludingPostIdList) {\n      while (options.excludingPostIdList.length > 0) {\n        //add all excludingPostIds to the URL\n        apiUrl += `&excludingPostIdList=${options.excludingPostIdList.shift()}`;\n      }\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    const data: PostPreviewResponse = await response.json();\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return [];\n  }\n}\n\n// Sample API call:\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// searchPost?\n// userId=1&\n// keyword=prog&\n// excludingPostIdList=23&\n// excludingPostIdList=24&\n// searchNum=10\nexport async function getSearchPosts(\n  options: {\n    keyword?: string;\n    tagIdList?: number[];\n    excludingPostIdList?: number[];\n    count?: number;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/searchPost?`;\n\n    // Add query parameters\n    apiUrl += `userId=${session.userId}`; // Add userId to the URL\n\n    // Add keyword if provided\n    if (options.keyword) {\n      apiUrl += `&keyword=${options.keyword}`;\n    }\n\n    if (options.excludingPostIdList) {\n      const idList = [...options.excludingPostIdList]; // Create a copy to prevent mutation\n      idList.forEach((id) => {\n        apiUrl += `&excludingPostIdList=${id}`;\n      });\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Failed to fetch search posts with status ${response.status}`);\n      return null;\n    }\n\n    const data: PostPreviewResponse = await response.json();\n\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return null;\n  }\n}\n\nexport async function getPostById(postId: string): Promise<Post | null> {\n  try {\n    const session = await getSession();\n\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getPostContent?userId=${session.userId}&postId=${postId}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    try {\n      const json = await response.json();\n      const data: PostContentResponse = json;\n      const post = data.data.post;\n      return {\n        postId: post.postId,\n        userId: post.userId,\n        username: post.username,\n        avatar: post.avatar,\n        isUserBlocked: post.isUserBlocked,\n        title: post.title,\n        content: post.content,\n        imageAPIList: post.imageAPIList,\n        tagNameList: post.tagNameList,\n        likeCount: post.likeCount,\n        isLiked: post.isLiked,\n        dislikeCount: post.dislikeCount,\n        isDisliked: post.isDisliked,\n        commentCount: post.commentCount,\n        updatedAt: post.updatedAt,\n        commentList: post.commentList,\n      };\n    } catch (error) {\n      console.error(\"Error parsing JSON response:\", error);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching post:\", error);\n    return null;\n  }\n}\n\n// Create a new post with the given title, content, tags, and images\nexport async function createPost(title: string, content: string, tags: Tag[], images: File[]): Promise<string | null> {\n  try {\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct request body for the backend\n    const requestBody = {\n      userId,\n      title,\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName),\n      attachTo: 0,\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // Append images to imageList if any\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/createPostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: formData,\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to create post, status code: ${response.status}`);\n    }\n\n    // Parse response\n    const data: CreatePostResponse = await response.json();\n    let postId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      postId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, fetch the latest post\n        const latestPosts = await getPosts({ filter: \"latest\", count: 1 });\n        if (!latestPosts || latestPosts.length === 0) {\n          throw new Error(\"Unable to fetch the latest post for navigation\");\n        }\n        postId = latestPosts[0].postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to create post\");\n    }\n\n    if (!postId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return postId;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Update an existing post with the given data\nexport async function updatePost(\n  postId: string,\n  title: string,\n  content: string,\n  tags: Tag[],\n  images: File[],\n  existingImages: string[]\n): Promise<string | null> {\n  try {\n    // Retrieve the current session\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct the request body, consistent with createPost\n    const requestBody = {\n      postId: parseInt(postId, 10), // Post ID to update\n      userId, // User ID of the poster\n      title, // Updated post title\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName), // List of tag names\n      attachTo: 0, // Parent post ID (if applicable, set to 0 if not a comment)\n      imageAPIList: existingImages, // List of existing image URLs to retain\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // If there are new images, append them to imageList\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    // API endpoint for updating a post or comment\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/updatePostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"PUT\", // Use PUT method for updating\n      headers: {\n        Authorization: `Bearer ${session.token}`, // Authorization token\n      },\n      body: formData, // FormData containing requestBody and imageList\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to update post, status code: ${response.status}`);\n    }\n\n    // Parse the response\n    const data: CreatePostResponse = await response.json();\n    let updatedPostId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats, consistent with createPost\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      updatedPostId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, use the provided postId\n        updatedPostId = postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    // Check if the update was successful\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to update post\");\n    }\n\n    // Ensure a post ID is available for navigation\n    if (!updatedPostId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return updatedPostId;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 781, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/.next-internal/server/app/forum/post/%5BpostId%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '00d347e48e6d2236e1f2b1fadcb1fb08f178d130b4'} from 'ACTIONS_MODULE0'\nexport {getAllTags as '00ea58ac1cac156effee2a42784344f8a6315042d2'} from 'ACTIONS_MODULE1'\nexport {getSearchPosts as '400f4e9440d1f535054541e77b34a614f79fb16664'} from 'ACTIONS_MODULE1'\nexport {getPosts as '40dce588911040281a23d1a5c8c49e04ac16d57a05'} from 'ACTIONS_MODULE1'\nexport {getPostById as '40f14b3bfd677ce91ef1e92df13e32d64b934adddd'} from 'ACTIONS_MODULE1'\nexport {createPost as '78aea39e016b203b6a3d92e9ea7edbbc12594df80a'} from 'ACTIONS_MODULE1'\nexport {updatePost as '7ea5fe3613fb40e28ae354fcac269aa95cbb0f309e'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 860, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostHeader.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/posts/PostHeader.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/posts/PostHeader.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 874, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostHeader.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/posts/PostHeader.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/posts/PostHeader.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 888, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 898, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostFooter.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/posts/PostFooter.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/posts/PostFooter.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 912, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostFooter.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/posts/PostFooter.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/posts/PostFooter.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 926, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 936, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/LoadingImage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/posts/LoadingImage.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/posts/LoadingImage.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","debugId":null}},
    {"offset": {"line": 950, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/LoadingImage.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/posts/LoadingImage.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/posts/LoadingImage.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","debugId":null}},
    {"offset": {"line": 964, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 974, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/posts/PostDetail.tsx"],"sourcesContent":["import PostHeader from \"@/components/posts/PostHeader\";\nimport PostFooter from \"@/components/posts/PostFooter\";\nimport LoadingImage from \"@/components/posts/LoadingImage\";\nimport { Post } from \"@/utils/posts\";\n\nexport default function PostDetail({ post }: { post: Post }) {\n  return (\n    <div className=\"relative\">\n      {post.isUserBlocked && (\n        <div\n          role=\"alert\"\n          className=\"alert alert-warning text-warning-content w-fit absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-10\"\n        >\n          You have blocked this user\n        </div>\n      )}\n      <div className={post.isUserBlocked ? \"pointer-events-none blur-2xl\" : \"\"}>\n        <div className=\"card px-2\">\n          <div className=\"card-body p-0 gap-4\">\n            {/** Header, client-sided */}\n            <PostHeader\n              postId={post.postId}\n              postUserId={post.userId}\n              postUsername={post.username}\n              postUpdatedAt={post.updatedAt}\n              size=\"md\"\n              postUserAvatar={post.avatar}\n            />\n\n            {/** Body */}\n            <div className=\"flex gap-4\">\n              <div className=\"flex-1 overflow-hidden\">\n                <h3 className=\"card-title text-2xl font-bold break-words\">{post.title}</h3>\n                <p className=\"text-base-content text-md my-2 whitespace-pre-wrap break-words\">{post.content}</p>\n              </div>\n            </div>\n\n            {/** Image */}\n            {post.imageAPIList && (\n              <LoadingImage\n                src={post.imageAPIList[0]}\n                alt={post.title}\n                className=\"object-contain rounded-md max-h-96 mx-auto\"\n              />\n            )}\n\n            {/** Tags */}\n            {post.tagNameList && (\n              <div className=\"flex flex-wrap gap-1\">\n                {post.tagNameList.map((tag, index) => (\n                  <div key={index} className=\"badge badge-md badge-accent\">\n                    {tag.trim()}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/** Footer, client-sided */}\n            <PostFooter\n              postId={post.postId}\n              postLikeCount={post.likeCount}\n              postIsLiked={post.isLiked}\n              postDislikeCount={post.dislikeCount}\n              postIsDisliked={post.isDisliked}\n              postCommentCount={post.commentCount}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAGe,SAAS,WAAW,EAAE,IAAI,EAAkB;IACzD,qBACE,8OAAC;QAAI,WAAU;;YACZ,KAAK,aAAa,kBACjB,8OAAC;gBACC,MAAK;gBACL,WAAU;0BACX;;;;;;0BAIH,8OAAC;gBAAI,WAAW,KAAK,aAAa,GAAG,iCAAiC;0BACpE,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC,yIAAA,CAAA,UAAU;gCACT,QAAQ,KAAK,MAAM;gCACnB,YAAY,KAAK,MAAM;gCACvB,cAAc,KAAK,QAAQ;gCAC3B,eAAe,KAAK,SAAS;gCAC7B,MAAK;gCACL,gBAAgB,KAAK,MAAM;;;;;;0CAI7B,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAG,WAAU;sDAA6C,KAAK,KAAK;;;;;;sDACrE,8OAAC;4CAAE,WAAU;sDAAkE,KAAK,OAAO;;;;;;;;;;;;;;;;;4BAK9F,KAAK,YAAY,kBAChB,8OAAC,2IAAA,CAAA,UAAY;gCACX,KAAK,KAAK,YAAY,CAAC,EAAE;gCACzB,KAAK,KAAK,KAAK;gCACf,WAAU;;;;;;4BAKb,KAAK,WAAW,kBACf,8OAAC;gCAAI,WAAU;0CACZ,KAAK,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,sBAC1B,8OAAC;wCAAgB,WAAU;kDACxB,IAAI,IAAI;uCADD;;;;;;;;;;0CAQhB,8OAAC,yIAAA,CAAA,UAAU;gCACT,QAAQ,KAAK,MAAM;gCACnB,eAAe,KAAK,SAAS;gCAC7B,aAAa,KAAK,OAAO;gCACzB,kBAAkB,KAAK,YAAY;gCACnC,gBAAgB,KAAK,UAAU;gCAC/B,kBAAkB,KAAK,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOjD","debugId":null}},
    {"offset": {"line": 1114, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/app/forum/post/%5BpostId%5D/page.tsx"],"sourcesContent":["import { getPostById } from \"@/utils/posts\";\nimport { notFound } from \"next/navigation\";\nimport PostDetail from \"@/components/posts/PostDetail\";\nimport { cache } from \"react\";\n\ntype Params = Promise<{ postId: string }>;\n\nconst getPost = cache((postId: string) => {\n  return getPostById(postId);\n});\n\nexport async function generateMetadata(props: { params: Params }) {\n  const params = await props.params;\n  const post = await getPost(params.postId);\n\n  if (!post) {\n    return {\n      title: \"Post Not Found | FlowChat\",\n    };\n  }\n\n  return {\n    title: `${post.title} | FlowChat`,\n    description: post.content.substring(0, 160),\n  };\n}\n\nexport default async function PostDetailPage(props: { params: Params }) {\n  const params = await props.params;\n  const post = await getPost(params.postId);\n\n  if (!post) {\n    notFound();\n  }\n\n  return (\n    <div className=\"flex flex-col px-4 py-2\">\n      <PostDetail post={post} />\n\n      {/** Comments section */}\n      <p id=\"comments\" className=\"card bg-base-100 p-4 min-h-screen\">\n        @Boscode31415 Please create a comment section here, label the component id=&quot;comments&quot; so my comment\n        button can navigate to the comment section without navbar blocking\n      </p>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAIA,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE,CAAC;IACrB,OAAO,CAAA,GAAA,qHAAA,CAAA,cAAW,AAAD,EAAE;AACrB;AAEO,eAAe,iBAAiB,KAAyB;IAC9D,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,OAAO,MAAM,QAAQ,OAAO,MAAM;IAExC,IAAI,CAAC,MAAM;QACT,OAAO;YACL,OAAO;QACT;IACF;IAEA,OAAO;QACL,OAAO,GAAG,KAAK,KAAK,CAAC,WAAW,CAAC;QACjC,aAAa,KAAK,OAAO,CAAC,SAAS,CAAC,GAAG;IACzC;AACF;AAEe,eAAe,eAAe,KAAyB;IACpE,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,OAAO,MAAM,QAAQ,OAAO,MAAM;IAExC,IAAI,CAAC,MAAM;QACT,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,yIAAA,CAAA,UAAU;gBAAC,MAAM;;;;;;0BAGlB,8OAAC;gBAAE,IAAG;gBAAW,WAAU;0BAAoC;;;;;;;;;;;;AAMrE","debugId":null}}]
}