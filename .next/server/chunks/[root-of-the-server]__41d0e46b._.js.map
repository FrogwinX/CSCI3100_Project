{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/sessions.ts"],"sourcesContent":["import { SessionOptions, getIronSession, unsealData } from \"iron-session\";\nimport type { NextRequest } from \"next/server\";\n\n// Type for session data\nexport interface SessionData {\n  userId?: number;\n  username?: string;\n  roles?: string;\n  isLoggedIn: boolean;\n  token?: string;\n  avatar?: string | null;\n  email?: string;\n}\n\n// Default session state when not logged in\nexport const defaultSession: SessionData = {\n  isLoggedIn: false,\n};\n\n// Session configuration\nexport const sessionOptions: SessionOptions = {\n  password:\n    process.env.SESSION_SECRET ||\n    (process.env.NODE_ENV === \"development\" ? \"FALLBACK_DEVELOPMENT_SECRET_KEY_IF_NO_ENV_FILE\" : \"\"),\n  cookieName: \"flowchat_session\",\n  cookieOptions: {\n    // secure should be true in production\n    secure: process.env.NODE_ENV === \"production\",\n    sameSite: \"strict\",\n    maxAge: 60 * 60 * 24, // 1 day\n  },\n};\n\n// Get the session data\nexport async function getSession() {\n  const { cookies } = await import(\"next/headers\");\n  const session = await getIronSession<SessionData>(await cookies(), sessionOptions);\n\n  // Initialize the session if not already done\n  if (!session.isLoggedIn) {\n    session.isLoggedIn = false;\n  }\n\n  return session;\n}\n\n// Read-only version of session for middleware\nexport async function readSessionFromRequest(req: NextRequest): Promise<SessionData> {\n  try {\n    const cookieValue = req.cookies.get(sessionOptions.cookieName)?.value;\n\n    if (!cookieValue) {\n      return defaultSession;\n    }\n\n    const data = await unsealData<SessionData>(cookieValue, {\n      password: sessionOptions.password,\n    });\n\n    return data.isLoggedIn ? data : defaultSession;\n  } catch (error) {\n    console.error(\"Error reading session in middleware:\", error);\n    return defaultSession;\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAeO,MAAM,iBAA8B;IACzC,YAAY;AACd;AAGO,MAAM,iBAAiC;IAC5C,UACE,QAAQ,GAAG,CAAC,cAAc,IAC1B,CAAC,uCAAyC,uFAAqD;IACjG,YAAY;IACZ,eAAe;QACb,sCAAsC;QACtC,QAAQ,oDAAyB;QACjC,UAAU;QACV,QAAQ,KAAK,KAAK;IACpB;AACF;AAGO,eAAe;IACpB,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,kJAAA,CAAA,iBAAc,AAAD,EAAe,MAAM,WAAW;IAEnE,6CAA6C;IAC7C,IAAI,CAAC,QAAQ,UAAU,EAAE;QACvB,QAAQ,UAAU,GAAG;IACvB;IAEA,OAAO;AACT;AAGO,eAAe,uBAAuB,GAAgB;IAC3D,IAAI;QACF,MAAM,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,UAAU,GAAG;QAEhE,IAAI,CAAC,aAAa;YAChB,OAAO;QACT;QAEA,MAAM,OAAO,MAAM,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAD,EAAe,aAAa;YACtD,UAAU,eAAe,QAAQ;QACnC;QAEA,OAAO,KAAK,UAAU,GAAG,OAAO;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/app/api/%5B...action%5D/route.ts"],"sourcesContent":["import { getSession } from \"@/utils/sessions\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\ntype Params = Promise<{ action: string[] }>;\n\n// Backend API URL\nconst API_BASE_URL = \"https://flowchatbackend.azurewebsites.net/api\";\n\n// Helper function to get token and user ID from session\nasync function getAuthInfo(): Promise<{ token: string; userId: number | null }> {\n  const session = await getSession();\n  const token = session.token ? `Bearer ${session.token}` : \"\";\n  const userId = session.userId ?? null;\n  return { token, userId };\n}\n\n// Helper function to handle API responses\nasync function handleApiResponse(response: Response) {\n  if (!response.ok) {\n    // Forward the error status and potentially the body from the backend\n    const errorBody = await response.text();\n    console.error(`Backend API Error (${response.status}): ${errorBody}`);\n    return new NextResponse(errorBody || response.statusText, { status: response.status });\n  }\n\n  const contentType = response.headers.get(\"content-type\");\n\n  // Handle image responses\n  if (contentType && contentType.includes(\"image\")) {\n    const imageData = await response.arrayBuffer();\n    return new NextResponse(imageData, {\n      headers: {\n        \"Content-Type\": contentType,\n        \"Cache-Control\": \"public, max-age=31536000, immutable\", // Example cache header\n      },\n    });\n  }\n\n  // Handle JSON responses (default)\n  try {\n    const data = await response.json();\n    return NextResponse.json(data);\n  } catch (error) {\n    // Handle cases where response is not JSON but status is OK (e.g., empty body)\n    console.error(\"Error parsing JSON response, but status was OK:\", error);\n    return new NextResponse(null, { status: response.status }); // Return OK with empty body\n  }\n}\n\n// Handle POST requests\nexport async function POST(request: NextRequest, props: { params: Params }) {\n  const params = await props.params;\n  const actionPath = params.action.join(\"/\");\n  const { token } = await getAuthInfo();\n\n  let response: Response;\n\n  // Check if it's the image upload endpoint\n  if (actionPath === \"Image/uploadImage\") {\n    // Handle FormData for image upload\n    const formData = await request.formData();\n\n    response = await fetch(`${API_BASE_URL}/${actionPath}`, {\n      method: \"POST\",\n      headers: {\n        Authorization: token,\n      },\n      body: formData,\n    });\n  } else {\n    // Handle JSON body for other POST requests\n    try {\n      const body = await request.json();\n\n      response = await fetch(`${API_BASE_URL}/${actionPath}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (error) {\n      // Handle cases where request is not image upload but body isn't valid JSON\n      console.error(\"Error parsing JSON body for non-image POST request:\", error);\n      return new NextResponse(\"Invalid JSON body\", { status: 400 });\n    }\n  }\n\n  return handleApiResponse(response);\n}\n\nexport async function DELETE(request: NextRequest, props: { params: Params }) {\n  const params = await props.params;\n  const actionPath = params.action.join(\"/\");\n  const body = await request.json();\n  const { token } = await getAuthInfo();\n\n  const response = await fetch(`${API_BASE_URL}/${actionPath}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token,\n    },\n    body: JSON.stringify(body),\n  });\n\n  return handleApiResponse(response);\n}\n\n// Handle GET requests\nexport async function GET(request: NextRequest, props: { params: Params }) {\n  const params = await props.params;\n  const actionPath = params.action.join(\"/\");\n  const url = new URL(request.url);\n  const searchParams = url.search;\n  const { token, userId } = await getAuthInfo();\n\n  const response = await fetch(`${API_BASE_URL}/${actionPath}${searchParams}&userId=${userId}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: token,\n    },\n  });\n\n  return handleApiResponse(response);\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}