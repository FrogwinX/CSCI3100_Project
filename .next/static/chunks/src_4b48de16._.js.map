{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/posts.ts"],"sourcesContent":["\"use server\";\n\nimport { getSession } from \"@/utils/sessions\";\n\nexport interface Post {\n  postId: string;\n  userId: string;\n  username: string;\n  avatar: string | null;\n  isUserBlocked: boolean;\n  title: string;\n  content: string;\n  imageAPIList: string[] | null;\n  tagNameList: string[] | null;\n  likeCount: number;\n  isLiked: boolean;\n  dislikeCount: number;\n  isDisliked: boolean;\n  commentCount: number;\n  updatedAt: string;\n  commentList: Post[] | null;\n}\n\n// API response type for getPost\ninterface PostPreviewResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    postPreviewList: Post[];\n  };\n}\n\ninterface PostContentResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    post: Post;\n  };\n}\n\nexport interface Tag {\n  tagId: string;\n  tagName: string;\n}\n\ninterface TagResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n    tagList: Tag[];\n  };\n}\n\ninterface CreatePostResponse {\n  message: string;\n  data: {\n    isSuccess: boolean;\n  };\n}\n\nexport async function getAllTags(): Promise<Tag[]> {\n  try {\n    const session = await getSession();\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getAllTag`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    // If API call fails, use mock data\n    if (!response.ok) {\n      console.log(`Mock tags are returned due to API request failed with status ${response.status}`);\n      return [];\n    }\n\n    const data: TagResponse = await response.json();\n\n    return data.data.tagList;\n  } catch (error) {\n    console.error(\"Error fetching tags:\", error);\n    return [];\n  }\n}\n\n// sample API call\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// getLatestPostPreviewList?\n// userId=1\n// &excludingPostIdList=1\n// &excludingPostIdList=34\n// &postNum=5\nexport async function getPosts(\n  options: {\n    filter?: \"latest\" | \"recommended\" | \"following\" | \"created\";\n    excludingPostIdList?: number[];\n    count?: number;\n    authorUserId?: string;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n    // Build the API URL based on the filter\n    let apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/\";\n    switch (options.filter) {\n      case \"latest\":\n        apiUrl += `getLatestPostPreviewList?`;\n        break;\n      case \"recommended\":\n        apiUrl += \"getRecommendedPostPreviewList?\";\n        break;\n      case \"following\":\n        apiUrl += \"getFollowingPostPreviewList?\";\n        break;\n      case \"created\":\n        apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Profile/getMyPostPreviewList?\";\n        break;\n    }\n\n    // Add query parameters\n    switch (options.filter) {\n      case \"created\":\n        apiUrl += `userIdFrom=${session.userId}`;\n        if (options.authorUserId === \"0\") {\n          apiUrl += `&userIdTo=${session.userId}`\n        } else {\n          apiUrl += `&userIdTo=${options.authorUserId}`\n        }\n        break;\n      default:\n        apiUrl += `userId=${session.userId}`; // Add userId to the URL\n        break;\n    }\n    \n\n    if (options.excludingPostIdList) {\n      while (options.excludingPostIdList.length > 0) {\n        //add all excludingPostIds to the URL\n        apiUrl += `&excludingPostIdList=${options.excludingPostIdList.shift()}`;\n      }\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    const data: PostPreviewResponse = await response.json();\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return [];\n  }\n}\n\n// Sample API call:\n// https://flowchatbackend.azurewebsites.net/api/Forum/\n// searchPost?\n// userId=1&\n// keyword=prog&\n// excludingPostIdList=23&\n// excludingPostIdList=24&\n// searchNum=10\nexport async function getSearchPosts(\n  options: {\n    keyword?: string;\n    tagIdList?: number[];\n    excludingPostIdList?: number[];\n    count?: number;\n  } = {}\n): Promise<Post[] | null> {\n  try {\n    const session = await getSession();\n\n    let apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/searchPost?`;\n\n    // Add query parameters\n    apiUrl += `userId=${session.userId}`; // Add userId to the URL\n\n    // Add keyword if provided\n    if (options.keyword) {\n      apiUrl += `&keyword=${options.keyword}`;\n    }\n\n    if (options.excludingPostIdList) {\n      const idList = [...options.excludingPostIdList]; // Create a copy to prevent mutation\n      idList.forEach((id) => {\n        apiUrl += `&excludingPostIdList=${id}`;\n      });\n    } else {\n      //default value = 0\n      apiUrl += `&excludingPostIdList=0`;\n    }\n\n    apiUrl += `&postNum=${options.count || 10}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    if (!response.ok) {\n      console.error(`Failed to fetch search posts with status ${response.status}`);\n      return null;\n    }\n\n    const data: PostPreviewResponse = await response.json();\n\n    // Map API response to frontend Post interface\n    const posts: Post[] = data.data.postPreviewList.map((post) => ({\n      postId: post.postId,\n      userId: post.userId,\n      username: post.username,\n      avatar: post.avatar,\n      isUserBlocked: post.isUserBlocked,\n      title: post.title,\n      content: post.content,\n      imageAPIList: post.imageAPIList,\n      tagNameList: post.tagNameList,\n      likeCount: post.likeCount,\n      isLiked: post.isLiked,\n      dislikeCount: post.dislikeCount,\n      isDisliked: post.isDisliked,\n      commentCount: post.commentCount,\n      updatedAt: post.updatedAt,\n      commentList: post.commentList,\n    }));\n\n    return posts;\n  } catch (error) {\n    console.error(\"Error fetching posts:\", error);\n    return null;\n  }\n}\n\nexport async function getPostById(postId: string): Promise<Post | null> {\n  try {\n    const session = await getSession();\n\n    const apiUrl = `https://flowchatbackend.azurewebsites.net/api/Forum/getPostContent?userId=${session.userId}&postId=${postId}`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n    });\n\n    try {\n      const json = await response.json();\n      const data: PostContentResponse = json;\n      const post = data.data.post;\n      return {\n        postId: post.postId,\n        userId: post.userId,\n        username: post.username,\n        avatar: post.avatar,\n        isUserBlocked: post.isUserBlocked,\n        title: post.title,\n        content: post.content,\n        imageAPIList: post.imageAPIList,\n        tagNameList: post.tagNameList,\n        likeCount: post.likeCount,\n        isLiked: post.isLiked,\n        dislikeCount: post.dislikeCount,\n        isDisliked: post.isDisliked,\n        commentCount: post.commentCount,\n        updatedAt: post.updatedAt,\n        commentList: post.commentList,\n      };\n    } catch (error) {\n      console.error(\"Error parsing JSON response:\", error);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching post:\", error);\n    return null;\n  }\n}\n\n// Create a new post with the given title, content, tags, and images\nexport async function createPost(title: string, content: string, tags: Tag[], images: File[]): Promise<string | null> {\n  try {\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct request body for the backend\n    const requestBody = {\n      userId,\n      title,\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName),\n      attachTo: 0,\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // Append images to imageList if any\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/createPostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${session.token}`,\n      },\n      body: formData,\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to create post, status code: ${response.status}`);\n    }\n\n    // Parse response\n    const data: CreatePostResponse = await response.json();\n    let postId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      postId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, fetch the latest post\n        const latestPosts = await getPosts({ filter: \"latest\", count: 1 });\n        if (!latestPosts || latestPosts.length === 0) {\n          throw new Error(\"Unable to fetch the latest post for navigation\");\n        }\n        postId = latestPosts[0].postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to create post\");\n    }\n\n    if (!postId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return postId;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// Update an existing post with the given data\nexport async function updatePost(\n  postId: string,\n  title: string,\n  content: string,\n  tags: Tag[],\n  images: File[],\n  existingImages: string[]\n): Promise<string | null> {\n  try {\n    // Retrieve the current session\n    const session = await getSession();\n\n    // Validate session\n    if (!session?.isLoggedIn || !session?.token) {\n      throw new Error(\"User is not logged in or token is unavailable\");\n    }\n\n    // Validate userId\n    const userId = parseInt(session.userId?.toString() || \"0\", 10);\n    if (isNaN(userId)) {\n      throw new Error(\"Invalid userId\");\n    }\n\n    // Construct the request body, consistent with createPost\n    const requestBody = {\n      postId: parseInt(postId, 10), // Post ID to update\n      userId, // User ID of the poster\n      title, // Updated post title\n      content: content.replace(/<[^>]+>/g, \"\"), // Remove HTML tags from content\n      tag: tags.map((tag) => tag.tagName), // List of tag names\n      attachTo: 0, // Parent post ID (if applicable, set to 0 if not a comment)\n      imageAPIList: existingImages, // List of existing image URLs to retain\n    };\n\n    // Create FormData for multipart/form-data request\n    const formData = new FormData();\n    const requestBodyBlob = new Blob([JSON.stringify(requestBody)], { type: \"application/json\" });\n    formData.append(\"requestBody\", requestBodyBlob);\n\n    // If there are new images, append them to imageList\n    if (images.length > 0) {\n      images.forEach((image) => {\n        formData.append(\"imageList\", image);\n      });\n    }\n\n    // API endpoint for updating a post or comment\n    const apiUrl = \"https://flowchatbackend.azurewebsites.net/api/Forum/updatePostOrComment\";\n    const response = await fetch(apiUrl, {\n      method: \"PUT\", // Use PUT method for updating\n      headers: {\n        Authorization: `Bearer ${session.token}`, // Authorization token\n      },\n      body: formData, // FormData containing requestBody and imageList\n    });\n\n    // Check response status\n    if (!response.ok) {\n      if (response.status === 415) {\n        throw new Error(\"Unsupported media type, please check request format\");\n      }\n      if (response.status === 401) {\n        throw new Error(\"Authentication failed, please log in again\");\n      }\n      if (response.status === 500) {\n        throw new Error(\"Server error, please contact the administrator\");\n      }\n      throw new Error(`Failed to update post, status code: ${response.status}`);\n    }\n\n    // Parse the response\n    const data: CreatePostResponse = await response.json();\n    let updatedPostId: string | null = null;\n    let isSuccess: boolean = false;\n\n    // Handle different response formats, consistent with createPost\n    if (typeof data.data === \"string\") {\n      // Legacy format: data.data is a string like \"48 success: true\"\n      const dataString = data.data as string;\n      const [id, successPart] = dataString.split(\" success: \");\n      updatedPostId = id;\n      isSuccess = successPart === \"true\";\n    } else if (data.data && typeof data.data === \"object\" && \"isSuccess\" in data.data) {\n      // New format: data.data is an object like { isSuccess: true }\n      isSuccess = (data.data as { isSuccess: boolean }).isSuccess;\n      if (isSuccess) {\n        // Backend did not return postId, use the provided postId\n        updatedPostId = postId;\n      }\n    } else {\n      throw new Error(\"Unexpected response format from backend\");\n    }\n\n    // Check if the update was successful\n    if (!isSuccess) {\n      throw new Error(data.message || \"Failed to update post\");\n    }\n\n    // Ensure a post ID is available for navigation\n    if (!updatedPostId) {\n      throw new Error(\"Unable to retrieve post ID for navigation\");\n    }\n\n    return updatedPostId;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;;;IA0TsB,aAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/app/forum/create-post/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { useSession } from \"@/hooks/useSession\";\nimport { getAllTags, Tag, createPost } from \"@/utils/posts\";\nimport { useRouter } from \"next/navigation\";\n\nexport default function CreatePost() {\n  // State variables\n  const [title, setTitle] = useState<string>(\"\"); // Post title\n  const [tags, setTags] = useState<Tag[]>([]); // Selected tags\n  const [allTags, setAllTags] = useState<Tag[]>([]); // All available tags from server\n  const [isTagMenuOpen, setIsTagMenuOpen] = useState<boolean>(false); // Toggle for tag selection menu\n  const [content, setContent] = useState<string>(\"\"); // Post content (HTML string with placeholders)\n  const [textLength, setTextLength] = useState<number>(0); // Length of the plain text content\n  const [tagFetchError, setTagFetchError] = useState<string | null>(null); // Error message for tag fetching\n  const [submitError, setSubmitError] = useState<string | null>(null); // Error message for post submission\n  const [images, setImages] = useState<File[]>([]); // Uploaded image files\n  const fileInputRef = useRef<HTMLInputElement>(null); // Reference to file input for image upload\n  const contentRef = useRef<HTMLDivElement>(null); // Reference to content editable div\n\n  const { session, loading, refresh } = useSession();\n  const router = useRouter();\n\n  // Fetch all tags when the component mounts or session changes\n  useEffect(() => {\n    const fetchTags = async () => {\n      if (loading) return; // Wait for session to load\n\n      if (!session?.isLoggedIn || !session?.token) {\n        setTagFetchError(\"Please log in to load tags\");\n        return;\n      }\n\n      try {\n        const tags = await getAllTags();\n        if (tags.length === 0) {\n          setTagFetchError(\"No tags available from server\");\n        } else {\n          setAllTags(tags);\n          setTagFetchError(null);\n        }\n      } catch {\n        setTagFetchError(\"Failed to load tags\");\n        setAllTags([]);\n      }\n    };\n\n    fetchTags();\n  }, [session, loading]);\n\n  // Toggle the tag selection menu\n  const handleAddTag = () => {\n    if (loading) return;\n\n    if (!session?.isLoggedIn) {\n      alert(\"Please log in to select tags\");\n      return;\n    }\n\n    setIsTagMenuOpen((prev) => !prev);\n  };\n\n  // Add or remove a tag from the selected tags\n  const toggleTag = (tag: Tag) => {\n    if (tags.some((t) => t.tagId === tag.tagId)) {\n      setTags(tags.filter((t) => t.tagId !== tag.tagId));\n    } else {\n      setTags([...tags, tag]);\n    }\n  };\n\n  // Handle image upload\n  const handleImageUpload = () => {\n    const file = fileInputRef.current?.files?.[0];\n    if (file) {\n      // Validate file type (only PNG and JPEG allowed)\n      if (!file.type.match(\"image/(png|jpeg)\")) {\n        setSubmitError(\"Only PNG and JPEG formats are supported\");\n        return;\n      }\n\n      // Validate file size (max 5MB)\n      const maxSize = 5 * 1024 * 1024; // 5MB\n      if (file.size > maxSize) {\n        setSubmitError(\"Image file is too large, maximum limit is 5MB\");\n        return;\n      }\n\n      // Rename file using a simple format\n      const extension = file.name.split(\".\").pop();\n      const newFileName = `image-${images.length + 1}.${extension}`;\n      const renamedFile = new File([file], newFileName, { type: file.type });\n\n      // Add the image to the images state\n      setImages((prevImages) => [...prevImages, renamedFile]);\n\n      // Display the image in the editor using a temporary URL and insert a placeholder\n      const imgSrc = URL.createObjectURL(file);\n      const imgElement = document.createElement(\"img\");\n      imgElement.src = imgSrc;\n      imgElement.alt = \"Uploaded Image\";\n      imgElement.dataset.fileName = newFileName;\n      imgElement.style.maxWidth = \"100%\";\n      imgElement.style.height = \"auto\";\n      if (contentRef.current) {\n        contentRef.current.appendChild(imgElement);\n        contentRef.current.appendChild(document.createElement(\"br\"));\n      }\n    }\n  };\n\n  // Trigger file input click for image upload\n  const handleClipClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Calculate the length of the plain text content (excluding image placeholders)\n  const getTextLength = (text: string) => {\n    // Remove image placeholders to calculate the actual text length\n    const cleanText = text.replace(/\\[image:[^\\]]+\\]/g, \"\");\n    return cleanText.length || 0;\n  };\n\n  // Handle changes in the content editable div\n  const handleContentChange = () => {\n    if (contentRef.current) {\n      // Get the HTML content and replace images with placeholders\n      const div = document.createElement(\"div\");\n      div.innerHTML = contentRef.current.innerHTML;\n      const images = div.querySelectorAll(\"img\");\n      images.forEach((img) => {\n        const fileName = img.dataset.fileName || \"\";\n        if (fileName) {\n          const placeholder = `[image:${fileName}]`;\n          const textNode = document.createTextNode(placeholder);\n          img.parentNode?.replaceChild(textNode, img);\n        }\n      });\n\n      // Preserve the HTML structure (e.g., <br>, <p>, etc.)\n      const formattedContent = div.innerHTML;\n      setContent(formattedContent);\n\n      // Calculate the text length (excluding image placeholders)\n      const cleanText = div.textContent || \"\";\n      setTextLength(getTextLength(cleanText));\n    }\n  };\n\n  // Adjust the height of the content editor dynamically\n  useEffect(() => {\n    if (contentRef.current) {\n      contentRef.current.style.height = \"auto\";\n      const contentHeight = contentRef.current.scrollHeight;\n      const windowHeight = typeof window !== \"undefined\" ? window.innerHeight : 0;\n      const fixedHeight = 4 * 16 + 3 * 16 + 3.75 * 16 + 2 * 16 + 1.125 * 16;\n      const maxHeight = windowHeight > 0 ? windowHeight - fixedHeight : 9999;\n      const newHeight = Math.min(Math.max(contentHeight, 160), maxHeight);\n      contentRef.current.style.height = `${newHeight}px`;\n    }\n  }, [content]);\n\n  // Limit the content length to 1000 characters (excluding image placeholders)\n  useEffect(() => {\n    if (contentRef.current) {\n      const textContent = contentRef.current.textContent || \"\";\n      const length = getTextLength(textContent);\n      if (length > 1000) {\n        // Truncate the text while preserving the HTML structure\n        const div = document.createElement(\"div\");\n        div.innerHTML = contentRef.current.innerHTML;\n        let currentLength = 0;\n        const nodes = Array.from(div.childNodes);\n        const newNodes: Node[] = [];\n\n        for (const node of nodes) {\n          if (node.nodeType === Node.TEXT_NODE) {\n            const text = node.textContent || \"\";\n            const cleanText = text.replace(/\\[image:[^\\]]+\\]/g, \"\");\n            if (currentLength + cleanText.length <= 1000) {\n              newNodes.push(node);\n              currentLength += cleanText.length;\n            } else {\n              const remainingLength = 1000 - currentLength;\n              const truncatedText = cleanText.substring(0, remainingLength);\n              const newTextNode = document.createTextNode(truncatedText);\n              newNodes.push(newTextNode);\n              break;\n            }\n          } else if (node.nodeType === Node.ELEMENT_NODE && (node as Element).tagName === \"BR\") {\n            newNodes.push(node);\n          }\n        }\n\n        div.innerHTML = \"\";\n        newNodes.forEach((node) => div.appendChild(node));\n        contentRef.current.innerHTML = div.innerHTML;\n        setContent(div.innerHTML);\n        setTextLength(1000);\n      } else {\n        setTextLength(length);\n      }\n    }\n  }, [content]);\n\n  // Handle form submission to create a post\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Check if user is logged in\n    if (!session?.isLoggedIn) {\n      setSubmitError(\"Please log in first\");\n      return;\n    }\n\n    // Validate title and content\n    if (!title || !content) {\n      setSubmitError(\"Title and content cannot be empty\");\n      return;\n    }\n\n    setSubmitError(null);\n\n    try {\n      const postId = await createPost(title, content, tags, images);\n      if (postId) {\n        // Navigate to the newly created post's page\n        router.push(`/forum/post/${postId}`);\n      } else {\n        setSubmitError(\"Failed to create post, unable to retrieve post ID\");\n      }\n    } catch (error: unknown) {\n      // Set message to either standard error message or API error message\n      const message = error instanceof Error ? error.message : String(error);\n      if (message.includes(\"Authentication failed\")) {\n        setSubmitError(\"Authentication failed, please log in again\");\n        refresh();\n      } else if (message.includes(\"Unsupported media type\")) {\n        setSubmitError(\"Unsupported request format, please contact the administrator\");\n      } else if (message.includes(\"Server error\")) {\n        setSubmitError(\"Server error, please contact the administrator\");\n      } else {\n        setSubmitError(message || \"Failed to create post, please try again later\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-full px-4 pt-4 pb-6 h-full\">\n      <h1 className=\"text-4xl font-bold mb-6\">Create Post</h1>\n      <form className=\"space-y-6\" onSubmit={handleSubmit}>\n        <div className=\"form-control\">\n          <input\n            type=\"text\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            maxLength={100}\n            placeholder=\"Title\"\n            className=\"input input-bordered w-full rounded-lg\"\n          />\n          <div className=\"flex justify-end\">\n            <span className=\"text-sm text-gray-500 mt-1\">{title.length}/100</span>\n          </div>\n        </div>\n        <div className=\"form-control\">\n          <div className=\"flex items-center space-x-2 flex-wrap gap-2\">\n            <button type=\"button\" onClick={handleAddTag} className=\"btn btn-outline btn-primary rounded-lg\">\n              {isTagMenuOpen ? \"Close Tags\" : \"Add Tags\"}\n            </button>\n            <div className=\"flex flex-wrap gap-2\">\n              {tags.map((tag) => (\n                <span key={tag.tagId} className=\"badge badge-primary\">\n                  {tag.tagName}\n                </span>\n              ))}\n            </div>\n          </div>\n          {isTagMenuOpen && (\n            <div className=\"mt-2 p-4 bg-gray-100 rounded-lg shadow max-h-60 overflow-y-auto\">\n              {loading ? (\n                <p>Loading tags...</p>\n              ) : tagFetchError ? (\n                <p className=\"text-red-500\">{tagFetchError}</p>\n              ) : session?.isLoggedIn ? (\n                allTags.length > 0 ? (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {allTags.map((tag) => (\n                      <button\n                        key={tag.tagId}\n                        type=\"button\"\n                        onClick={() => toggleTag(tag)}\n                        className={`btn btn-sm ${\n                          tags.some((t) => t.tagId === tag.tagId) ? \"btn-primary\" : \"btn-accent\"\n                        }`}\n                      >\n                        {tag.tagName}\n                      </button>\n                    ))}\n                  </div>\n                ) : (\n                  <p>No tags available</p>\n                )\n              ) : (\n                <p>Please log in to select tags</p>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"form-control\">\n          <label className=\"label\">\n            <span className=\"label-text\">Post Content</span>\n          </label>\n          <div className=\"border border-gray-300 rounded-t-lg\">\n            <div className=\"bg-gray-100 p-2 flex space-x-1 border-b border-gray-300\">\n              <button type=\"button\" className=\"btn btn-ghost btn-xs text-gray-600\">\n                <span className=\"font-bold\">B</span>\n              </button>\n              <button type=\"button\" className=\"btn btn-ghost btn-xs text-gray-600\">\n                <span className=\"italic\">I</span>\n              </button>\n              <button type=\"button\" className=\"btn btn-ghost btn-xs text-gray-600\">\n                <span className=\"underline\">U</span>\n              </button>\n              <button type=\"button\" className=\"btn btn-ghost btn-xs text-gray-600\" onClick={handleClipClick}>\n                <span>📎</span>\n              </button>\n              <input\n                type=\"file\"\n                accept=\"image/png,image/jpeg\"\n                ref={fileInputRef}\n                onChange={handleImageUpload}\n                className=\"hidden\"\n              />\n            </div>\n            <div\n              ref={contentRef}\n              contentEditable\n              onInput={handleContentChange}\n              className=\"w-full p-2 border border-gray-300 rounded-b-lg focus:outline-none\"\n              style={{ minHeight: \"10rem\", overflowY: \"auto\" }}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <span className=\"text-sm text-gray-500 mt-1\">{textLength}/1000</span>\n          </div>\n        </div>\n        {submitError && <p className=\"text-red-500\">{submitError}</p>}\n        <button type=\"submit\" className=\"btn bg-[#A3DFFA] text-[#1A3C34] hover:bg-[#8CCFF7] float-right rounded-lg\">\n          Post\n        </button>\n      </form>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}