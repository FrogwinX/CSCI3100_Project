{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/utils/messaging.ts"],"sourcesContent":["\"use client\";\n\nimport SockJS from \"sockjs-client\";\nimport { Client, Message } from \"@stomp/stompjs\";\n\n// Message types\nexport interface OutgoingMessage {\n  userIdFrom: number;\n  userIdTo: number;\n  content: string | null;\n  attachTo: number | null;\n  imageIdList: number[] | null;\n  action: string;\n  messageIdList: number[] | null;\n}\n\nexport interface ReceivedMessage {\n  success: boolean;\n  errorMessage: string | null;\n  action: string;\n  time: string;\n  readOrDeleteMessageIdList: number[] | null;\n  messageDetail: IncomingMessage;\n}\n\nexport interface IncomingMessage {\n  messageId: number;\n  userIdFrom: number;\n  userIdTo: number;\n  content: string;\n  isActive: boolean;\n  attachTo: number;\n  sentAt: string;\n  readAt: string | null;\n  imageAPIList: string[] | null;\n}\n\nexport interface Contact {\n  messageId: number;\n  contactUserId: number;\n  contactUsername: string;\n  contactUserAvatar: string | null;\n  isContactUserBlocked: boolean;\n  latestMessage: string;\n  userIdFrom: number;\n  usernameFrom: string;\n  userIdTo: number;\n  usernameTo: string;\n  sentAt: string;\n  readAt: string;\n  unreadMessageCount: number;\n}\n\ninterface ContactListResponse {\n  message: string;\n  data: {\n    contactList: Contact[];\n    isSuccess: boolean;\n  };\n}\n\ninterface MessageHistoryResponse {\n  message: string;\n  data: {\n    messageHistoryList: IncomingMessage[];\n    isSuccess: boolean;\n  };\n}\n\n// Connection status\nexport enum ConnectionStatus {\n  DISCONNECTED = \"disconnected\",\n  CONNECTING = \"connecting\",\n  CONNECTED = \"connected\",\n  ERROR = \"error\",\n}\n\n// Messaging service\nexport class MessagingService {\n  private client: Client | null = null;\n  private subscriptions = new Map<string, { id: string; callback: (message: ReceivedMessage) => void }>();\n  private status: ConnectionStatus = ConnectionStatus.DISCONNECTED;\n  private statusListeners: ((status: ConnectionStatus) => void)[] = [];\n\n  // Get current connection status\n  public getStatus(): ConnectionStatus {\n    return this.status;\n  }\n\n  // Add status change listener\n  public onStatusChange(listener: (status: ConnectionStatus) => void): () => void {\n    this.statusListeners.push(listener);\n    // Return unsubscribe function\n    return () => {\n      this.statusListeners = this.statusListeners.filter((l) => l !== listener);\n    };\n  }\n\n  // Update connection status\n  private updateStatus(newStatus: ConnectionStatus): void {\n    this.status = newStatus;\n    this.statusListeners.forEach((listener) => listener(newStatus));\n  }\n\n  // Connect to WebSocket server\n  public connect(token: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.client) {\n        this.disconnect();\n      }\n\n      this.updateStatus(ConnectionStatus.CONNECTING);\n\n      try {\n        const socket = new SockJS(\"https://flowchatbackend.azurewebsites.net/chat\", null, {\n          // Specify preferred transports to avoid unnecessary fallback attempts\n          transports: [\"xhr-streaming\", \"websocket\", \"xhr-polling\"],\n        });\n\n        this.client = new Client({\n          webSocketFactory: () => socket,\n          connectHeaders: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        this.client.onConnect = () => {\n          this.updateStatus(ConnectionStatus.CONNECTED);\n          resolve();\n        };\n\n        this.client.activate();\n\n        // Add timeout to avoid hanging connections\n        setTimeout(() => {\n          if (this.status === ConnectionStatus.CONNECTING) {\n            this.updateStatus(ConnectionStatus.ERROR);\n            reject(new Error(\"Connection timed out\"));\n          }\n        }, 1000);\n      } catch (error) {\n        console.error(\"Failed to connect:\", error);\n      }\n    });\n  }\n\n  // Disconnect from WebSocket server\n  public disconnect(): void {\n    if (this.client && this.client.connected) {\n      // Unsubscribe from all topics\n      this.subscriptions.forEach((sub) => {\n        if (this.client) {\n          this.client.unsubscribe(sub.id);\n        }\n      });\n      this.subscriptions.clear();\n\n      this.client.deactivate();\n      this.client = null;\n      this.updateStatus(ConnectionStatus.DISCONNECTED);\n    }\n  }\n\n  // Subscribe to user channel\n  public subscribe(channel: string, callback: (message: ReceivedMessage) => void): void {\n    if (!this.client || !this.client.connected) {\n      throw new Error(\"Not connected to WebSocket server\");\n    }\n\n    // Unsubscribe if already subscribed\n    this.unsubscribe(channel);\n\n    // Subscribe to the channel\n    const subscription = this.client.subscribe(`/channel/${channel}`, (message: Message) => {\n      try {\n        const parsedMessage = JSON.parse(message.body);\n        callback(parsedMessage);\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    });\n\n    // Store subscription\n    this.subscriptions.set(channel, {\n      id: subscription.id,\n      callback,\n    });\n  }\n\n  // Unsubscribe from a topic\n  public unsubscribe(topic: string): void {\n    const subscription = this.subscriptions.get(topic);\n    if (subscription && this.client) {\n      this.client.unsubscribe(subscription.id);\n      this.subscriptions.delete(topic);\n    }\n  }\n\n  // Send a message\n  public sendMessage(channel: string, message: OutgoingMessage): void {\n    if (!this.client || !this.client.connected) {\n      throw new Error(\"Not connected to WebSocket server\");\n    }\n\n    this.client.publish({\n      destination: `/app/send/${channel}`,\n      body: JSON.stringify(message),\n    });\n  }\n}\n\nexport async function getContactsList(count: number): Promise<Contact[]> {\n  try {\n    let apiUrl = `/api/Chat/getContactList?contactNum=${count}`;\n\n    apiUrl += `&excludingUserIdList=0`;\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n    });\n\n    if (!response.ok) {\n      console.error(`API error: ${response.status} ${response.statusText}`);\n      return [];\n    }\n\n    const data: ContactListResponse = await response.json();\n\n    // Safer property access with detailed logging\n    if (!data) {\n      console.error(\"Empty response from API\");\n      return [];\n    }\n\n    if (!data.data) {\n      console.error(\"Response missing data property:\", data);\n      return [];\n    }\n\n    return data.data.contactList;\n  } catch (error) {\n    console.error(\"Error fetching contact list:\", error);\n    return [];\n  }\n}\n\nexport async function getMessageHistory(\n  contactUserId: number,\n  count: number,\n  excludingMessageIdList?: number[]\n): Promise<IncomingMessage[]> {\n  try {\n    let apiUrl = `/api/Chat/getMessageHistoryList?contactUserId=${contactUserId}&messageNum=${count || 15}`;\n\n    // Filter out fetched messages\n    if (excludingMessageIdList) {\n      while (excludingMessageIdList.length > 0) {\n        //add all excludingMessageId to the URL\n        apiUrl += `&excludingMessageIdList=${excludingMessageIdList.shift()}`;\n      }\n    } else {\n      //default value = 0\n      apiUrl += `&excludingMessageIdList=0`;\n    }\n\n    // Fetch data from the API\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n    });\n\n    if (!response.ok) {\n      console.error(`API error: ${response.status} ${response.statusText}`);\n      return [];\n    }\n\n    const data: MessageHistoryResponse = await response.json();\n\n    // Safer property access with detailed logging\n    if (!data) {\n      console.error(\"Empty response from API\");\n      return [];\n    }\n\n    if (!data.data) {\n      console.error(\"Response missing data property:\", data);\n      return [];\n    }\n\n    return data.data.messageHistoryList;\n  } catch (error) {\n    console.error(\"Error fetching message history:\", error);\n    return [];\n  }\n}\n\n// Create a singleton instance\nexport const messagingService = new MessagingService();\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAHA;;;AAsEO,IAAA,AAAK,0CAAA;;;;;WAAA;;AAQL,MAAM;IACH,SAAwB,KAAK;IAC7B,gBAAgB,IAAI,MAA4E;IAChG,wBAAyD;IACzD,kBAA0D,EAAE,CAAC;IAErE,gCAAgC;IACzB,YAA8B;QACnC,OAAO,IAAI,CAAC,MAAM;IACpB;IAEA,6BAA6B;IACtB,eAAe,QAA4C,EAAc;QAC9E,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAC1B,8BAA8B;QAC9B,OAAO;YACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAM,MAAM;QAClE;IACF;IAEA,2BAA2B;IACnB,aAAa,SAA2B,EAAQ;QACtD,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,WAAa,SAAS;IACtD;IAEA,8BAA8B;IACvB,QAAQ,KAAa,EAAiB;QAC3C,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,UAAU;YACjB;YAEA,IAAI,CAAC,YAAY;YAEjB,IAAI;gBACF,MAAM,SAAS,IAAI,mJAAA,CAAA,UAAM,CAAC,kDAAkD,MAAM;oBAChF,sEAAsE;oBACtE,YAAY;wBAAC;wBAAiB;wBAAa;qBAAc;gBAC3D;gBAEA,IAAI,CAAC,MAAM,GAAG,IAAI,uJAAA,CAAA,SAAM,CAAC;oBACvB,kBAAkB,IAAM;oBACxB,gBAAgB;wBACd,eAAe,CAAC,OAAO,EAAE,OAAO;oBAClC;gBACF;gBAEA,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG;oBACtB,IAAI,CAAC,YAAY;oBACjB;gBACF;gBAEA,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAEpB,2CAA2C;gBAC3C,WAAW;oBACT,IAAI,IAAI,CAAC,MAAM,mBAAkC;wBAC/C,IAAI,CAAC,YAAY;wBACjB,OAAO,IAAI,MAAM;oBACnB;gBACF,GAAG;YACL,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,sBAAsB;YACtC;QACF;IACF;IAEA,mCAAmC;IAC5B,aAAmB;QACxB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACxC,8BAA8B;YAC9B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC1B,IAAI,IAAI,CAAC,MAAM,EAAE;oBACf,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE;gBAChC;YACF;YACA,IAAI,CAAC,aAAa,CAAC,KAAK;YAExB,IAAI,CAAC,MAAM,CAAC,UAAU;YACtB,IAAI,CAAC,MAAM,GAAG;YACd,IAAI,CAAC,YAAY;QACnB;IACF;IAEA,4BAA4B;IACrB,UAAU,OAAe,EAAE,QAA4C,EAAQ;QACpF,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YAC1C,MAAM,IAAI,MAAM;QAClB;QAEA,oCAAoC;QACpC,IAAI,CAAC,WAAW,CAAC;QAEjB,2BAA2B;QAC3B,MAAM,eAAe,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,CAAC;YACjE,IAAI;gBACF,MAAM,gBAAgB,KAAK,KAAK,CAAC,QAAQ,IAAI;gBAC7C,SAAS;YACX,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,0BAA0B;YAC1C;QACF;QAEA,qBAAqB;QACrB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS;YAC9B,IAAI,aAAa,EAAE;YACnB;QACF;IACF;IAEA,2BAA2B;IACpB,YAAY,KAAa,EAAQ;QACtC,MAAM,eAAe,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC;QAC5C,IAAI,gBAAgB,IAAI,CAAC,MAAM,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;YACvC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QAC5B;IACF;IAEA,iBAAiB;IACV,YAAY,OAAe,EAAE,OAAwB,EAAQ;QAClE,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YAC1C,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAClB,aAAa,CAAC,UAAU,EAAE,SAAS;YACnC,MAAM,KAAK,SAAS,CAAC;QACvB;IACF;AACF;AAEO,eAAe,gBAAgB,KAAa;IACjD,IAAI;QACF,IAAI,SAAS,CAAC,oCAAoC,EAAE,OAAO;QAE3D,UAAU,CAAC,sBAAsB,CAAC;QAElC,0BAA0B;QAC1B,MAAM,WAAW,MAAM,MAAM,QAAQ;YACnC,QAAQ;QACV;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YACpE,OAAO,EAAE;QACX;QAEA,MAAM,OAA4B,MAAM,SAAS,IAAI;QAErD,8CAA8C;QAC9C,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC;YACd,OAAO,EAAE;QACX;QAEA,IAAI,CAAC,KAAK,IAAI,EAAE;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,EAAE;QACX;QAEA,OAAO,KAAK,IAAI,CAAC,WAAW;IAC9B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,EAAE;IACX;AACF;AAEO,eAAe,kBACpB,aAAqB,EACrB,KAAa,EACb,sBAAiC;IAEjC,IAAI;QACF,IAAI,SAAS,CAAC,8CAA8C,EAAE,cAAc,YAAY,EAAE,SAAS,IAAI;QAEvG,8BAA8B;QAC9B,IAAI,wBAAwB;YAC1B,MAAO,uBAAuB,MAAM,GAAG,EAAG;gBACxC,uCAAuC;gBACvC,UAAU,CAAC,wBAAwB,EAAE,uBAAuB,KAAK,IAAI;YACvE;QACF,OAAO;YACL,mBAAmB;YACnB,UAAU,CAAC,yBAAyB,CAAC;QACvC;QAEA,0BAA0B;QAC1B,MAAM,WAAW,MAAM,MAAM,QAAQ;YACnC,QAAQ;QACV;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YACpE,OAAO,EAAE;QACX;QAEA,MAAM,OAA+B,MAAM,SAAS,IAAI;QAExD,8CAA8C;QAC9C,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC;YACd,OAAO,EAAE;QACX;QAEA,IAAI,CAAC,KAAK,IAAI,EAAE;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,EAAE;QACX;QAEA,OAAO,KAAK,IAAI,CAAC,kBAAkB;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,EAAE;IACX;AACF;AAGO,MAAM,mBAAmB,IAAI","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/chats/ChatMessage.tsx"],"sourcesContent":["import { getProxyImageUrl } from \"@/utils/images\";\nimport { IncomingMessage } from \"@/utils/messaging\";\nimport { faBan, faAngleDown, faReply } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCheckSquare, faTrashAlt } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState } from \"react\";\n\nexport default function ChatMessage({\n  myUserId,\n  message,\n  isSelected = false,\n  onMessageClick,\n  handleDeleteOption,\n  handleSelectOption,\n  isInSelectionMode,\n  handleReplyOption,\n  handleScrollToMessage,\n  replyTo,\n  contactUsername,\n}: {\n  myUserId: number;\n  message: IncomingMessage;\n  isSelected?: boolean;\n  onMessageClick: (messageId: number) => void;\n  handleDeleteOption: (messageId: number) => void;\n  handleSelectOption: (messageId: number) => void;\n  isInSelectionMode: boolean;\n  handleReplyOption: (messageId: number) => void;\n  handleScrollToMessage: (messageId: number) => void;\n  replyTo?: IncomingMessage;\n  contactUsername: string;\n}) {\n  const [isHovering, setIsHovering] = useState(false);\n  const hasImages = message.imageAPIList && message.imageAPIList.length > 0;\n  const isOwner = message.userIdFrom === myUserId;\n\n  const handleClick = () => {\n    // Only allow selection of user's own messages\n    if (isOwner && onMessageClick && isInSelectionMode && message.messageId !== -1 && message.isActive) {\n      // Toggle selection state\n      onMessageClick(message.messageId);\n    }\n  };\n\n  const handleReplyPreviewClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (message.attachTo) {\n      handleScrollToMessage(message.attachTo);\n    }\n  };\n\n  const handleReplyAction = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (message.isActive && message.messageId !== -1) {\n      handleReplyOption(message.messageId);\n    }\n  };\n\n  const handleSelectAction = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (isOwner && message.isActive && message.messageId !== -1) {\n      handleSelectOption(message.messageId);\n    }\n  };\n\n  const handleDeleteAction = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (isOwner && message.isActive && message.messageId !== -1) {\n      handleDeleteOption(message.messageId);\n    }\n  };\n\n  return (\n    <div\n      id={message.messageId.toString()}\n      className={`chat ${isOwner ? \"chat-end\" : \"chat-start\"} ${isSelected ? \"bg-primary/20\" : \"\"}`}\n      onClick={handleClick} // selection toggling\n    >\n      <div\n        className={`chat-bubble relative ${\n          isOwner ? \"bg-primary text-primary-content\" : \"bg-neutral text-neutral-content\"\n        } font-medium text-sm break-words max-w-[85%] lg:max-w-[60%] ${isOwner ? \"flex-row\" : \"flex-row-reverse\"}`}\n        onMouseEnter={() => setIsHovering(true)}\n        onMouseLeave={() => setIsHovering(false)}\n      >\n        {/* Action Menu (Checkbox or Dropdown) */}\n        {message.isActive && message.messageId !== -1 && (\n          <div\n            className={`\n           absolute top-1/2 transform -translate-y-1/2\n           ${isOwner ? \"right-full mr-2\" : \"left-full ml-2\"}\n           z-10 flex items-center\n           transition-opacity duration-150\n           ${isHovering || isInSelectionMode ? \"opacity-100\" : \"opacity-0\"}\n          `}\n          >\n            {/* Show Checkbox when in selection mode */}\n            {isInSelectionMode ? (\n              <input type=\"checkbox\" className=\"checkbox\" checked={isSelected} readOnly />\n            ) : (\n              /* Show Dropdown Trigger when NOT in selection mode */\n              <div className={`dropdown ${isOwner ? \"dropdown-start\" : \"dropdown-end\"}`}>\n                <button tabIndex={0} role=\"button\" className=\"btn btn-circle btn-xs bg-base-100\">\n                  <FontAwesomeIcon icon={faAngleDown} />\n                </button>\n                <ul\n                  tabIndex={0}\n                  className=\"dropdown-content menu rounded-box w-26 shadow text-base-content bg-base-100\"\n                >\n                  <li>\n                    <a onClick={handleReplyAction}>\n                      <FontAwesomeIcon icon={faReply} />\n                      Reply\n                    </a>\n                  </li>\n                  {isOwner && (\n                    <>\n                      <li>\n                        <a onClick={handleSelectAction}>\n                          <FontAwesomeIcon icon={faCheckSquare} />\n                          Select\n                        </a>\n                      </li>\n\n                      <li>\n                        <a onClick={handleDeleteAction} className=\"text-error/80\">\n                          <FontAwesomeIcon icon={faTrashAlt} />\n                          Delete\n                        </a>\n                      </li>\n                    </>\n                  )}\n                </ul>\n              </div>\n            )}\n          </div>\n        )}\n        {message.isActive ? (\n          <div className=\"flex flex-col gap-1\">\n            {/* Reply Preview Section */}\n            {replyTo && message.attachTo !== 0 && (\n              <div\n                className={`bg-base-100/50 p-2 rounded-md cursor-pointer border-l-4 text-base-content border-secondary \" \n                `}\n                onClick={handleReplyPreviewClick}\n              >\n                <p className=\"font-semibold text-xs opacity-90\">\n                  {replyTo.userIdFrom === myUserId ? \"You\" : contactUsername}\n                </p>\n                <p className=\"text-xs opacity-80 truncate\">\n                  {replyTo.content ? replyTo.content : <span className=\"italic opacity-80\">Image</span>}\n                </p>\n              </div>\n            )}\n            {/* Display images if they exist */}\n            {hasImages && (\n              <div className={`grid gap-1 ${message.imageAPIList!.length > 1 ? \"grid-cols-2\" : \"grid-cols-1\"}`}>\n                {message.imageAPIList!.map((imageUrl, index) => (\n                  <img\n                    key={index}\n                    src={imageUrl.startsWith(\"blob:\") ? imageUrl : getProxyImageUrl(imageUrl)}\n                    alt={`Message image ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                    loading=\"lazy\"\n                  />\n                ))}\n              </div>\n            )}\n            {message.content}\n          </div>\n        ) : (\n          <span className=\"opacity-50 italic font-bold\">\n            <FontAwesomeIcon icon={faBan} className=\"mr-2\" />\n            Message has been deleted\n          </span>\n        )}\n      </div>\n      <div className=\"chat-footer opacity-50\">\n        {isOwner && (\n          <div className=\"font-bold\">{message.readAt ? \"Seen\" : message.messageId === -1 ? \"Sending\" : \"Sent\"}</div>\n        )}\n        {new Date(message.sentAt).toLocaleString(undefined, {\n          year: \"2-digit\",\n          month: \"numeric\",\n          day: \"numeric\",\n          hour: \"numeric\",\n          minute: \"numeric\",\n        })}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;AAEe,SAAS,YAAY,EAClC,QAAQ,EACR,OAAO,EACP,aAAa,KAAK,EAClB,cAAc,EACd,kBAAkB,EAClB,kBAAkB,EAClB,iBAAiB,EACjB,iBAAiB,EACjB,qBAAqB,EACrB,OAAO,EACP,eAAe,EAahB;;IACC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,YAAY,QAAQ,YAAY,IAAI,QAAQ,YAAY,CAAC,MAAM,GAAG;IACxE,MAAM,UAAU,QAAQ,UAAU,KAAK;IAEvC,MAAM,cAAc;QAClB,8CAA8C;QAC9C,IAAI,WAAW,kBAAkB,qBAAqB,QAAQ,SAAS,KAAK,CAAC,KAAK,QAAQ,QAAQ,EAAE;YAClG,yBAAyB;YACzB,eAAe,QAAQ,SAAS;QAClC;IACF;IAEA,MAAM,0BAA0B,CAAC;QAC/B,EAAE,eAAe;QACjB,IAAI,QAAQ,QAAQ,EAAE;YACpB,sBAAsB,QAAQ,QAAQ;QACxC;IACF;IAEA,MAAM,oBAAoB,CAAC;QACzB,EAAE,eAAe;QACjB,IAAI,QAAQ,QAAQ,IAAI,QAAQ,SAAS,KAAK,CAAC,GAAG;YAChD,kBAAkB,QAAQ,SAAS;QACrC;IACF;IAEA,MAAM,qBAAqB,CAAC;QAC1B,EAAE,eAAe;QACjB,IAAI,WAAW,QAAQ,QAAQ,IAAI,QAAQ,SAAS,KAAK,CAAC,GAAG;YAC3D,mBAAmB,QAAQ,SAAS;QACtC;IACF;IAEA,MAAM,qBAAqB,CAAC;QAC1B,EAAE,eAAe;QACjB,IAAI,WAAW,QAAQ,QAAQ,IAAI,QAAQ,SAAS,KAAK,CAAC,GAAG;YAC3D,mBAAmB,QAAQ,SAAS;QACtC;IACF;IAEA,qBACE,6LAAC;QACC,IAAI,QAAQ,SAAS,CAAC,QAAQ;QAC9B,WAAW,CAAC,KAAK,EAAE,UAAU,aAAa,aAAa,CAAC,EAAE,aAAa,kBAAkB,IAAI;QAC7F,SAAS;;0BAET,6LAAC;gBACC,WAAW,CAAC,qBAAqB,EAC/B,UAAU,oCAAoC,kCAC/C,4DAA4D,EAAE,UAAU,aAAa,oBAAoB;gBAC1G,cAAc,IAAM,cAAc;gBAClC,cAAc,IAAM,cAAc;;oBAGjC,QAAQ,QAAQ,IAAI,QAAQ,SAAS,KAAK,CAAC,mBAC1C,6LAAC;wBACC,WAAW,CAAC;;WAEb,EAAE,UAAU,oBAAoB,iBAAiB;;;WAGjD,EAAE,cAAc,oBAAoB,gBAAgB,YAAY;UACjE,CAAC;kCAGE,kCACC,6LAAC;4BAAM,MAAK;4BAAW,WAAU;4BAAW,SAAS;4BAAY,QAAQ;;;;;mCAEzE,oDAAoD,iBACpD,6LAAC;4BAAI,WAAW,CAAC,SAAS,EAAE,UAAU,mBAAmB,gBAAgB;;8CACvE,6LAAC;oCAAO,UAAU;oCAAG,MAAK;oCAAS,WAAU;8CAC3C,cAAA,6LAAC,uKAAA,CAAA,kBAAe;wCAAC,MAAM,2KAAA,CAAA,cAAW;;;;;;;;;;;8CAEpC,6LAAC;oCACC,UAAU;oCACV,WAAU;;sDAEV,6LAAC;sDACC,cAAA,6LAAC;gDAAE,SAAS;;kEACV,6LAAC,uKAAA,CAAA,kBAAe;wDAAC,MAAM,2KAAA,CAAA,UAAO;;;;;;oDAAI;;;;;;;;;;;;wCAIrC,yBACC;;8DACE,6LAAC;8DACC,cAAA,6LAAC;wDAAE,SAAS;;0EACV,6LAAC,uKAAA,CAAA,kBAAe;gEAAC,MAAM,6KAAA,CAAA,gBAAa;;;;;;4DAAI;;;;;;;;;;;;8DAK5C,6LAAC;8DACC,cAAA,6LAAC;wDAAE,SAAS;wDAAoB,WAAU;;0EACxC,6LAAC,uKAAA,CAAA,kBAAe;gEAAC,MAAM,6KAAA,CAAA,aAAU;;;;;;4DAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAWtD,QAAQ,QAAQ,iBACf,6LAAC;wBAAI,WAAU;;4BAEZ,WAAW,QAAQ,QAAQ,KAAK,mBAC/B,6LAAC;gCACC,WAAW,CAAC;gBACZ,CAAC;gCACD,SAAS;;kDAET,6LAAC;wCAAE,WAAU;kDACV,QAAQ,UAAU,KAAK,WAAW,QAAQ;;;;;;kDAE7C,6LAAC;wCAAE,WAAU;kDACV,QAAQ,OAAO,GAAG,QAAQ,OAAO,iBAAG,6LAAC;4CAAK,WAAU;sDAAoB;;;;;;;;;;;;;;;;;4BAK9E,2BACC,6LAAC;gCAAI,WAAW,CAAC,WAAW,EAAE,QAAQ,YAAY,CAAE,MAAM,GAAG,IAAI,gBAAgB,eAAe;0CAC7F,QAAQ,YAAY,CAAE,GAAG,CAAC,CAAC,UAAU,sBACpC,6LAAC;wCAEC,KAAK,SAAS,UAAU,CAAC,WAAW,WAAW,CAAA,GAAA,yHAAA,CAAA,mBAAgB,AAAD,EAAE;wCAChE,KAAK,CAAC,cAAc,EAAE,QAAQ,GAAG;wCACjC,WAAU;wCACV,SAAQ;uCAJH;;;;;;;;;;4BASZ,QAAQ,OAAO;;;;;;6CAGlB,6LAAC;wBAAK,WAAU;;0CACd,6LAAC,uKAAA,CAAA,kBAAe;gCAAC,MAAM,2KAAA,CAAA,QAAK;gCAAE,WAAU;;;;;;4BAAS;;;;;;;;;;;;;0BAKvD,6LAAC;gBAAI,WAAU;;oBACZ,yBACC,6LAAC;wBAAI,WAAU;kCAAa,QAAQ,MAAM,GAAG,SAAS,QAAQ,SAAS,KAAK,CAAC,IAAI,YAAY;;;;;;oBAE9F,IAAI,KAAK,QAAQ,MAAM,EAAE,cAAc,CAAC,WAAW;wBAClD,MAAM;wBACN,OAAO;wBACP,KAAK;wBACL,MAAM;wBACN,QAAQ;oBACV;;;;;;;;;;;;;AAIR;GAxLwB;KAAA","debugId":null}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/chats/LoadingContact.tsx"],"sourcesContent":["export default function LoadingContact() {\n  return (\n    <li className=\"flex items-center gap-3 p-4 border-b border-base-200\">\n      <div className=\"skeleton w-10 h-10 rounded-full bg-base-300\"></div>\n      <div className=\"flex flex-col gap-2 flex-1\">\n        <div className=\"skeleton h-4 w-24 bg-base-300\"></div>\n        <div className=\"skeleton h-3 w-32 bg-base-300\"></div>\n      </div>\n    </li>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAe,SAAS;IACtB,qBACE,6LAAC;QAAG,WAAU;;0BACZ,6LAAC;gBAAI,WAAU;;;;;;0BACf,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;;;;;kCACf,6LAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;;AAIvB;KAVwB","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///Users/edwin/Desktop/CSCI3100_Project/src/components/chats/Messenger.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  faFileImage,\n  faTrashAlt,\n  faMagnifyingGlass,\n  faImages,\n  faMinus,\n  faXmark,\n  faArrowLeft,\n  faAngleDown,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faCheckSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Link from \"next/link\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useSession } from \"@/hooks/useSession\";\nimport {\n  ConnectionStatus,\n  IncomingMessage,\n  messagingService,\n  Contact,\n  getContactsList,\n  getMessageHistory,\n} from \"@/utils/messaging\";\nimport ChatMessage from \"@/components/chats/ChatMessage\";\nimport LoadingContact from \"@/components/chats/LoadingContact\";\nimport UserAvatar from \"@/components/users/UserAvatar\";\nimport { uploadImage } from \"@/utils/images\";\n\nexport default function Messenger() {\n  const { session } = useSession();\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [selectedContact, setSelectedContact] = useState<Contact>();\n  const [conversation, setConversation] = useState<IncomingMessage[]>([]);\n  const [messageText, setMessageText] = useState(\"\");\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>(messagingService.getStatus());\n  const [inSelection, setInSelection] = useState(false);\n  const [selectedMessages, setSelectedMessages] = useState<Set<number>>(new Set());\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [filePreviews, setFilePreviews] = useState<string[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const conversationRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMoreMessages, setIsLoadingMoreMessages] = useState(false);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const messageLoaderRef = useRef<HTMLDivElement>(null);\n  const [excludedMessageIds, setExcludedMessageIds] = useState<Set<number>>(new Set());\n  const connectRetryTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const [replyTo, setReplyTo] = useState<IncomingMessage | null>(null);\n  const [scrollingToMessageId, setScrollingToMessageId] = useState<number | null>(null);\n  const [showConversation, setShowConversation] = useState(false);\n  const [showScrollToBottom, setShowScrollToBottom] = useState(false);\n\n  const handleImageSelect: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const newFiles = Array.from(e.target.files || []);\n    if (newFiles.length === 0) return; // Do nothing if no files selected\n\n    // Append new files to the existing selection\n    setSelectedFiles((prevFiles) => [...prevFiles, ...newFiles]);\n\n    // Create object URLs only for the newly added files and append them\n    const newPreviews = newFiles.map((f) => URL.createObjectURL(f));\n    setFilePreviews((prevPreviews) => [...prevPreviews, ...newPreviews]);\n\n    // Clear the file input value to allow selecting the same file again if needed\n    if (e.target) {\n      e.target.value = \"\";\n    }\n  };\n\n  const removeImagePreview = (indexToRemove: number) => {\n    setSelectedFiles((prevFiles) => prevFiles.filter((_, index) => index !== indexToRemove));\n    setFilePreviews((prevPreviews) => {\n      const newPreviews = prevPreviews.filter((_, index) => index !== indexToRemove);\n      // Revoke the object URL for the removed preview to free memory\n      URL.revokeObjectURL(prevPreviews[indexToRemove]);\n      return newPreviews;\n    });\n  };\n\n  // Cleanup object URLs on component unmount\n  useEffect(() => {\n    return () => {\n      filePreviews.forEach((url) => URL.revokeObjectURL(url));\n    };\n  }, [filePreviews]);\n\n  // Keep a ref of the selected contact such that it can be used in the message subscription callback\n  const selectedContactRef = useRef<Contact | undefined>(undefined);\n  useEffect(() => {\n    selectedContactRef.current = selectedContact;\n  }, [selectedContact]);\n\n  const handleContactSelect = async (contact: Contact) => {\n    setSelectedContact(contact);\n    setShowConversation(true); // Show conversation on mobile\n    setConversation([]); // Clear previous conversation\n    setIsLoadingMoreMessages(true); // Show loading indicator\n    setHasMoreMessages(true); // Reset hasMore flag\n    try {\n      const messageHistory = await getMessageHistory(contact.contactUserId, 15);\n      setConversation(messageHistory);\n\n      // Add fetched message IDs to excludedMessageIds\n      const newExcludedIds = new Set<number>();\n      messageHistory.forEach((message) => newExcludedIds.add(Number(message.messageId)));\n      setExcludedMessageIds(newExcludedIds);\n    } catch (error) {\n      console.error(\"Error fetching message history:\", error);\n      setHasMoreMessages(false); // Assume no more messages on error\n    } finally {\n      setIsLoadingMoreMessages(false);\n    }\n  };\n\n  // Function to load older messages\n  const loadMoreMessages = useCallback(async () => {\n    if (isLoadingMoreMessages || !hasMoreMessages || !selectedContact || conversation.length === 0) return;\n\n    setIsLoadingMoreMessages(true);\n    try {\n      // Fetch older messages\n      const olderMessages = await getMessageHistory(selectedContact.contactUserId, 15, Array.from(excludedMessageIds));\n\n      // Update excludedMessageIds with new messages\n      setExcludedMessageIds((prevExcludedIds) => {\n        const newExcludedIds = new Set(prevExcludedIds);\n        olderMessages.forEach((message) => newExcludedIds.add(Number(message.messageId)));\n        return newExcludedIds;\n      });\n\n      if (olderMessages.length > 0) {\n        setConversation((prev) => [...prev, ...olderMessages]); // Append older messages\n      } else {\n        setHasMoreMessages(false); // No more messages to load\n      }\n    } catch (error) {\n      console.error(\"Failed to load more messages:\", error);\n      setHasMoreMessages(false); // Stop trying on error\n    } finally {\n      setIsLoadingMoreMessages(false);\n    }\n  }, [isLoadingMoreMessages, hasMoreMessages, selectedContact, conversation]);\n\n  // Infinite scrolling setup for messages\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && hasMoreMessages && !isLoadingMoreMessages) {\n          loadMoreMessages();\n        }\n      },\n      {\n        root: conversationRef.current, // Observe within the scrollable container\n        threshold: 0.1,\n      }\n    );\n\n    const currentLoaderRef = messageLoaderRef.current;\n    if (currentLoaderRef) {\n      observer.observe(currentLoaderRef);\n    }\n\n    return () => {\n      if (currentLoaderRef) {\n        observer.unobserve(currentLoaderRef);\n      }\n    };\n  }, [hasMoreMessages, isLoadingMoreMessages, loadMoreMessages]);\n\n  // Connect to the messaging service with retry logic\n  const connectWithRetry = useCallback(\n    async (attempt = 1): Promise<void> => {\n      // Clear any existing retry timeout\n      if (connectRetryTimeoutRef.current) {\n        clearTimeout(connectRetryTimeoutRef.current);\n        connectRetryTimeoutRef.current = null;\n      }\n\n      if (messagingService.getStatus() === ConnectionStatus.CONNECTED) {\n        console.log(\"Already connected.\");\n        return;\n      }\n      if (attempt > 20) {\n        // Limit retries\n        console.error(\"WebSocket connection failed after multiple attempts.\");\n        setConnectionStatus(ConnectionStatus.ERROR); // Set error state explicitly\n        return;\n      }\n\n      setConnectionStatus(ConnectionStatus.CONNECTING); // Ensure status is connecting\n\n      try {\n        await messagingService.connect(session.token!);\n      } catch (error) {\n        connectRetryTimeoutRef.current = setTimeout(() => connectWithRetry(attempt + 1), 500);\n      }\n    },\n    [session.token]\n  );\n\n  const fetchContacts = useCallback(async () => {\n    // Don't fetch if not connected or already loading\n    if (messagingService.getStatus() !== ConnectionStatus.CONNECTED) {\n      console.log(\"Skipping fetchContacts:\", { status: messagingService.getStatus() });\n      return;\n    }\n    try {\n      const fetchedContacts = await getContactsList(20);\n      setContacts(fetchedContacts.filter((contact) => !contact.isContactUserBlocked));\n    } catch (error) {\n      console.error(\"Error fetching contacts:\", error);\n      setContacts([]); // Clear contacts on error\n    }\n  }, [ConnectionStatus]);\n\n  // Connect to websocket\n  useEffect(() => {\n    if (!session.isLoggedIn || !session.token || !session.userId) {\n      // If session is lost, disconnect and clear state\n      messagingService.disconnect();\n      setContacts([]);\n      setSelectedContact(undefined);\n      setConversation([]);\n      return;\n    }\n\n    // Subscribe to status changes\n    const unsubscribeStatus = messagingService.onStatusChange(setConnectionStatus);\n\n    // Attempt initial connection if disconnected\n    if (messagingService.getStatus() === ConnectionStatus.DISCONNECTED) {\n      connectWithRetry();\n    }\n\n    // Cleanup function\n    return () => {\n      unsubscribeStatus();\n      // Clear any pending retry timeout on component unmount or session change\n      if (connectRetryTimeoutRef.current) {\n        clearTimeout(connectRetryTimeoutRef.current);\n      }\n    };\n  }, [session.isLoggedIn, session.token, session.userId, connectWithRetry]);\n\n  // Subscribe to user channel and fetch contacts\n  useEffect(() => {\n    if (connectionStatus === ConnectionStatus.CONNECTED && session.userId) {\n      // Subscribe to user channel\n      messagingService.subscribe(`${session.userId}`, (message) => {\n        const messageDetail = message.messageDetail;\n        const currentContact = selectedContactRef.current;\n        console.log(\"Received message:\", message);\n        // Update contacts list\n        fetchContacts();\n        if (currentContact) {\n          switch (message.action) {\n            case \"send\":\n              // Message from self (replace temp)\n              if (messageDetail.userIdFrom === session.userId) {\n                setConversation((prev) =>\n                  prev.map((m) =>\n                    m.messageId === -1 && m.content === messageDetail.content // More specific check\n                      ? messageDetail\n                      : m\n                  )\n                );\n              }\n              // Message from selected contact\n              else if (messageDetail.userIdFrom === currentContact.contactUserId) {\n                setConversation((prev) => [messageDetail, ...prev]); // Prepend for flex-reverse\n                readMessages([messageDetail]); // Mark as read\n              }\n              // Message from *another* contact - update contact list state\n              else {\n                console.log(\"Message from another contact, fetching updated contacts list...\");\n                fetchContacts(); // Fetch contacts if message is from someone else\n              }\n              break;\n            case \"read\":\n              setConversation((prev) =>\n                prev.map((m) =>\n                  message.readOrDeleteMessageIdList?.includes(m.messageId) ? { ...m, readAt: message.time } : m\n                )\n              );\n              break;\n            case \"delete\":\n              setConversation((prev) =>\n                prev.map((m) =>\n                  message.readOrDeleteMessageIdList?.includes(m.messageId) ? { ...m, isActive: false } : m\n                )\n              );\n              break;\n          }\n        } else {\n          // Message received, but no contact selected. Update contacts list.\n          fetchContacts();\n        }\n      });\n\n      // Fetch initial contacts after successful connection and subscription setup\n      fetchContacts();\n\n      // Cleanup for this effect: Unsubscribe when status is no longer CONNECTED or userId changes\n      return () => {\n        messagingService.unsubscribe(`/channel/${session.userId}`);\n      };\n    }\n  }, [connectionStatus, session.userId, fetchContacts]);\n\n  // Mark messages as read when contact is selected or when new messages arrive\n  useEffect(() => {\n    if (selectedContact && conversation.length > 0 && connectionStatus === ConnectionStatus.CONNECTED) {\n      readMessages(conversation);\n    }\n  }, [selectedContact, conversation]);\n\n  const scrollToBottom = (behavior: ScrollBehavior = \"smooth\") => {\n    if (conversationRef.current) {\n      // Scroll the container itself to the bottom\n      conversationRef.current.scrollTo({\n        top: conversationRef.current.scrollHeight,\n        behavior: behavior,\n      });\n    }\n  };\n\n  const handleScroll = useCallback(() => {\n    const currentDiv = conversationRef.current;\n    if (currentDiv) {\n      const { scrollTop } = currentDiv;\n\n      const threshold = -100; // Pixels from bottom\n\n      if (scrollTop < threshold) {\n        setShowScrollToBottom(true);\n      } else {\n        setShowScrollToBottom(false);\n      }\n    }\n  }, [setShowScrollToBottom]);\n\n  // Handle scroll events for showing/hiding the button\n  useEffect(() => {\n    const conversationDiv = conversationRef.current;\n\n    // Only add listener if the div exists\n    if (conversationDiv) {\n      conversationDiv.addEventListener(\"scroll\", handleScroll, { passive: true });\n\n      // Initial check right after attaching\n      handleScroll();\n\n      // Cleanup function specific to this effect run\n      return () => {\n        conversationDiv.removeEventListener(\"scroll\", handleScroll);\n        // Reset button state when contact changes or unmounts\n        setShowScrollToBottom(false);\n      };\n    } else {\n      // No cleanup needed if listener wasn't attached\n      return () => {\n        // Reset button state if effect re-runs and div is no longer there\n        setShowScrollToBottom(false);\n      };\n    }\n  }, [selectedContact]);\n\n  // Send message function\n  const sendMessage = async () => {\n    // Allow sending only images without text\n    if (!messageText.trim() && selectedFiles.length === 0) return;\n    if (!session.userId || !selectedContact) return;\n\n    let uploadedImageIds: number[] = [];\n    let tempImageUrls: string[] = [...filePreviews];\n\n    // Upload images if selected\n    if (selectedFiles.length > 0) {\n      try {\n        // Show loading state for images\n        const uploadPromises = selectedFiles.map((file) => uploadImage(file));\n        const uploadResults = await Promise.all(uploadPromises);\n\n        // Filter out failed uploads and get IDs\n        uploadedImageIds = uploadResults.filter((result) => result.imageId !== 0).map((result) => result.imageId);\n\n        if (uploadedImageIds.length !== selectedFiles.length) {\n          console.warn(\"Some images failed to upload.\");\n          // Handle failed uploads (e.g., show error message)\n          // For now, we'll just send the successfully uploaded ones\n        }\n      } catch (error) {\n        console.error(\"Error during image upload process:\", error);\n        // Handle upload errors (e.g., show error message to user)\n        return; // Stop message sending if uploads fail critically\n      }\n    }\n\n    // No message text and no successfully uploaded images\n    if (!messageText.trim() && uploadedImageIds.length === 0) {\n      console.log(\"No text or successfully uploaded images to send.\");\n      // Clear potentially failed previews if only images were selected and all failed\n      if (selectedFiles.length > 0) {\n        setSelectedFiles([]);\n        setFilePreviews([]);\n      }\n      return;\n    }\n\n    try {\n      // Create a temporary message object for immediate display\n      const tempMessage: IncomingMessage = {\n        messageId: -1, // Temporary ID\n        userIdFrom: session.userId,\n        userIdTo: selectedContact.contactUserId,\n        content: messageText,\n        isActive: true,\n        attachTo: replyTo ? replyTo.messageId : 0,\n        sentAt: new Date().toISOString(),\n        readAt: null,\n        imageAPIList: tempImageUrls.length > 0 ? tempImageUrls : null,\n      };\n\n      // Add to UI immediately\n      setConversation((prev) => [tempMessage, ...prev]);\n      // Scroll to the bottom of the conversation\n      scrollToBottom(\"smooth\");\n\n      // Send to server\n      messagingService.sendMessage(`${session.userId}`, {\n        userIdFrom: session.userId,\n        userIdTo: selectedContact.contactUserId,\n        content: messageText,\n        attachTo: replyTo ? replyTo.messageId : 0,\n        imageIdList: uploadedImageIds.length > 0 ? uploadedImageIds : [],\n        action: \"send\",\n        messageIdList: [],\n      });\n\n      setMessageText(\"\");\n      setSelectedFiles([]);\n      setFilePreviews([]);\n      setReplyTo(null);\n      // Revoke object URLs for previews that were just sent\n      tempImageUrls.forEach((url) => URL.revokeObjectURL(url));\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n    }\n  };\n\n  const readMessages = (messages: IncomingMessage[]) => {\n    if (!session.userId || !selectedContact) return;\n\n    // Filter unread messages received from the other user\n    const unreadMessages = messages.filter(\n      (msg) => !msg.readAt && msg.userIdFrom === selectedContact.contactUserId && msg.userIdTo === session.userId\n    );\n\n    if (unreadMessages.length === 0) return;\n\n    // Extract message IDs\n    const messageIds = unreadMessages.map((msg) => msg.messageId);\n\n    try {\n      messagingService.sendMessage(`${session.userId}`, {\n        userIdFrom: session.userId,\n        userIdTo: selectedContact.contactUserId,\n        content: null,\n        attachTo: null,\n        imageIdList: null,\n        action: \"read\",\n        messageIdList: messageIds,\n      });\n    } catch (error) {\n      console.error(\"Failed to mark messages as read:\", error);\n    }\n  };\n\n  const deleteMessages = (messageId?: number) => {\n    if (!session.userId || !selectedContact) return;\n\n    // If messageId is provided (from using delete dropdown option), delete that specific message\n    const messageIds = messageId ? [messageId] : Array.from(selectedMessages);\n\n    try {\n      messagingService.sendMessage(`${session.userId}`, {\n        userIdFrom: session.userId,\n        userIdTo: selectedContact.contactUserId,\n        content: null,\n        attachTo: null,\n        imageIdList: null,\n        action: \"delete\",\n        messageIdList: messageIds,\n      });\n\n      // Exit selection mode\n      setInSelection(false);\n      setSelectedMessages(new Set());\n    } catch (error) {\n      console.error(\"Failed to delete messages:\", error);\n    }\n  };\n\n  const toggleSelection = (messageId: number) => {\n    if (!inSelection) return;\n\n    setSelectedMessages((prev) => {\n      const newSelection = new Set(prev);\n      if (newSelection.has(messageId)) {\n        newSelection.delete(messageId);\n      } else {\n        newSelection.add(messageId);\n      }\n      return newSelection;\n    });\n  };\n\n  const handleSelectionButton = (messageId?: number) => {\n    setInSelection(!inSelection);\n\n    if (messageId) {\n      // If a message ID is provided, select that message\n      setSelectedMessages(new Set([messageId]));\n    } else {\n      // If no message ID is provided, clear the selection\n      setSelectedMessages(new Set());\n    }\n  };\n\n  const handleScrollToMessage = (messageId: number) => {\n    const element = document.getElementById(`${messageId}`);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n      // Highlight\n      element.classList.add(\"bg-info/20\", \"transition-colors\", \"duration-1000\");\n      setTimeout(() => {\n        element.classList.remove(\"bg-info/20\", \"transition-colors\", \"duration-1000\");\n      }, 1000);\n    } else {\n      // If not found, set the target ID to trigger the useEffect loader\n      setScrollingToMessageId(messageId);\n    }\n  };\n\n  // handle loading and scrolling when target is set\n  useEffect(() => {\n    // Only run if we have a target ID and are not currently loading messages\n    if (scrollingToMessageId === null || isLoadingMoreMessages) {\n      return;\n    }\n\n    const targetElement = document.getElementById(`${scrollingToMessageId}`);\n\n    if (targetElement) {\n      targetElement.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n      // Highlight the message\n      targetElement.classList.add(\"bg-primary/20\", \"transition-colors\", \"duration-1000\");\n      setTimeout(() => {\n        targetElement.classList.remove(\"bg-primary/20\", \"transition-colors\", \"duration-1000\");\n      }, 1000);\n\n      // Reset the target ID\n      setScrollingToMessageId(null);\n    } else {\n      // Message still not found, check if more messages can be loaded\n      if (hasMoreMessages) {\n        // Trigger loading more messages\n        loadMoreMessages();\n      } else {\n        // No more messages to load, and the target wasn't found\n        setScrollingToMessageId(null); // Reset the target ID\n      }\n    }\n  }, [scrollingToMessageId, isLoadingMoreMessages, conversation, hasMoreMessages, loadMoreMessages]);\n\n  // Function to go back to contact list on mobile\n  const handleBackButton = () => {\n    setShowConversation(false);\n    setSelectedContact(undefined);\n    setConversation([]);\n  };\n\n  const searchUser = async (uid: string) => {\n    if (!session.userId || !session.token) return;\n\n    const userId = parseInt(uid, 10);\n\n    try {\n      // Check if we already have a conversation with this user\n      const existingContact = contacts.find((contact) => contact.contactUserId === userId);\n\n      if (existingContact) {\n        // If we already have a conversation, just select it\n        setSelectedContact(existingContact);\n        setSearchInput(\"\");\n        return;\n      }\n\n      // Create a new temporary contact\n      const newContact: Contact = {\n        messageId: -1, // Temporary ID\n        contactUserId: userId,\n        contactUsername: \"Unknown User\",\n        contactUserAvatar: null,\n        isContactUserBlocked: false,\n        latestMessage:\n          \"This is a temp contact, a real contact can be created using the Get Search User Result API. Reload the page after sending a message to get a real contact for now\",\n        userIdFrom: userId,\n        usernameFrom: \"\",\n        userIdTo: -1,\n        usernameTo: \"\",\n        sentAt: \"\",\n        readAt: \"\",\n        unreadMessageCount: 0,\n      };\n\n      // Update the contacts list and select the new contact\n      setContacts((prev) => [newContact, ...prev]);\n      setSelectedContact(newContact);\n      setConversation([]);\n      setSearchInput(\"\");\n    } catch (error) {\n      console.error(\"Error searching for user:\", error);\n    }\n  };\n\n  const handleSearchKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      searchUser(searchInput);\n    }\n  };\n\n  return (\n    <div className=\"flex h-full\">\n      {/* Left column */}\n      <div className=\"hidden lg:block w-1/8\"></div>\n      {/* Middle column - Direct message content */}\n      <div className=\"bg-base-200 min-h-full flex flex-grow w-6/8 shadow-lg\">\n        {/* Contact List (Left)*/}\n        <div\n          className={`w-full lg:w-1/3 flex flex-col bg-base-100 shadow-md ${\n            showConversation ? \"hidden md:flex\" : \"flex\"\n          }`}\n        >\n          <div className=\"flex flex-col p-2 gap-2\">\n            <h1 className=\"text-3xl font-bold mt-6\">Contacts</h1>\n            <div className=\"my-2 flex items-center gap-2\">\n              <span className=\"text-sm font-medium\">Status:</span>\n              <span\n                className={`badge ${\n                  connectionStatus === ConnectionStatus.CONNECTED\n                    ? \"badge-success\"\n                    : connectionStatus === ConnectionStatus.CONNECTING\n                    ? \"badge-warning\"\n                    : \"badge-error\"\n                } badge-sm`}\n              >\n                {connectionStatus.toLowerCase()}\n              </span>\n            </div>\n            {/* Search bar */}\n            <div className=\"relative bg-base-200 rounded-full p-1\">\n              <FontAwesomeIcon\n                icon={faMagnifyingGlass}\n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-base-content/50\"\n              />\n              <input\n                type=\"text\"\n                placeholder=\"Enter user ID to create a new chat for now\"\n                // placeholder=\"Search Contacts\"\n                className=\"w-full h-full rounded-full text-sm pl-8 pr-3\"\n                onChange={(e) => setSearchInput(e.target.value)}\n                onKeyDown={handleSearchKeyDown}\n              />\n            </div>\n          </div>\n          <ul className=\"list overflow-y-auto\">\n            {/* Please create a contact component */}\n            {connectionStatus !== ConnectionStatus.CONNECTED ? (\n              [1, 2, 3, 4, 5, 6].map((item) => <LoadingContact key={item} />)\n            ) : contacts.length === 0 ? (\n              <p className=\"text-base-content/50 text-center mt-4 break-words text-wrap mx-16\">\n                Start a new conversation with someone to get started\n              </p>\n            ) : (\n              contacts.map((contact) => (\n                <li\n                  key={contact.contactUserId}\n                  className={`cursor-pointer p-2 hover:bg-base-200 ${\n                    selectedContact?.contactUserId === contact.contactUserId ? \"bg-base-200\" : \"\"\n                  }`}\n                  onClick={() => handleContactSelect(contact)}\n                >\n                  <UserAvatar src={contact.contactUserAvatar} username={contact.contactUsername} size=\"lg\" />\n                  <div className=\"flex justify-between items-center text-md\">\n                    <span className=\"truncate\">\n                      {contact.userIdFrom === session.userId ? \"You: \" : \"\"}\n\n                      {contact.latestMessage ? (\n                        contact.latestMessage\n                      ) : (\n                        <span className=\"italic opacity-80\">\n                          <FontAwesomeIcon icon={faFileImage} /> Image\n                        </span>\n                      )}\n                    </span>\n                    {contact.unreadMessageCount > 0 && (\n                      <span className=\"badge badge-info badge-sm text-info-content\">{contact.unreadMessageCount}</span>\n                    )}\n                  </div>\n                </li>\n              ))\n            )}\n          </ul>\n        </div>\n        {/* Conversation (Right) */}\n        <div className={`w-full lg:w-2/3 flex flex-col ${showConversation ? \"flex\" : \"hidden md:flex\"}`}>\n          {selectedContact ? (\n            <div className=\"relative overflow-y-auto flex flex-col flex-grow\">\n              {/* Header with contact info and action buttons */}\n              <div className=\"flex h-14 justify-between items-center bg-base-100 shadow-md p-2\">\n                <div className=\"flex items-center gap-1\">\n                  {/* Back Button */}\n                  <button className=\"btn btn-ghost btn-circle btn-sm\" onClick={handleBackButton}>\n                    <FontAwesomeIcon icon={faArrowLeft} size=\"xl\" />\n                  </button>\n                  {/* Contact info and avatar */}\n                  <Link href={`/profile/${selectedContact.contactUserId}`}>\n                    <div className=\"avatar items-center gap-2\">\n                      <div className=\"bg-neutral text-neutral-content place-content-center rounded-full w-10\">\n                        {/* <FontAwesomeIcon icon={faUser} /> */}\n                      </div>\n                      <span className=\"text-md\">{selectedContact.contactUsername}</span>\n                    </div>\n                  </Link>\n                </div>\n                {/* Action buttons */}\n                <div className=\"flex gap-2 items-center\">\n                  {inSelection ? (\n                    <>\n                      {/* Show count and delete/cancel buttons when in selection mode */}\n                      <span className=\"text-sm font-medium mr-2\">{selectedMessages.size} selected</span>\n                      {selectedMessages.size > 0 && (\n                        <button\n                          className=\"btn btn-soft btn-error btn-sm\"\n                          onClick={() => deleteMessages()}\n                          aria-label=\"Delete selected messages\"\n                        >\n                          <FontAwesomeIcon icon={faTrashAlt} />\n                          Delete\n                        </button>\n                      )}\n                      <button\n                        className=\"btn btn-sm\"\n                        onClick={() => handleSelectionButton()}\n                        aria-label=\"Cancel selection\"\n                      >\n                        Cancel\n                      </button>\n                    </>\n                  ) : (\n                    <>\n                      {/* Enter selection mode */}\n                      <button\n                        className=\"btn btn-sm btn-ghost\"\n                        onClick={() => handleSelectionButton()}\n                        aria-label=\"Select messages\"\n                      >\n                        <FontAwesomeIcon icon={faCheckSquare} size=\"xl\" />\n                      </button>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {/* Messages */}\n              <div ref={conversationRef} className=\"flex flex-col-reverse flex-grow overflow-y-auto\">\n                {/* Map messages */}\n                {conversation.map((message) => {\n                  // Find the original message if this is a reply\n                  let originalMessage: IncomingMessage | undefined = undefined;\n                  if (message.attachTo && message.attachTo !== 0) {\n                    originalMessage = conversation.find((m) => m.messageId === message.attachTo) ?? {\n                      messageId: message.attachTo,\n                      userIdFrom: 0,\n                      userIdTo: 0,\n                      content: \"[Tap to load and jump to original message]\",\n                      isActive: true,\n                      attachTo: 0,\n                      sentAt: new Date().toISOString(),\n                      readAt: null,\n                      imageAPIList: null,\n                    };\n                  }\n\n                  return (\n                    <ChatMessage\n                      key={message.messageId}\n                      myUserId={session.userId!}\n                      message={message}\n                      isSelected={selectedMessages.has(message.messageId)}\n                      onMessageClick={toggleSelection}\n                      handleSelectOption={handleSelectionButton}\n                      handleDeleteOption={deleteMessages}\n                      isInSelectionMode={inSelection}\n                      handleReplyOption={(messageId) =>\n                        setReplyTo(conversation.find((msg) => msg.messageId === messageId) || null)\n                      }\n                      handleScrollToMessage={handleScrollToMessage}\n                      replyTo={originalMessage}\n                      contactUsername={selectedContact.contactUsername}\n                    />\n                  );\n                })}\n                {/* Observer target and loading state for older messages */}\n                <div ref={messageLoaderRef} className=\"py-2 text-center\">\n                  {isLoadingMoreMessages ? (\n                    <span className=\"loading loading-spinner loading-md\"></span>\n                  ) : !hasMoreMessages && conversation.length > 0 ? (\n                    <p className=\"text-xs text-base-content/50\">This is the begining of the conversation</p>\n                  ) : (\n                    <div className=\"h-1\"></div> // Placeholder for observer\n                  )}\n                </div>\n              </div>\n\n              {/* Scroll to Bottom Button */}\n              {showScrollToBottom && (\n                <button\n                  onClick={() => scrollToBottom()}\n                  className=\"absolute bottom-20 right-4 btn btn-circle btn-sm z-40 shadow-lg\" // Positioned button\n                >\n                  <FontAwesomeIcon icon={faAngleDown} />\n                </button>\n              )}\n\n              {/* Input Area */}\n              <div className=\"flex flex-col p-2 bg-base-100 border border-base-300\">\n                {/* Reply Indicator */}\n                {replyTo && (\n                  <div className=\"flex justify-between items-center p-2 mb-2 rounded-md bg-base-200 border-l-4 border-primary\">\n                    <div className=\"text-xs overflow-hidden\">\n                      <p className=\"font-semibold flex items-center gap-1\">\n                        {replyTo.userIdFrom === session.userId ? \"You\" : selectedContact.contactUsername}\n                      </p>\n                      <p className=\"truncate opacity-70\">\n                        {replyTo.content || (replyTo.imageAPIList ? \"[Image]\" : \"[Original message]\")}\n                      </p>\n                    </div>\n                    {/* Remove button */}\n                    <button onClick={() => setReplyTo(null)} className=\"btn btn-xs btn-circle bg-base-100\">\n                      <FontAwesomeIcon icon={faXmark} />\n                    </button>\n                  </div>\n                )}\n                {/* Image Previews */}\n                {filePreviews.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mb-2 p-2\">\n                    {filePreviews.map((previewUrl, index) => (\n                      <div key={index} className=\"indicator\">\n                        <img src={previewUrl} alt={`Preview ${index}`} className=\"h-16 w-16 object-cover rounded\" />\n                        <div className=\"indicator-item\">\n                          <button onClick={() => removeImagePreview(index)} className=\"btn btn-circle btn-soft btn-xs\">\n                            <FontAwesomeIcon icon={faMinus} size=\"lg\" />\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n                {/* Text Input and Buttons */}\n                <div className=\"flex gap-2 items-center\">\n                  {/* Hidden File Input */}\n                  <input ref={fileInputRef} type=\"file\" accept=\"image/*\" multiple hidden onChange={handleImageSelect} />\n                  {/* Image Upload Button */}\n                  <button\n                    className=\"btn btn-ghost btn-circle\"\n                    onClick={() => fileInputRef.current?.click()} // Trigger hidden input\n                    aria-label=\"Attach image\"\n                  >\n                    <FontAwesomeIcon icon={faImages} size=\"lg\" />\n                  </button>\n                  <input\n                    type=\"text\"\n                    className=\"input input-ghost flex-grow\"\n                    placeholder=\"Type here\"\n                    value={messageText}\n                    onChange={(e) => setMessageText(e.target.value)}\n                  />\n                  {/* Send Button */}\n                  <button className=\"btn btn-primary\" onClick={sendMessage}>\n                    Send\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"flex h-full items-center justify-center\">\n              <div className=\"text-center text-base-content/50\">\n                <p>\n                  {connectionStatus !== ConnectionStatus.CONNECTED ? (\n                    <span className=\"flex items-center gap-1\">\n                      Connecting\n                      <span className=\"loading loading-dots loading-sm\"></span>\n                    </span>\n                  ) : (\n                    <span>Send direct messages to users on FlowChat</span>\n                  )}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Right column */}\n      <div className=\"hidden lg:block w-1/8\"></div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}