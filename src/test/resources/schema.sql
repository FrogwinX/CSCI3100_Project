CREATE SCHEMA IF NOT EXISTS ACCOUNT;
CREATE SCHEMA IF NOT EXISTS CHAT;
CREATE SCHEMA IF NOT EXISTS FORUM;
CREATE SCHEMA IF NOT EXISTS IMAGE;
CREATE SCHEMA IF NOT EXISTS PROFILE;

-- ACCOUNT tables

CREATE TABLE IF NOT EXISTS ACCOUNT.Authentication (
   key_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   key_code VARCHAR(16),
   email VARCHAR(100) NOT NULL,
   created_at TIMESTAMP NOT NULL,
   expires_at TIMESTAMP NOT NULL,
   is_available TINYINT DEFAULT 1 NOT NULL
);

CREATE TABLE IF NOT EXISTS ACCOUNT.Role (
   role_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   role_name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS ACCOUNT.User_Account (
   user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   username VARCHAR(50) NOT NULL,
   email VARCHAR(100) NOT NULL,
   password_hash VARCHAR(255) NOT NULL,
   is_active TINYINT DEFAULT 1 NOT NULL,
   role_id INT NOT NULL,
   created_at TIMESTAMP NOT NULL,
   updated_at TIMESTAMP NOT NULL,
   CONSTRAINT fk_role FOREIGN KEY (role_id) REFERENCES ACCOUNT.Role(role_id)
);

-- CHAT tables

CREATE TABLE IF NOT EXISTS CHAT.Message (
   message_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   user_id_from INT NOT NULL,
   user_id_to INT NOT NULL,
   content VARCHAR(1000) NOT NULL,
   attach_to INT DEFAULT 0,
   is_active TINYINT DEFAULT 1 NOT NULL,
   sent_at TIMESTAMP NOT NULL,
   read_at TIMESTAMP,
   CONSTRAINT fk_msg_user_from FOREIGN KEY (user_id_from) REFERENCES ACCOUNT.User_Account(user_id),
   CONSTRAINT fk_msg_user_to FOREIGN KEY (user_id_to) REFERENCES ACCOUNT.User_Account(user_id)
);

CREATE TABLE IF NOT EXISTS CHAT.Message_Image (
   message_id INT NOT NULL,
   image_id INT NOT NULL,
   PRIMARY KEY (message_id, image_id),
   CONSTRAINT fk_msgimg_msg FOREIGN KEY (message_id) REFERENCES CHAT.Message(message_id)
   -- image_id FK added after IMAGE.Image_Data
);

-- FORUM tables

CREATE TABLE IF NOT EXISTS FORUM.Post (
   post_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   user_id INT NOT NULL,
   title VARCHAR(100),
   content VARCHAR(1000) NOT NULL,
   like_count INT DEFAULT 0,
   dislike_count INT DEFAULT 0,
   comment_count INT DEFAULT 0,
   attach_to INT DEFAULT 0,
   is_active TINYINT DEFAULT 1 NOT NULL,
   created_at TIMESTAMP NOT NULL,
   updated_at TIMESTAMP NOT NULL,
   popularity_score INT DEFAULT 0 NOT NULL,
   view_count INT DEFAULT 0 NOT NULL,
   CONSTRAINT fk_post_user FOREIGN KEY (user_id) REFERENCES ACCOUNT.User_Account(user_id)
);

CREATE TABLE IF NOT EXISTS FORUM."Like" (
   post_id INT NOT NULL,
   user_id INT NOT NULL,
   PRIMARY KEY (post_id, user_id),
   CONSTRAINT fk_like_post FOREIGN KEY (post_id) REFERENCES FORUM.Post(post_id),
   CONSTRAINT fk_like_user FOREIGN KEY (user_id) REFERENCES ACCOUNT.User_Account(user_id)
);

CREATE TABLE IF NOT EXISTS FORUM.Dislike (
   post_id INT NOT NULL,
   user_id INT NOT NULL,
   PRIMARY KEY (post_id, user_id),
   CONSTRAINT fk_dislike_post FOREIGN KEY (post_id) REFERENCES FORUM.Post(post_id),
   CONSTRAINT fk_dislike_user FOREIGN KEY (user_id) REFERENCES ACCOUNT.User_Account(user_id)
);

CREATE TABLE IF NOT EXISTS FORUM.Post_Image (
   post_id INT NOT NULL,
   image_id INT NOT NULL,
   PRIMARY KEY (post_id, image_id),
   CONSTRAINT fk_postimg_post FOREIGN KEY (post_id) REFERENCES FORUM.Post(post_id)
   -- image_id FK added after IMAGE.Image_Data
);

CREATE TABLE IF NOT EXISTS FORUM.Tag_Data (
   tag_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   tag_name VARCHAR(100) NOT NULL,
   keyword VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS FORUM.Post_Tag (
   post_id INT NOT NULL,
   tag_id INT NOT NULL,
   PRIMARY KEY (post_id, tag_id),
   CONSTRAINT fk_posttag_post FOREIGN KEY (post_id) REFERENCES FORUM.Post(post_id),
   CONSTRAINT fk_posttag_tag FOREIGN KEY (tag_id) REFERENCES FORUM.Tag_Data(tag_id)
);

CREATE TABLE IF NOT EXISTS FORUM.Recommendation (
   user_id INT NOT NULL,
   tag_id INT NOT NULL,
   score INT DEFAULT 0 NOT NULL,
   updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
   PRIMARY KEY (user_id, tag_id),
   CONSTRAINT fk_recommend_user FOREIGN KEY (user_id) REFERENCES ACCOUNT.User_Account(user_id),
   CONSTRAINT fk_recommend_tag FOREIGN KEY (tag_id) REFERENCES FORUM.Tag_Data(tag_id)
);

CREATE TABLE IF NOT EXISTS FORUM.View (
   post_id INT NOT NULL,
   user_id INT NOT NULL,
   PRIMARY KEY (post_id, user_id)
);

-- IMAGE tables

CREATE TABLE IF NOT EXISTS IMAGE.Image_Data (
   image_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   image_name VARCHAR(255) NOT NULL,
   image_data BLOB NOT NULL,
   image_format VARCHAR(15) NOT NULL
);

-- Add missing FKs now that IMAGE.Image_Data exists
ALTER TABLE CHAT.Message_Image ADD CONSTRAINT fk_msgimg_img FOREIGN KEY (image_id) REFERENCES IMAGE.Image_Data(image_id);
ALTER TABLE FORUM.Post_Image ADD CONSTRAINT fk_postimg_img FOREIGN KEY (image_id) REFERENCES IMAGE.Image_Data(image_id);

-- PROFILE tables

CREATE TABLE IF NOT EXISTS PROFILE.Block (
   user_id_from INT NOT NULL,
   user_id_to INT NOT NULL,
   PRIMARY KEY (user_id_from, user_id_to),
   CONSTRAINT fk_block_from FOREIGN KEY (user_id_from) REFERENCES ACCOUNT.User_Account(user_id),
   CONSTRAINT fk_block_to FOREIGN KEY (user_id_to) REFERENCES ACCOUNT.User_Account(user_id)
);

CREATE TABLE IF NOT EXISTS PROFILE.Follow (
   user_id_from INT NOT NULL,
   user_id_to INT NOT NULL,
   PRIMARY KEY (user_id_from, user_id_to),
   CONSTRAINT fk_follow_from FOREIGN KEY (user_id_from) REFERENCES ACCOUNT.User_Account(user_id),
   CONSTRAINT fk_follow_to FOREIGN KEY (user_id_to) REFERENCES ACCOUNT.User_Account(user_id)
);

CREATE TABLE IF NOT EXISTS PROFILE.User_Profile (
   user_id INT PRIMARY KEY,
   username VARCHAR(50) NOT NULL UNIQUE,
   description VARCHAR(300) NOT NULL,
   avatar_id INT,
   updated_at TIMESTAMP NOT NULL,
   CONSTRAINT fk_profile_user FOREIGN KEY (user_id) REFERENCES ACCOUNT.User_Account(user_id),
   CONSTRAINT fk_profile_avatar FOREIGN KEY (avatar_id) REFERENCES IMAGE.Image_Data(image_id)
);

INSERT INTO ACCOUNT.Role (role_id, role_name) VALUES (1, 'admin');
INSERT INTO ACCOUNT.Role (role_id, role_name) VALUES (2, 'user');